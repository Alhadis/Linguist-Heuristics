'\" te
.\" Copyright (c) 2007, 2014, Oracle and/or its affiliates. All rights reserved.
.TH poolcfg 1M "2014 年 3 月 25 日" "SunOS 5.11" "システム管理コマンド"
.SH 名前
poolcfg \- リソースプール構成ファイルの作成および変更
.SH 形式
.LP
.nf
\fB/usr/sbin/poolcfg\fR \fB-c\fR \fIcommand\fR [\fB-d\fR | [\fIfilename\fR]]
.fi

.LP
.nf
\fB/usr/sbin/poolcfg\fR \fB-f\fR \fIcommand-file\fR [\fB-d\fR | [\fIfilename\fR]]
.fi

.LP
.nf
\fB/usr/sbin/poolcfg\fR \fB-h\fR
.fi

.SH 機能説明
.sp
.LP
\fBpoolcfg\fR ユーティリティーは、プール、セット、システム全体のプールプロパティーに対する構成操作を提供します。これらの操作は、既存の構成ファイルに基づいて実行されます。ファイル引数が指定されていない場合、デフォルトの構成ファイル \fB/etc/pooladm.conf\fR が使用されます。
.sp
.LP
プール構成ファイルを作成または確定する前に、タイプ svc:/system/pools:default サービスを有効にしておく必要があります。サービスは、\fBsvcadm\fR(1M) を使用するか、\fBpooladm\fR(1M) ユーティリティーへの \fB-e\fR オプションで有効にできます。
.sp
.LP
\fB/etc/pooladm.conf\fR はデフォルトでは存在しません。作成手順については下の例 1 を参照してください。
.sp
.LP
\fBsvc:/system/pools:default\fR サービスが有効な場合、この構成ファイルはシステムのブート中に適用されます。構成ファイルは、\fBpooladm\fR(1M) ユーティリティーの \fB-c\fR オプションを使用して適用することもできます。このことは、プール構成を確定すると呼ばれています。構成を確定すると、プールおよび pset がカーネル内に作成され、それらにプロセスをバインドできます。このカーネル状態はプール動的構成と呼ばれます。
.sp
.LP
\fBpoolcfg\fR に \fB-d\fR オプションを使用すると、操作は構成ファイル上ではなく、実行時カーネル状態に対して直接実行されます。これらの変更はリブート時に永続せず、プール構成ファイルの将来の適用によって強制削除されます。\fBpoolcfg -d\fR によって構成ファイルに行われた実行時変更を取得するには、\fBpooladm\fR(1M) ユーティリティーに \fB-s\fR オプションを使用します。
.sp
.LP
プール構成ファイルは、poolcfg(1m) または \fBlibpool\fR(3LIB) を使用して構築および編集する必要のある構造化ファイルです。
.sp
.LP
別の \fBpoolcfg -d\fR や libpool.so.1 を利用するプロセスなどの別のプロセスによって、書き込み用に動的構成がすでに開かれている場合、変更操作を使用する \fBpoolcfg -d\fR の呼び出しはハングアップします。ハングアップは、書き込みプロセスがファイルが閉じるまで永続します。
.SH オプション
.sp
.LP
サポートしているオプションは、次のとおりです。
.sp
.ne 2
.mk
.na
\fB\fB-c\fR \fIcommand\fR\fR
.ad
.RS 19n
.rt  
\fBpoolcfg\fR コマンドを指定します。複数の \fB-c\fR オプションがサポートされ、順番に処理されます。後述の「使用法」セクションを参照してください。
.RE

.sp
.ne 2
.mk
.na
\fB\fB-d\fR\fR
.ad
.RS 19n
.rt  
カーネル状態に対して直接操作を行います。このカーネル状態は、プール動的構成とも呼ばれます。
.sp
filename 引数は許可されません。コマンドは、\fBpooladm\fR(1M) コマンドで示されるようにカーネル状態に対して実行され、変更はすぐに確定されます。
.RE

.sp
.ne 2
.mk
.na
\fB\fB-f\fR \fIcommand-file\fR\fR
.ad
.RS 19n
.rt  
\fIcommand-file\fR からコマンドを取得します。\fIcommand-file\fR は \fBpoolcfg\fR コマンドから構成されます (1 行に 1 つ)。 
.RE

.sp
.ne 2
.mk
.na
\fB\fB-h\fR\fR
.ad
.RS 19n
.rt  
編集コマンドの構文に関する詳細情報を表示します。
.RE

.SH 使用法
.sp
.LP
次の \fBpoolcfg\fR コマンドがサポートされています。
.sp
.ne 2
.mk
.na
\fBinfo [<\fIentity-type\fR> <\fIentity-name\fR> ]\fR
.ad
.sp .6
.RS 4n
構成 (または指定された部分) を、人間が読める形式で標準出力に表示します。エンティティーが指定されなかった場合、システムの情報が表示されます。したがって、\fBpoolcfg\fR \fB-c\fR \fB\&'info'\fR は、\fBpoolcfg\fR \fB- c\fR \fB\&'info system default'\fR と同等の呼び出しです。
.RE

.sp
.ne 2
.mk
.na
\fBcreate <\fIentity-type\fR> <\fIentity-name\fR> [(\fIproperty-list\fR)]\fR
.ad
.sp .6
.RS 4n
指定されたタイプと名前のエンティティーを作成します。タイプ \fBpool\fR および \fBpset\fR のエンティティーを作成できます。作成された pset は \fBpool_default\fR に関連付けられます。作成されたプールは \fBpset_default\fR に関連付けられます。
.sp
オプションで 1 つ以上のプロパティーの初期値を提供するために \fBproperty-list\fR を指定できます。
.RE

.sp
.ne 2
.mk
.na
\fBdestroy <\fIentity-type\fR> <\fIentity-name\fR>\fR
.ad
.sp .6
.RS 4n
指定されたエンティティーを削除します。タイプ \fBpool\fR および \fBpset\fR のエンティティーを破棄できます。pset が破棄されると、その pset に関連付けられているプールは「\fBpool_default\fR」プールに関連付けられます。
.RE

.sp
.ne 2
.mk
.na
\fBmodify <\fIentity-type\fR> <\fIentity-name\fR> [(\fIproperty-list\fR)]\fR
.ad
.sp .6
.RS 4n
指定されたエンティティー上の指定された一連のプロパティーを変更します。\fBpset.min\fR および \fBpset.max\fR プロパティーを変更すると、前の \fBassign\fR コマンドによって設定された構成が削除されます。
.RE

.sp
.ne 2
.mk
.na
\fBassociate pool <\fIentity-name\fR> ( pset <\fIentity-name\fR> )\fR
.ad
.sp .6
.RS 4n
プールを pset に関連付けます。プールと pset がどちらも存在している必要があります。プールは単一 pset にのみ関連付けることができるので、以前の pset 関連付けは削除されます。
.RE

.sp
.ne 2
.mk
.na
\fBassign to pset <\fIentity-name\fR> ( <\fIcpu-resource-list\fR> )\fR
.ad
.sp .6
.RS 4n
CPU、コア、またはソケットの特定のセットを pset に割り当てます。pset はすべてが同じタイプの CPU リソースに割り当てる必要があります。
.sp
プール構成ファイル内で CPU リソースがすでに別の pset に割り当てられている場合、assign コマンドは失敗します。
.sp
指定された pset に対し、\fBassign\fR コマンドは、以前の modify コマンドによって設定された構成を置き換えます。以前の assign コマンドは、同じタイプであれば保持されます。たとえば、すでにコアが割り当てられている pset にコアを割り当てた場合、すでに割り当てられているコアを置き換えるのではなく、それらに追加されます。
.RE

.sp
.ne 2
.mk
.na
\fBunassign from pset <\fIentity-name\fR> ( [ <\fIcpu-resource-list> | all\fR ] )\fR
.ad
.sp .6
.RS 4n
CPU、コア、またはソケットの割り当てを pset から削除します。特殊トークン「all」を使用すると、すべてのリソースの割り当てを解除できます。すべての CPU リソースが割り当て解除され、pset に 1 つ以上のプロセスがバインドされている場合、構成は確定できません。
.sp
\fBassign\fR コマンドが成功したあとにのみ、\fBunassign\fR コマンドは成功します。
.RE

.sp
.ne 2
.mk
.na
\fBtransfer to pset <\fItgt-pset-name\fR> ( <\fIcpu-resource-list\fR> )\fR
.ad
.sp .6
.RS 4n
1 つ以上の特定の CPU を移動します。CPU リソースタイプだけがサポートされています。
.RE

.sp
.ne 2
.mk
.na
\fBtransfer <\fIquantity\fR> from pset <\fIsrc-pset-name\fR> to <\fItgt-pset-name\fR>\fR
.ad
.sp .6
.RS 4n
pset src-pset-name から pset tgt-pset-name に複数の CPU を移動します。
.RE

.sp
.ne 2
.mk
.na
\fBtransfer <\fIquantity\fR> to pset <\fItgt-pset-name\fR> from <\fIsrc-pset-name\fR>\fR
.ad
.sp .6
.RS 4n
\fBpset tgt-pset-name\fR に \fBpset src-pset-name\fR から指定された数量の CPU を移動します。
.sp
ソースまたはターゲット pset が \fBassign\fR コマンドで構成されている場合、\fBtransfer\fR コマンドは失敗します。\fBpset_default\fR は割り当てられている数量を超える CPU リソースを持てるので、この規則は \fBpset_default\fR には適用されません。
.sp
\fBtransfer\fR コマンドは、ソースまたはターゲット pset に構成される CPU の数が最小数または最大数を超える場合、失敗します。この規則は、\fBpset_default\fR の最大サイズには適用されません (pset.min および pset.max プロパティーで割り当てられた数量を超える CPU リソースを持てる)。
.RE

.sp
.ne 2
.mk
.na
\fBdiscover\fR
.ad
.sp .6
.RS 4n
\fBpooladm\fR(1M) ユーティリティーによる出力として、現在のカーネルプール構成に一致する新しいプール構成ファイルを作成します。
.sp
\fBpoolcfg\fR がカーネルに対して直接操作する場合、このコマンドは効果を持ちません。\fB-d\fR オプションを参照してください。
.sp
このコマンドはできるだけ使用しないでください。構成を作成するために推奨されている方法は、\fBpooladm\fR(1M) の \fB-s\fR オプションを使って動的構成をエクスポートすることです。
.RE

.sp
.ne 2
.mk
.na
\fBrename <\fIentity-type\fR> <\fIentity-name\fR> to <\fIentity-name\fR>\fR
.ad
.sp .6
.RS 4n
システム上の特定のエンティティーの名前を別の名前に変更します。 
.RE

.sp
.LP
\fBpoolcfg\fR コマンドは次のトークンを使用します。
.sp
.ne 2
.mk
.na
\fB\fIentity-type\fR\fR
.ad
.RS 21n
.rt  
次のいずれかが可能です。
.sp
.ne 2
.mk
.na
\fBsystem\fR
.ad
.RS 13n
.rt  
マシンレベルのエンティティー。名前が「default」のシステムエンティティーは 1 つだけ存在します。
.RE

.sp
.ne 2
.mk
.na
\fBプール\fR
.ad
.RS 13n
.rt  
pset に関連付けられた名前付きオブジェクト。同じプロセッサセットに複数のプールを関連付けられますが、pset には単一プールのみを関連付けられます。
.RE

.sp
.ne 2
.mk
.na
\fBpset\fR
.ad
.RS 13n
.rt  
プロセッサリソースのコレクションを表すオブジェクト。
.RE

.sp
.ne 2
.mk
.na
\fBcpu\fR
.ad
.RS 13n
.rt  
単一の仮想プロセッサを表すオブジェクト (ハードウェアスレッドとも呼ばれます)。
.RE

.RE

.sp
.ne 2
.mk
.na
\fBentity-name\fR
.ad
.RS 21n
.rt  
エンティティー名はエンティティータイプごとに変わります。
.sp
タイプ「system」の場合、名前「default」のエンティティーは 1 つだけ存在します。システムエンティティーには、システム全体のプールプロパティーが保存されます。
.sp
タイプ「pool」の場合、常に「pool_default」と、ゼロ個以上のユーザー定義プールが存在します。
.sp
タイプ「pset」の場合、常に「pset_default」と、ゼロ個以上のユーザー定義 pset が存在します。
.sp
タイプ「cpu」の場合、システム上の CPU ごとに CPU エンティティーがあり、その cpuid と同じ数値名がそれぞれに付けられています。
.RE

.sp
.ne 2
.mk
.na
\fBprop-type\fR
.ad
.RS 21n
.rt  
次のいずれかが可能です。
.sp
.ne 2
.mk
.na
\fBboolean\fR
.ad
.RS 11n
.rt  
2 つの値 true、false のいずれかを取ります。
.RE

.sp
.ne 2
.mk
.na
\fBint\fR
.ad
.RS 11n
.rt  
64 ビット符号付き整数値。
.RE

.sp
.ne 2
.mk
.na
\fBuint\fR
.ad
.RS 11n
.rt  
64 ビット符号なし整数値。
.RE

.sp
.ne 2
.mk
.na
\fBstring\fR
.ad
.RS 11n
.rt  
文字列は引用符 (\fB"\fR) で区切られ、\fBformats\fR(5) で定義されている文字エスケープシーケンスをサポートします。
.RE

.sp
.ne 2
.mk
.na
\fBfloat\fR
.ad
.RS 11n
.rt  
科学用の表記はサポートされません。
.RE

.RE

.sp
.ne 2
.mk
.na
\fBprop-name\fR
.ad
.RS 21n
.rt  
操作されているエンティティーのプロパティーの名前。リソースプールフレームワークで認識されるプロパティーのリストについては、\fBlibpool\fR(3LIB) マニュアルページを参照してください。ユーザー定義のプロパティーも設定および削除できます。
.RE

.sp
.ne 2
.mk
.na
\fBvalue\fR
.ad
.RS 21n
.rt  
直前の prop-type で定義された有効な値。
.RE

.sp
.ne 2
.mk
.na
\fBproperty-list\fR
.ad
.RS 21n
.rt  
プロパティーリストとは、1 つ以上のプロパティー値割り当てのリストです。
.sp
.in +2
.nf
<prop-type> <prop-name> = <value>
  [ ; <prop-type> <prop-name> = <value> ]*
.fi
.in -2

プロパティーの削除は、property-list 内で次の構文を使用して指定することもできます。
.sp
.in +2
.nf
~ <prop-type> <prop-name>
.fi
.in -2

.RE

.sp
.ne 2
.mk
.na
\fBcpu-res-type\fR
.ad
.RS 21n
.rt  
CPU リソースを表すオブジェクト。次のいずれかが可能です。
.sp
.ne 2
.mk
.na
\fBcpu\fR
.ad
.RS 10n
.rt  
仮想 CPU (ハードウェアスレッドとも呼ばれます)。
.RE

.sp
.ne 2
.mk
.na
\fBcore\fR
.ad
.RS 10n
.rt  
計算リソースを共有する仮想 CPU のグループ。
.RE

.sp
.ne 2
.mk
.na
\fBsocket\fR
.ad
.RS 10n
.rt  
物理プロセッサ内に含まれるコアのグループ。
.RE

.RE

.sp
.ne 2
.mk
.na
\fBcpu-res-id\fR
.ad
.RS 21n
.rt  
\fBpsrinfo -c\fR でリストされる、CPU、コア、またはソケットの数値 ID。
.RE

.sp
.ne 2
.mk
.na
\fBcpu-resource-list\fR
.ad
.RS 21n
.rt  
1 つ以上の CPU リソースのリスト。リスト内のリソースの cpu-type はすべて同じである必要があります。
.sp
.in +2
.nf
cpu-res-type cpu-res-id [ ; cpu-res-type cpu-res-id ]
.fi
.in -2

.RE

.sp
.ne 2
.mk
.na
\fBrange\fR
.ad
.RS 21n
.rt  
\fB-\fR で区切られる最小値と最大値。たとえば、2 から 4 の範囲は「2-4」と表されます。
.RE

.sp
.ne 2
.mk
.na
\fBquantity\fR
.ad
.RS 21n
.rt  
単一の正の整数値。
.RE

.SH 使用例
.LP
\fB例 1 \fRプールの有効化と構成ファイルの新規作成
.sp
.LP
次のコマンドは、プールサービスを有効にし、プール構成ファイルを新規作成します。作成されるファイルは \fB/etc/pooladm.conf\fR です。これには pool_default と pset_default が含まれます。

.sp
.in +2
.nf
# \fBpooladm -e\fR
# \fBpooladm -s\fR
.fi
.in -2
.sp

.LP
\fB例 2 \fRプールおよび pset の作成
.sp
.LP
次の \fBpoolcfg\fR スクリプトは、\fBAccounting\fR という名前のプールと、プロセッサセット \fBsmall-1\fR を作成します。まず、プロセッサセットが作成されます。次に、プールが作成され、それにプロセッサセットが関連付けられます。最後に、構成が確定され、実行中のシステム上でプールおよび pset が作成されます。

.sp
.in +2
.nf
# \fBcat command-file.txt\fR 
create pset Small-1 (uint pset.min = 2; uint pset.max = 2)
create pool associate pool Accounting ( pset Small-1 )
  
# \fBpoolcfg -f command-file.txt\fR
# \fBpooladm -c\fR
.fi
.in -2
.sp

.LP
\fB例 3 \fR\fBpool_0\fR のレポート
.sp
.LP
次のコマンドは、\fBpool_0\fR に関するレポートを、人間が読める形式で標準出力に出力します。 

.sp
.in +2
.nf
 # \fBpoolcfg -c 'info pool pool_0'\fR
.fi
.in -2
.sp

.LP
\fB例 4 \fRpool_0 とその関連付けの削除
.sp
.LP
次のコマンドは pool_0 を破棄します。pool_0 に関連付けられた pset は破棄されません。

.sp
.in +2
.nf
# \fBpoolcfg -c 'destroy pool pool_0'\fR
.fi
.in -2
.sp

.LP
\fB例 5 \fR現在の構成の表示
.sp
.LP
次のコマンドは、システムブートまたは次の \fBpooladm -c\fR コマンドで適用される現在の構成を表示します。

.sp
.in +2
.nf
       $ poolcfg -c 'info'
       system default
        string  system.comment
        int     system.version 1
        boolean system.bind-default true
        string  system.poold.objectives wt-load
  
        pool pool_default
                int     pool.sys_id 0
                boolean pool.active true
                boolean pool.default true
                int     pool.importance 1
                string  pool.comment
                pset    pset_default
  
       pset pset_default
               int     pset.sys_id -1
               boolean pset.default true
               uint    pset.min 1
               uint    pset.max 65536
               string  pset.units population
               string  pset.policy minmax
               string  pset.restype cpu
               strintg pset.reslist
               uint    pset.load 0
               uint    pset.size 2
               string  pset.comment
  
               cpu
                       int     cpu.sys_id 1
                       string  cpu.comment
                       string  cpu.status on-line
  
              cpu
                       int     cpu.sys_id 0
                       string  cpu.comment
                       string  cpu.status on-line
.fi
.in -2
.sp

.LP
\fB例 6 \fRカーネル内で ID 2 の cpu をプロセッサセット pset1 に移動する
.sp
.LP
次のコマンドは、カーネル内で、ID \fB2\fR の \fBcpu\fR をプロセッサセット \fBpset1\fR に移動します。

.sp
.in +2
.nf
# \fBpoolcfg -dc 'transfer to pset pset1 ( cpu 2 )'\fR
.fi
.in -2
.sp

.LP
\fB例 7 \fRカーネル内で 2 つの cpu をプロセッサセット pset1 からプロセッサセット pset2 に移動する
.sp
.LP
次のコマンドでは、カーネル内で、2 つの \fBcpu\fR をプロセッサセット \fBpset1\fR からプロセッサセット \fBpset2\fR に移動します。

.sp
.in +2
.nf
# \fBpoolcfg -dc 'transfer 2 from pset pset1 to pset2'\fR
.fi
.in -2
.sp

.LP
\fB例 8 \fR特定のコアのリストを持つプールの構成
.sp
.LP
次のコマンドは、特定のコアのリストを持つようにプールを構成します。

.sp
.in +2
.nf
# \fBpoolcfg -c 'create pset pset1'\fR
# \fBpoolcfg -c 'assign to pset pset1 (core 0-3)'\fR
.fi
.in -2
.sp

.LP
\fB例 9 \fRプールプロパティーの削除
.sp
.LP
次のコマンドは、ユーザーが以前にプール上で設定したプロパティーを削除します。

.sp
.in +2
.nf
# \fBpoolcfg -c 'modify pool pset1 ( ~ string userprop1 )'\fR
.fi
.in -2
.sp

.SH 属性
.sp
.LP
属性についての詳細は、マニュアルページの \fBattributes\fR(5) を参照してください。
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i) 
lw(2.75i) |lw(2.75i) 
.
属性タイプ属性値
_
使用条件system/resource-mgmt/resource-pools
_
インタフェースの安定性下記を参照。
.TE

.sp
.LP
呼び出しは「確実」です。出力は「不確実」です。
.SH 関連項目
.sp
.LP
\fBpooladm\fR(1M)、\fBpoolbind\fR(1M)、\fBpoold\fR(1M)、\fBlibpool\fR(3LIB)、\fBattributes\fR(5)、\fBformats\fR(5)
.sp
.LP
\fI『Administering Resource Management in Oracle         Solaris 11.3』\fR
.sp
.LP
\fI『Creating and Using Oracle Solaris Zones』\fR
