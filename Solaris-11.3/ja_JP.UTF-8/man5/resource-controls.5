'\" te
.\" Copyright (c) 2007, 2015, Oracle and/or its affiliates.All rights reserved.
.TH resource-controls  5 "2015 年 5 月 21 日" "SunOS 5.11" "標準、環境、マクロ"
.SH 名前
resource-controls \- プロジェクトデータベースから使用可能なリソース制御
.SH 機能説明
.sp
.LP
リソース制御の機能は、プロジェクトデータベースから構成されます。\fBproject\fR(4) を参照してください。リソース制御は、次のユーティリティーから設定および変更できます:
.RS +4
.TP
.ie t \(bu
.el o
\fBprctl\fR(1)
.RE
.RS +4
.TP
.ie t \(bu
.el o
\fBprojadd\fR(1M)
.RE
.RS +4
.TP
.ie t \(bu
.el o
\fBprojmod\fR(1M)
.RE
.RS +4
.TP
.ie t \(bu
.el o
\fBrctladm\fR(1M)
.RE
.sp
.LP
プログラムでは、\fBsetrctl\fR(2) を使用してリソース制御値を設定します。
.sp
.LP
前のリソース制御に加えて、\fBpooladm\fR(1M) および \fBpoolcfg\fR(1M) ユーティリティーからアクセス可能なリソースプールもあります。プログラムでは、リソースプールは \fBlibpool\fR(3LIB) ライブラリから操作できます。
.sp
.LP
使用可能なリソース制御を次に示します:
.sp
.ne 2
.mk
.na
\fB\fBprocess.max-address-space\fR\fR
.ad
.sp .6
.RS 4n
このプロセスで使用できる、セグメントサイズについて集計されたアドレス空間の最大量で、バイト数で表現されます。
.RE

.sp
.ne 2
.mk
.na
\fB\fBprocess.max-core-size\fR\fR
.ad
.sp .6
.RS 4n
このプロセスによって作成されるコアファイルの最大サイズで、バイト数で表現されます。
.RE

.sp
.ne 2
.mk
.na
\fB\fBprocess.max-cpu-time\fR\fR
.ad
.sp .6
.RS 4n
このプロセスで使用できる最大 CPU 時間で、秒数で表現されます。
.RE

.sp
.ne 2
.mk
.na
\fB\fBprocess.max-data-size\fR\fR
.ad
.sp .6
.RS 4n
このプロセスで使用できる最大ヒープメモリーで、バイト数で表現されます。
.RE

.sp
.ne 2
.mk
.na
\fB\fBprocess.max-file-descriptor\fR\fR
.ad
.sp .6
.RS 4n
このプロセスで使用できる最大のファイル記述子インデックスで、整数で表現されます。
.RE

.sp
.ne 2
.mk
.na
\fB\fBprocess.max-file-size\fR\fR
.ad
.sp .6
.RS 4n
このプロセスでの書き込みに使用できる最大ファイルオフセット。バイト数で表現されます。
.RE

.sp
.ne 2
.mk
.na
\fB\fBprocesss.max-itimers\fR\fR
.ad
.sp .6
.RS 4n
インターバルタイマーの許容可能な最大数で、整数で表現されます。
.RE

.sp
.ne 2
.mk
.na
\fB\fBprocess.max-msg-messages\fR\fR
.ad
.sp .6
.RS 4n
メッセージキュー上のメッセージの最大数 (\fBmsgget()\fR の時点でリソース制御からコピーされる値) で、整数で表現されます。
.RE

.sp
.ne 2
.mk
.na
\fB\fBprocess.max-msg-qbytes\fR\fR
.ad
.sp .6
.RS 4n
メッセージキュー上のメッセージの最大バイト数 (\fBmsgget()\fR の時点でリソース制御からコピーされる値) で、バイト数で表現されます。
.RE

.sp
.ne 2
.mk
.na
\fB\fBprocess.max-port-events\fR\fR
.ad
.sp .6
.RS 4n
イベントポートごとのイベントの許容可能な最大数で、整数で表現されます。
.RE

.sp
.ne 2
.mk
.na
\fB\fBprocess.max-sem-nsems\fR\fR
.ad
.sp .6
.RS 4n
セマフォーセットごとに許可されるセマフォーの最大数で、整数で表現されます。
.RE

.sp
.ne 2
.mk
.na
\fB\fBprocess.max-sem-ops\fR\fR
.ad
.sp .6
.RS 4n
\fBsemop\fR 呼び出しごとに許可されるセマフォー操作の最大数 (\fBsemget()\fR の時点でリソース制御からコピーされる値)。整数で表現され、操作の数を指定します。
.RE

.sp
.ne 2
.mk
.na
\fB\fBprocess.max-sigqueue-size\fR\fR
.ad
.sp .6
.RS 4n
プロセスが保有できるキューに入れられた未処理のシグナルの最大数。
.RE

.sp
.ne 2
.mk
.na
\fB\fBprocess.max-stack-size\fR\fR
.ad
.sp .6
.RS 4n
このプロセスで使用できる最大スタックメモリーセグメントで、バイト数で表現されます。
.RE

.sp
.ne 2
.mk
.na
\fB\fBproject.cpu-caps\fR\fR
.ad
.sp .6
.RS 4n
プロジェクトで使用できる CPU リソースの最大容量。使用される単位は、プロジェクト内のすべてのユーザースレッドで使用できる 1 つの CPU の割合 (%) です。整数で表現されます。リアルタイムスケジューリングクラスで実行されているスレッドに上限は適用されません。このリソース制御は、\fBsyslog\fR アクションをサポートしていません。
.RE

.sp
.ne 2
.mk
.na
\fB\fBproject.cpu-shares\fR\fR
.ad
.sp .6
.RS 4n
公平配分スケジューラで使用するためにプロジェクトに付与される CPU 共有の数 (\fBFSS\fR(7) を参照)。使用される単位は共有の数 (整数) です。このリソース制御は、\fBsyslog\fR アクションをサポートしていません。
.RE

.sp
.ne 2
.mk
.na
\fB\fBproject.max-contracts\fR\fR
.ad
.sp .6
.RS 4n
プロジェクト内で許可される契約の最大数で、整数で表現されます。
.RE

.sp
.ne 2
.mk
.na
\fB\fBproject.max-crypto-memory\fR\fR
.ad
.sp .6
.RS 4n
暗号化操作に使用できるカーネルメモリーの最大容量。カーネル内のバッファーおよびセッション関連の構造体の割り当ては、このリソース制御に対してチャージされます。
.RE

.sp
.ne 2
.mk
.na
\fB\fBprocess.max-deferred-posts\fR\fR
.ad
.sp .6
.RS 4n
許可される遅延ポストの最大数で、整数で表現されます。
.RE

.sp
.ne 2
.mk
.na
\fB\fBproject.max-locked-memory\fR\fR
.ad
.sp .6
.RS 4n
デバイスドライバとユーザープロセス (DISM/ISM/OSM を含む) によってロックされた物理メモリーの合計容量であり、バイト数として表されます。
.RE

.sp
.ne 2
.mk
.na
\fB\fBproject.max-lwps\fR\fR
.ad
.sp .6
.RS 4n
プロジェクトで同時に使用できる LWP の最大数で、整数で表現されます。
.RE

.sp
.ne 2
.mk
.na
\fB\fBproject.max-msg-ids\fR\fR
.ad
.sp .6
.RS 4n
プロジェクトに対して許可されるメッセージキュー ID の最大数で、整数で表現されます。
.RE

.sp
.ne 2
.mk
.na
\fB\fBproject.max-port-ids\fR\fR
.ad
.sp .6
.RS 4n
イベントポートの許容可能な最大数で、整数で表現されます。
.RE

.sp
.ne 2
.mk
.na
\fB\fBproject.max-processes\fR\fR
.ad
.sp .6
.RS 4n
プロジェクトで同時に使用できるプロセスの最大数で、整数で表現されます。
.RE

.sp
.ne 2
.mk
.na
\fB\fBproject.max-sem-ids\fR\fR
.ad
.sp .6
.RS 4n
プロジェクトに対して許可されるセマフォー ID の最大数で、整数で表現されます。
.RE

.sp
.ne 2
.mk
.na
\fB\fBproject.max-shm-ids\fR\fR
.ad
.sp .6
.RS 4n
プロジェクトに対して許可される共有メモリー ID の最大数で、整数で表現されます。
.RE

.sp
.ne 2
.mk
.na
\fB\fBproject.max-shm-memory\fR\fR
.ad
.sp .6
.RS 4n
プロジェクトに対して許可される共有メモリーの合計容量で、バイト数で表現されます。
.RE

.sp
.ne 2
.mk
.na
\fB\fBproject.max-tasks\fR\fR
.ad
.sp .6
.RS 4n
プロジェクト内で許容可能なタスクの最大数で、整数で表現されます。
.RE

.sp
.ne 2
.mk
.na
\fB\fBproject.pool\fR\fR
.ad
.sp .6
.RS 4n
指定されたリソースプールをプロジェクトにバインドします。
.RE

.sp
.ne 2
.mk
.na
\fB\fBrcap.max-rss\fR\fR
.ad
.sp .6
.RS 4n
プロジェクト内のプロセスで使用できる物理メモリーの合計容量 (バイト単位)。
.RE

.sp
.ne 2
.mk
.na
\fB\fBtask.max-cpu-time\fR\fR
.ad
.sp .6
.RS 4n
このタスクのプロセスで使用できる最大 CPU 時間で、秒数で表現されます。
.RE

.sp
.ne 2
.mk
.na
\fB\fBtask.max-lwps\fR\fR
.ad
.sp .6
.RS 4n
このタスクのプロセスで同時に使用できる LWP の最大数で、整数で表現されます。
.RE

.sp
.ne 2
.mk
.na
\fB\fBtask.max-processes\fR\fR
.ad
.sp .6
.RS 4n
タスクで同時に使用できるプロセスの最大数で、整数で表現されます。
.RE

.sp
.LP
次のゾーン規模のリソース制御を使用できます:
.sp
.ne 2
.mk
.na
\fB\fBzone.cpu-cap\fR\fR
.ad
.sp .6
.RS 4n
ゾーンで使用できる CPU 時間に対して制限を設定します。使用される単位は、ゾーン内のすべてのユーザースレッドで使用できる 1 つの CPU の割合 (%) です。整数で表現されます。上限が設けられたゾーン内のプロジェクトに独自の上限がある場合は、最小値が優先されます。このリソース制御は、\fBsyslog\fR アクションをサポートしていません。
.RE

.sp
.ne 2
.mk
.na
\fB\fBzone.cpu-shares\fR\fR
.ad
.sp .6
.RS 4n
ゾーンに対する公平配分スケジューラ (FSS) CPU 共有の数に制限を設定します。CPU 配分は、まずゾーンに対して割り当てられたあとで、\fBproject.cpu-shares\fR エントリの指定に従って、ゾーン内のプロジェクトに分配されます。整数で表現されます。このリソース制御は、\fBsyslog\fR アクションをサポートしていません。
.RE

.sp
.ne 2
.mk
.na
\fB\fBzone.max-locked-memory\fR\fR
.ad
.sp .6
.RS 4n
ゾーンで使用できるロックされた物理メモリーの合計量。
.RE

.sp
.ne 2
.mk
.na
\fB\fBzone.max-lofi\fR\fR
.ad
.sp .6
.RS 4n
ゾーンで使用できる \fBlofi\fR(7D) デバイスの最大数。
.RE

.sp
.ne 2
.mk
.na
\fB\fBzone.max-lwps\fR\fR
.ad
.sp .6
.RS 4n
1 つのゾーン内の LWP が多すぎて、ほかのゾーンに影響を与えることがないようにすることで、リソースの分離を強化します。ゾーンの LWP の合計数は、\fBproject.max-lwps\fR エントリを使用すると、ゾーン内のプロジェクト間でさらに再分割できます。整数で表現されます。
.RE

.sp
.ne 2
.mk
.na
\fB\fBzone.max-msg-ids\fR\fR
.ad
.sp .6
.RS 4n
ゾーンに対して許可されるメッセージキュー ID の最大数で、整数で表現されます。
.RE

.sp
.ne 2
.mk
.na
\fB\fBzone.max-processes\fR\fR
.ad
.sp .6
.RS 4n
ゾーンで同時に使用できるプロセスの最大数で、整数で表現されます。
.RE

.sp
.ne 2
.mk
.na
\fB\fBzone.max-sem-ids\fR\fR
.ad
.sp .6
.RS 4n
ゾーンに対して許可されるセマフォー ID の最大数で、整数で表現されます。
.RE

.sp
.ne 2
.mk
.na
\fB\fBzone.max-shm-ids\fR\fR
.ad
.sp .6
.RS 4n
ゾーンに対して許可される共有メモリー ID の最大数で、整数で表現されます。
.RE

.sp
.ne 2
.mk
.na
\fB\fBzone.max-shm-memory\fR\fR
.ad
.sp .6
.RS 4n
ゾーンに対して許可される共有メモリーの合計容量で、バイト数で表現されます。
.RE

.sp
.ne 2
.mk
.na
\fB\fBzone.max-swap\fR\fR
.ad
.sp .6
.RS 4n
このゾーンのユーザープロセスのアドレス空間マッピングと \fBtmpfs\fR マウントで消費できるスワップの合計量。
.RE

.sp
.LP
\fBzones\fR(5) を参照してください。
.SS "リソース制御で使用される単位"
.sp
.LP
リソース制御は、サイズ (バイト)、時間 (秒)、または数 (整数) の単位で表現できます。これらの単位は、次に指定されている文字列を使用します。
.sp
.in +2
.nf
Category             Res Ctrl      Modifier  Scale
                     Type String
-----------          -----------   --------  -----
Size                 bytes         B         1
                                   KB        2^10
                                   MB        2^20
                                   GB        2^30
                                   TB        2^40
                                   PB        2^50
                                   EB        2^60

Time                 seconds       s         1
                                   Ks        10^3
                                   Ms        10^6
                                   Gs        10^9
                                   Ts        10^12
                                   Ps        10^15
                                   Es        10^18

Count                integer       none      1
                                   K         10^3
                                   M         10^6
                                   G         10^9
                                   T         10^12
                                   P         10^15
                                   Es        10^18
.fi
.in -2

.sp
.LP
リソース制御に倍率値を使用できます。次の例は、倍率付きのしきい値を示します。
.sp
.in +2
.nf
task.max-lwps=(priv,1K,deny)
.fi
.in -2

.sp
.LP
\fBproject\fR ファイルでは、\fB1K\fR の値が \fB1000\fR に展開されます:
.sp
.in +2
.nf
task.max-lwps=(priv,1000,deny)
.fi
.in -2

.sp
.LP
2 番目の例では、より大きな倍率値が使用されています:
.sp
.in +2
.nf
process.max-file-size=(priv,5G,deny)
.fi
.in -2

.sp
.LP
\fBproject\fR ファイルでは、\fB5G\fR の値が \fB5368709120\fR に展開されます:
.sp
.in +2
.nf
process.max-file-size=(priv,5368709120,deny)
.fi
.in -2

.sp
.LP
前の例では、上の表で指定されている倍率が使用されています。
.sp
.LP
単位修飾子 (たとえば、\fB5G\fR) が \fBprctl\fR(1)、\fBprojadd\fR(1M)、および \fBprojmod\fR(1M) コマンドで受け入れられています。プロジェクトデータベース自体で単位修飾子を使用することはできません。
.SS "リソース制御値と特権レベル"
.sp
.LP
リソース制御に対するしきい値によって、ローカルアクションをトリガーできるか、または (ロギングなどの) グローバルアクションを実行できる時点が構成されます。
.sp
.LP
リソース制御に対する各しきい値は、特権レベルに関連付けられている必要があります。特権レベルは、次の 3 つの種類のいずれかである必要があります:
.sp
.ne 2
.mk
.na
\fB\fBbasic\fR\fR
.ad
.sp .6
.RS 4n
呼び出し元プロセスの所有者が変更できます。
.RE

.sp
.ne 2
.mk
.na
\fB\fBprivileged\fR\fR
.ad
.sp .6
.RS 4n
現在のプロセス (\fBsys_resource\fR 特権が必要) または \fBprctl\fR(1) (\fBproc_owner\fR 特権が必要) が変更できます。
.RE

.sp
.ne 2
.mk
.na
\fB\fBsystem\fR\fR
.ad
.sp .6
.RS 4n
オペレーティングシステムインスタンスの期間中は固定されます。
.RE

.sp
.LP
リソース制御は、システムまたはリソースプロバイダで定義された 1 つの \fBsystem\fR 値を持つことが保証されます。\fBsystem\fR 値は、オペレーティングシステムの現在の実装で提供できるリソースの量を表します。
.sp
.LP
特権値はいくつでも定義できます。基本値は 1 つだけ許可されます。特権値を指定しないで実行される操作には、デフォルトで、基本レベルの特権が割り当てられます。
.sp
.LP
リソース制御値の特権レベルは、リソース制御ブロックの特権フィールドで \fBRCTL_BASIC\fR、\fBRCTL_PRIVILEGED\fR、または \fBRCTL_SYSTEM\fR として定義されます。詳細は、\fBsetrctl\fR(2) を参照してください。\fBprctl\fR コマンドを使用すると、基本レベルおよび特権レベルに対応付けられている値を変更できます。
.sp
.LP
\fBprivileged\fR の特権レベルを指定する場合は、\fBpriv\fR の省略形を使用できます。例: 
.sp
.in +2
.nf
task.max-lwps=(priv,1K,deny)
.fi
.in -2

.SS "リソース制御値に対応付けられた大域アクションと局所アクション"
.sp
.LP
リソース制御値に関するアクションには、グローバルとローカルの 2 つのカテゴリがあります。
.sp
.LP
グローバルアクションは、システム上のすべてのリソース制御のリソース制御値に適用されます。\fBrctladm\fR(1M) を使用して次のアクションを実行できます。
.RS +4
.TP
.ie t \(bu
.el o
アクティブなシステムリソース制御のグローバルな状態を表示します。
.RE
.RS +4
.TP
.ie t \(bu
.el o
大域ログ作成アクションを設定します。
.RE
.sp
.LP
リソース制御に対応付けられた大域ログ作成アクションは、無効にしたり有効にしたりできます。\fBsyslog\fR アクションの程度を設定するには、重要度を \fBsyslog=\fR\fIlevel\fR のように割り当てます。\fIlevel\fR に設定できる値は次のとおりです。
.RS +4
.TP
.ie t \(bu
.el o
\fBdebug\fR
.RE
.RS +4
.TP
.ie t \(bu
.el o
\fBinfo\fR
.RE
.RS +4
.TP
.ie t \(bu
.el o
\fBnotice\fR
.RE
.RS +4
.TP
.ie t \(bu
.el o
\fBwarning\fR
.RE
.RS +4
.TP
.ie t \(bu
.el o
\fBerr\fR
.RE
.RS +4
.TP
.ie t \(bu
.el o
\fBcrit\fR
.RE
.RS +4
.TP
.ie t \(bu
.el o
\fBalert\fR
.RE
.RS +4
.TP
.ie t \(bu
.el o
\fBemerg\fR
.RE
.sp
.LP
デフォルトでは、リソース制御の違反は大域ログ作成では記録されません。
.sp
.LP
ローカルアクションは、制御値を超えようとしているプロセスに対して実行されます。リソース制御に設定された各しきい値に対して、1 つ以上のアクションを対応付けることができます。局所アクションには、3 つの種類があります。 \fBnone\fR、\fBdeny\fR、および \fBsignal=\fR です。これら 3 つのアクションは、次のように使用されます。
.sp
.ne 2
.mk
.na
\fB\fBnone\fR\fR
.ad
.sp .6
.RS 4n
しきい値を超える量のリソース要求に対して、何のアクションも行いません。このアクションは、アプリケーションの進行に影響を与えることなく、リソースの使用状況を監視するのに役立ちます。また、リソース制御を超えたにもかかわらず、同時に、しきい値を超えたプロセスが影響を受けていないときに表示されるグローバルメッセージを有効にすることもできます。
.RE

.sp
.ne 2
.mk
.na
\fB\fBdeny\fR\fR
.ad
.sp .6
.RS 4n
しきい値を超える量のリソース要求を拒否できます。たとえば、\fBtask.max-lwps\fR リソース制御に拒否アクションが指定されている場合、新しいプロセスが制御値を超えると \fBfork()\fR システムコールは失敗します。\fBfork\fR(2) を参照してください。
.RE

.sp
.ne 2
.mk
.na
\fB\fBsignal=\fR\fR
.ad
.sp .6
.RS 4n
リソース制御値を超えたときに大域シグナルメッセージを送信するアクションを有効にすることができます。プロセスがしきい値を超えると、プロセスにシグナルが送信されます。プロセスがさらにリソースを消費しても、追加のシグナルが送信されることはありません。使用可能なシグナルを次に一覧表示します。
.RE

.sp
.LP
すべてのリソース制御にすべてのアクションを適用できるわけではありません。たとえば、プロセスは、その所属先のプロジェクトに割り当てられている CPU 配分を超えることはできません。したがって、\fBproject.cpu-shares\fR リソース制御に deny アクションを適用することはできません。
.sp
.LP
実装上の制限により、しきい値に設定できるアクションは、各制御の大域プロパティーによって制限されます。(\fBrctladm\fR(1M) を参照。)使用可能なシグナルアクションの一覧を次のリストに示します。シグナルについての詳細は、\fBsignal\fR(3HEAD) を参照してください。
.sp
.LP
リソース制御値に使用可能なシグナルを次に示します:
.sp
.ne 2
.mk
.na
\fB\fBSIGABRT\fR\fR
.ad
.sp .6
.RS 4n
プロセスを終了します。
.RE

.sp
.ne 2
.mk
.na
\fB\fBSIGHUP\fR\fR
.ad
.sp .6
.RS 4n
ハングアップシグナルを送信します。開いた回線上でキャリアが検出されなくなったときに発生します。シグナルは、端末を制御しているプロセスグループに送信されます。
.RE

.sp
.ne 2
.mk
.na
\fB\fBSIGTERM\fR\fR
.ad
.sp .6
.RS 4n
プロセスを終了します。ソフトウェアによって送信される終了シグナルです。
.RE

.sp
.ne 2
.mk
.na
\fB\fBSIGKILL\fR\fR
.ad
.sp .6
.RS 4n
プロセスを終了し、プログラムを強制終了します。
.RE

.sp
.ne 2
.mk
.na
\fB\fBSIGSTOP\fR\fR
.ad
.sp .6
.RS 4n
プロセスを停止します。ジョブ制御シグナル。
.RE

.sp
.ne 2
.mk
.na
\fB\fBSIGXRES\fR\fR
.ad
.sp .6
.RS 4n
リソース制御の制限超過です。リソース制御機能によって生成されます。
.RE

.sp
.ne 2
.mk
.na
\fB\fBSIGXFSZ\fR\fR
.ad
.sp .6
.RS 4n
プロセスを終了します。ファイルサイズの制限超過です。\fBRCTL_GLOBAL_FILE_SIZE\fR プロパティー (\fBprocess.max-file-size\fR) を持つリソース制御でのみ使用できます。\fBrctlblk_set_value\fR(3C) を参照してください。
.RE

.sp
.ne 2
.mk
.na
\fB\fBSIGXCPU\fR\fR
.ad
.sp .6
.RS 4n
プロセスを終了します。CPU 時間の制限超過です。\fBRCTL_GLOBAL_CPUTIME\fR プロパティー (\fBprocess.max-cpu-time\fR) を持つリソース制御でのみ使用できます。\fBrctlblk_set_value\fR(3C) を参照してください。
.RE

.SS "リソース制御のフラグとプロパティー"
.sp
.LP
システム上のリソース制御には、それぞれ特定のプロパティーセットが対応付けられています。このプロパティーセットは、一連のフラグとして定義されます。これらのフラグは、そのリソースが制御されているすべてのインスタンスに対応付けられます。大域フラグは変更できませんが、\fBrctladm\fR(1M) または \fBsetrctl\fR(2) システムコールを使用するとフラグを取得できます。
.sp
.LP
ローカルフラグは、特定のプロセスまたはプロセス集合に対するリソース制御の特定のしきい値について、デフォルトの動作と構成を定義します。あるしきい値のローカルフラグが、同じリソース制御で定義されている別のしきい値の動作に影響することはありません。ただし、大域フラグは、特定の制御に対応付けられているすべての値の動作に影響します。ローカルフラグは、\fBprctl\fR コマンドまたは \fBsetrctl\fR システムコールを使用すると、対応する各大域フラグで指定された制約内で変更できます。\fBsetrctl\fR(2) を参照してください。
.sp
.LP
ローカルフラグ、大域フラグ、およびそれらの定義の詳細な一覧については、\fBrctlblk_set_value\fR(3C) を参照してください。
.sp
.LP
特定のリソース制御がしきい値に達したときのシステムの動作を確認するには、\fBrctladm\fR を使ってそのリソース制御の大域フラグを表示します。たとえば、\fBprocess.max-cpu-time\fR の値を表示するには、次を入力します:
.sp
.in +2
.nf
$ rctladm process.max-cpu-time
process.max-cpu-time  syslog=off [ lowerable no-deny cpu-time inf seconds ]
.fi
.in -2

.sp
.LP
大域フラグは次を示します:
.sp
.ne 2
.mk
.na
\fB\fBlowerable\fR\fR
.ad
.sp .6
.RS 4n
この制御の特権値を下げるのに、スーパーユーザー特権を必要としません。
.RE

.sp
.ne 2
.mk
.na
\fB\fBno-deny\fR\fR
.ad
.sp .6
.RS 4n
しきい値を超えても、リソースへのアクセスは拒否されません。
.RE

.sp
.ne 2
.mk
.na
\fB\fBcpu-time\fR\fR
.ad
.sp .6
.RS 4n
このリソースのしきい値に達したら、\fBSIGXCPU\fR を送信できます。
.RE

.sp
.ne 2
.mk
.na
\fB\fBseconds\fR\fR
.ad
.sp .6
.RS 4n
リソース制御の時間。
.RE

.sp
.LP
リソース制御のローカル値とアクションを表示するには、\fBprctl\fR コマンドを使用します。例: 
.sp
.in +2
.nf
$ prctl -n process.max-cpu-time $$
    process 353939: -ksh
    NAME    PRIVILEGE    VALUE    FLAG   ACTION              RECIPIENT
 process.max-cpu-time
         privileged   18.4Es    inf   signal=XCPU                 -
         system       18.4Es    inf   none
.fi
.in -2

.sp
.LP
両方のしきい値に対して \fBmax\fR (\fBRCTL_LOCAL_MAXIMAL\fR) フラグが設定され、このリソース制御に対して \fBinf\fR (\fBRCTL_GLOBAL_INFINITE\fR) フラグが定義されています。\fBinf\fR の値は無限大です。この値は制限を与えません。したがって、構成されているように、両方のしきい値は無限大値を意味し、これらの値を上回ることはありません。
.SS "リソース制御の適用"
.sp
.LP
1 つのリソースには、複数のリソース制御を設定できます。リソース制御は、プロセスモデルの包含レベルごとに 1 つずつ設定できます。同じリソース上の異なるコンテナレベルでリソース制御がアクティブな場合、まず、もっとも小さいコンテナの制御が実行されます。このため、両方の制御が同時に検出された場合は、\fBtask.max-cpu-time\fR の前に \fBprocess.max-cpu-time\fR に対するアクションが実行されます。
.SH 属性
.sp
.LP
次の属性については、\fBattributes\fR(5) を参照してください。
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i) 
lw(2.75i) |lw(2.75i) 
.
属性タイプ属性値
_
インタフェースの安定性確実
.TE

.SH 関連項目
.sp
.LP
\fBprctl\fR(1), \fBpooladm\fR(1M), \fBpoolcfg\fR(1M), \fBprojadd\fR(1M), \fBprojmod\fR(1M), \fBrctladm\fR(1M), \fBsetrctl\fR(2), \fBrctlblk_set_value\fR(3C), \fBlibpool\fR(3LIB), \fBproject\fR(4), \fBattributes\fR(5), \fBFSS\fR(7), \fBlofi\fR(7D), \fBmemcntl\fR(2)
.sp
.LP
\fI『Administering Resource Management in Oracle         Solaris 11.3』\fR
