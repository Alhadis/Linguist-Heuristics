'\" te
.\" Copyright (c) 2014, Oracle and/or its affiliates. All rights             reserved.
.TH ddi_cb_get_flags 9F "26 Aug 2014" "SunOS 5.11" "Kernel Functions for Drivers"
.SH NAME
ddi_cb_get_flags, ddi_cb_add_flags, ddi_cb_remove_flags \- edit flags of a registered device driver callback handler
.SH SYNOPSIS
.LP
.nf
#include <sys/sunddi.h>
\fBint\fR \fBddi_cb_get_flags\fR(\fBddi_cb_handle_t\fR \fIhdl\fR, \fBddi_cb_flags_t *\fR\fIflagsp\fR);
\fBint\fR \fBddi_cb_add_flags\fR(\fBddi_cb_handle_t\fR \fIhdl\fR, \fBddi_cb_flags_t\fR \fIflags\fR);
\fBint\fR \fBddi_cb_remove_flags\fR(\fBddi_cb_handle_t\fR \fIhdl\fR, \fBddi_cb_flags_t\fR \fIflags\fR);
.fi

.SH PARAMETERS
.sp
.LP
\fBddi_cb_get_flags()\fR
.sp
.ne 2
.mk
.na
\fB\fIhdl\fR\fR
.ad
.RS 10n
.rt  
Handle to the registered callback handler.
.RE

.sp
.ne 2
.mk
.na
\fB\fIflagsp\fR\fR
.ad
.RS 10n
.rt  
Pointer to return the current flags settings.
.RE

.sp
.LP
\fBddi_cb_add_flags()\fR
.sp
.ne 2
.mk
.na
\fB\fIhdl\fR\fR
.ad
.RS 9n
.rt  
Handle to the registered callback handler.
.RE

.sp
.ne 2
.mk
.na
\fB\fIflags\fR\fR
.ad
.RS 9n
.rt  
Flags to determine the callback events to add.
.RE

.sp
.LP
\fBddi_cb_remove_flags()\fR
.sp
.ne 2
.mk
.na
\fB\fIhdl\fR\fR
.ad
.RS 9n
.rt  
Handle to the registered callback handler.
.RE

.sp
.ne 2
.mk
.na
\fB\fIflags\fR\fR
.ad
.RS 9n
.rt  
Flags to determine the callback events to remove.
.RE

.SH INTERFACE LEVEL
.sp
.LP
Solaris DDI specific (Solaris DDI).
.SH DESCRIPTION
.sp
.LP
The functions \fBddi_cb_get_flags()\fR, \fBddi_cb_add_flags()\fR, and \fBddi_cb_remove_flags()\fR provide a driver with the option to selectively enable or disable support for specific types of callback actions for a registered callback handler.
.sp
.LP
The functions \fBddi_cb_register()\fR and \fBddi_cb_unregister()\fR can be used by a device driver to register and unregister a callback handler. During registration, a device driver specifies a set of flags indicating what callback actions it can process. After registration, the device driver may then receive any actions related to the specified flags.
.sp
.LP
If a device driver expects to process multiple types of callback actions, it might be difficult during \fBattach\fR(9E) to enable support for all callback actions simultaneously using the function \fBddi_cb_register()\fR. In such cases, the device driver may register a callback handler with fewer flags specified (possibly even no flags), and then use the function \fBddi_cb_add_flags()\fR to incrementally enable support for callback actions with more granularity during \fBattach\fR(9E). Likewise, the function \fBddi_cb_remove_flags()\fR allows a device driver to incrementally teardown callback support during \fBdetach\fR(9E).
.sp
.LP
The function \fBddi_cb_unregister()\fR will unregister a device driver callback handler and disable all callback actions. There is no need to first remove flags using the function \fBddi_cb_remove_flags()\fR before unregistering.
.sp
.LP
The flags parameter consists of the following:
.sp
.ne 2
.mk
.na
\fB\fBDDI_CB_FLAG_INTR\fR\fR
.ad
.RS 21n
.rt  
The device driver participates in interrupt resource management. When this flag is set, the device driver may receive callback actions related to changes in interrupt availability. 
.RE

.sp
.ne 2
.mk
.na
\fB\fBDDI_CB_FLAG_SRIOV\fR\fR
.ad
.RS 21n
.rt  
Indicates to the DDI framework that the device driver is IOV capable. When this flag is set, the device driver may receive callback actions related to configuring or unconfiguring IOV virtual functions.
.RE

.sp
.ne 2
.mk
.na
\fB\fBDDI_CB_FLAG_COMM\fR\fR
.ad
.RS 21n
.rt  
The device driver uses the \fBpciv_send\fR(9F) interfaces for inter- domain and intra-domain communication. When this flag is set, device drivers may receive callback actions notifying them about incoming data.
.RE

.sp
.ne 2
.mk
.na
\fB\fBDDI_CB_FLAG_LSR\fR\fR
.ad
.RS 21n
.rt  
The device driver supports Live Suspend and Resume (LSR) operations. When this flag is set, a device driver may receive callback actions that describe the circumstances of I/O suspend and resume operations.
.RE

.SH RETURN VALUES
.sp
.LP
The functions \fBddi_cb_get_flags()\fR, \fBddi_cb_add_flags()\fR, and \fBddi_cb_remove_flags()\fR return:
.sp
.ne 2
.mk
.na
\fB\fBDDI_SUCCESS\fR\fR
.ad
.RS 15n
.rt  
On success.
.RE

.sp
.ne 2
.mk
.na
\fB\fBDDI_EINVAL\fR\fR
.ad
.RS 15n
.rt  
An invalid parameter was given. The callback handle was invalid or unregistered, the \fIflagsp\fR parameter for \fBddi_cb_get_flags()\fR is invalid, or an invalid \fIflags\fR parameter was specified.
.RE

.SH CONTEXT
.sp
.LP
These functions can be called from kernel, non-interrupt context.
.SH ATTRIBUTES
.sp
.LP
See \fBattributes\fR(5) for descriptions of the following attributes:
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i) 
lw(2.75i) |lw(2.75i) 
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
Interface StabilityUncommitted
_
MT-LevelUnsafe
.TE

.SH SEE ALSO
.sp
.LP
\fBattributes\fR(5), \fBddi_cb_register\fR(9F)
