# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: ignore
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/actionpack/all/actionpack.rbi
#
# actionpack-2.3.18
module ActionController
  def self.load_all!; end
end
module ActionController::CgiExt
end
module ActionController::CgiExt::Stdinput
  def initialize_with_stdinput(type = nil, stdinput = nil); end
  def self.included(base); end
end
class CGI
  def initialize_without_stdinput(options = nil, &block); end
  def self.escapeHTML(string); end
  def self.escapeHTML_fail_on_nil(arg0); end
  def stdinput=(arg0); end
  include ActionController::CgiExt::Stdinput
end
module CGI::QueryExtension
end
class CGI::Cookie < Anonymous_Delegator_3
  def domain; end
  def domain=(arg0); end
  def expires; end
  def expires=(arg0); end
  def http_only; end
  def http_only=(val); end
  def initialize(name = nil, *value); end
  def name; end
  def name=(arg0); end
  def path; end
  def path=(arg0); end
  def respond_to?(method, include_private = nil); end
  def secure; end
  def secure=(val); end
  def self.parse(raw_cookie); end
  def to_s; end
  def value; end
  def value=(arg0); end
end
module ActionView
  def self.load_all!; end
end
module ActionController::Assertions
end
module ActionController::Http
end
module ActionController::Session
end
module ActionController::StatusCodes
  def interpret_status(status); end
end
module ActionView::Helpers
  def self.included(base); end
  include ActionView::Helpers::ActiveRecordHelper
  include ActionView::Helpers::AssetTagHelper
  include ActionView::Helpers::AtomFeedHelper
  include ActionView::Helpers::BenchmarkHelper
  include ActionView::Helpers::CacheHelper
  include ActionView::Helpers::CaptureHelper
  include ActionView::Helpers::CsrfHelper
  include ActionView::Helpers::DateHelper
  include ActionView::Helpers::DebugHelper
  include ActionView::Helpers::FormHelper
  include ActionView::Helpers::FormOptionsHelper
  include ActionView::Helpers::FormTagHelper
  include ActionView::Helpers::JavaScriptHelper
  include ActionView::Helpers::NumberHelper
  include ActionView::Helpers::PrototypeHelper
  include ActionView::Helpers::RawOutputHelper
  include ActionView::Helpers::RecordIdentificationHelper
  include ActionView::Helpers::RecordTagHelper
  include ActionView::Helpers::SanitizeHelper
  include ActionView::Helpers::ScriptaculousHelper
  include ActionView::Helpers::TagHelper
  include ActionView::Helpers::TextHelper
  include ActionView::Helpers::TranslationHelper
  include ActionView::Helpers::UrlHelper
end
module ActionView::Helpers::TagHelper
  def block_called_from_erb?(block); end
  def cdata_section(content); end
  def content_tag(name, content_or_options_with_block = nil, options = nil, escape = nil, &block); end
  def content_tag_string(name, content, options, escape = nil); end
  def escape_once(html); end
  def tag(name, options = nil, open = nil, escape = nil); end
  def tag_options(options, escape = nil); end
  include ERB::Util
end
module ActionView::Helpers::SanitizeHelper
  def sanitize(html, options = nil); end
  def sanitize_css(style); end
  def strip_links(html); end
  def strip_tags(html); end
end
module ActionView::Helpers::SanitizeHelper::ClassMethods
  def full_sanitizer; end
  def full_sanitizer=(arg0); end
  def link_sanitizer; end
  def link_sanitizer=(arg0); end
  def sanitized_allowed_attributes; end
  def sanitized_allowed_attributes=(attributes); end
  def sanitized_allowed_css_keywords; end
  def sanitized_allowed_css_keywords=(attributes); end
  def sanitized_allowed_css_properties; end
  def sanitized_allowed_css_properties=(attributes); end
  def sanitized_allowed_protocols; end
  def sanitized_allowed_protocols=(attributes); end
  def sanitized_allowed_tags; end
  def sanitized_allowed_tags=(attributes); end
  def sanitized_bad_tags; end
  def sanitized_bad_tags=(attributes); end
  def sanitized_protocol_separator; end
  def sanitized_protocol_separator=(value); end
  def sanitized_shorthand_css_properties; end
  def sanitized_shorthand_css_properties=(attributes); end
  def sanitized_uri_attributes; end
  def sanitized_uri_attributes=(attributes); end
  def white_list_sanitizer; end
  def white_list_sanitizer=(arg0); end
end
module ActionView::Helpers::DateHelper
  def date_select(object_name, method, options = nil, html_options = nil); end
  def datetime_select(object_name, method, options = nil, html_options = nil); end
  def distance_of_time_in_words(from_time, to_time = nil, include_seconds = nil, options = nil); end
  def distance_of_time_in_words_to_now(from_time, include_seconds = nil); end
  def select_date(date = nil, options = nil, html_options = nil); end
  def select_datetime(datetime = nil, options = nil, html_options = nil); end
  def select_day(date, options = nil, html_options = nil); end
  def select_hour(datetime, options = nil, html_options = nil); end
  def select_minute(datetime, options = nil, html_options = nil); end
  def select_month(date, options = nil, html_options = nil); end
  def select_second(datetime, options = nil, html_options = nil); end
  def select_time(datetime = nil, options = nil, html_options = nil); end
  def select_year(date, options = nil, html_options = nil); end
  def time_ago_in_words(from_time, include_seconds = nil); end
  def time_select(object_name, method, options = nil, html_options = nil); end
end
class ActionView::Helpers::DateTimeSelector
  def _unmemoized_date_order; end
  def _unmemoized_month_names; end
  def build_hidden(type, value); end
  def build_options(selected, options = nil); end
  def build_options_and_select(type, selected, options = nil); end
  def build_select(type, select_options_as_html); end
  def build_selects_from_types(order); end
  def date_order(reload = nil); end
  def day; end
  def freeze; end
  def freeze_without_memoizable; end
  def hour; end
  def initialize(datetime, options = nil, html_options = nil); end
  def input_id_from_type(type); end
  def input_name_from_type(type); end
  def min; end
  def month; end
  def month_name(number); end
  def month_names(reload = nil); end
  def prompt_option_tag(type, options); end
  def sec; end
  def select_date; end
  def select_datetime; end
  def select_day; end
  def select_hour; end
  def select_minute; end
  def select_month; end
  def select_second; end
  def select_time; end
  def select_year; end
  def separator(type); end
  def translated_date_order; end
  def translated_month_names; end
  def year; end
  extend ActiveSupport::Memoizable
  include ActionView::Helpers::TagHelper
  include ActiveSupport::Memoizable::InstanceMethods
  include ActiveSupport::Memoizable::InstanceMethods
end
class ActionView::Helpers::InstanceTag
  def add_default_name_and_id(options); end
  def add_default_name_and_id_for_value(tag_value, options); end
  def add_options(option_tags, options, value = nil); end
  def column_type; end
  def content_tag(name, value, options); end
  def content_tag_without_error_wrapping(name, content_or_options_with_block = nil, options = nil, escape = nil, &block); end
  def datetime_selector(options, html_options); end
  def default_datetime(options); end
  def error_message; end
  def error_wrapping(html_tag, has_error); end
  def initialize(object_name, method_name, template_object, object = nil); end
  def method_name; end
  def object; end
  def object_name; end
  def sanitized_method_name; end
  def sanitized_object_name; end
  def self.check_box_checked?(value, checked_value); end
  def self.radio_button_checked?(value, checked_value); end
  def self.value(object, method_name); end
  def self.value_before_type_cast(object, method_name); end
  def tag(name, options); end
  def tag_id; end
  def tag_id_with_index(index); end
  def tag_name; end
  def tag_name_with_index(index); end
  def tag_without_error_wrapping(name, options = nil, open = nil, escape = nil); end
  def to_boolean_select_tag(options = nil); end
  def to_check_box_tag(options = nil, checked_value = nil, unchecked_value = nil); end
  def to_collection_select_tag(collection, value_method, text_method, options, html_options); end
  def to_content_tag(tag_name, options = nil); end
  def to_date_select_tag(options = nil, html_options = nil); end
  def to_date_select_tag_without_error_wrapping(options = nil, html_options = nil); end
  def to_datetime_select_tag(options = nil, html_options = nil); end
  def to_datetime_select_tag_without_error_wrapping(options = nil, html_options = nil); end
  def to_grouped_collection_select_tag(collection, group_method, group_label_method, option_key_method, option_value_method, options, html_options); end
  def to_input_field_tag(field_type, options = nil); end
  def to_label_tag(text = nil, options = nil); end
  def to_radio_button_tag(tag_value, options = nil); end
  def to_select_tag(choices, options, html_options); end
  def to_tag(options = nil); end
  def to_text_area_tag(options = nil); end
  def to_time_select_tag(options = nil, html_options = nil); end
  def to_time_select_tag_without_error_wrapping(options = nil, html_options = nil); end
  def to_time_zone_select_tag(priority_zones, options, html_options); end
  def value(object); end
  def value_before_type_cast(object); end
  include ActionView::Helpers::FormOptionsHelper
  include ActionView::Helpers::TagHelper
end
class ActionView::Helpers::FormBuilder
  def apply_form_for_options!(method, options = nil); end
  def check_box(method, options = nil, checked_value = nil, unchecked_value = nil); end
  def collection_select(method, collection, value_method, text_method, options = nil, html_options = nil); end
  def date_select(method, options = nil, html_options = nil); end
  def datetime_select(method, options = nil, html_options = nil); end
  def emitted_hidden_id?; end
  def error_message_on(method, *args); end
  def error_messages(options = nil); end
  def field_helpers; end
  def field_helpers=(obj); end
  def fields_for(record_or_name_or_array, *args, &block); end
  def fields_for_nested_model(name, object, args, block); end
  def fields_for_with_nested_attributes(association_name, args, block); end
  def file_field(method, options = nil); end
  def form_for(method, options = nil); end
  def grouped_collection_select(method, collection, group_method, group_label_method, option_key_method, option_value_method, options = nil, html_options = nil); end
  def hidden_field(method, options = nil); end
  def initialize(object_name, object, template, options, proc); end
  def label(method, text = nil, options = nil); end
  def nested_attributes_association?(association_name); end
  def nested_child_index(name); end
  def object; end
  def object=(arg0); end
  def object_name; end
  def object_name=(arg0); end
  def objectify_options(options); end
  def options; end
  def options=(arg0); end
  def password_field(method, options = nil); end
  def radio_button(method, tag_value, options = nil); end
  def select(method, choices, options = nil, html_options = nil); end
  def self.field_helpers; end
  def self.field_helpers=(obj); end
  def submit(value = nil, options = nil); end
  def text_area(method, options = nil); end
  def text_field(method, options = nil); end
  def time_select(method, options = nil, html_options = nil); end
  def time_zone_select(method, priority_zones = nil, options = nil, html_options = nil); end
end
module ActionView::Helpers::FormTagHelper
  def check_box_tag(name, value = nil, checked = nil, options = nil); end
  def extra_tags_for_form(html_options); end
  def field_set_tag(legend = nil, options = nil, &block); end
  def file_field_tag(name, options = nil); end
  def form_tag(url_for_options = nil, options = nil, *parameters_for_url, &block); end
  def form_tag_html(html_options); end
  def form_tag_in_block(html_options, &block); end
  def hidden_field_tag(name, value = nil, options = nil); end
  def html_options_for_form(url_for_options, options, *parameters_for_url); end
  def image_submit_tag(source, options = nil); end
  def label_tag(name, text = nil, options = nil); end
  def password_field_tag(name = nil, value = nil, options = nil); end
  def radio_button_tag(name, value, checked = nil, options = nil); end
  def sanitize_to_id(name); end
  def select_tag(name, option_tags = nil, options = nil); end
  def submit_tag(value = nil, options = nil); end
  def text_area_tag(name, content = nil, options = nil); end
  def text_field_tag(name, value = nil, options = nil); end
  def token_tag; end
end
module ActionView::Helpers::FormHelper
  def apply_form_for_options!(object_or_array, options); end
  def check_box(object_name, method, options = nil, checked_value = nil, unchecked_value = nil); end
  def fields_for(record_or_name_or_array, *args, &block); end
  def file_field(object_name, method, options = nil); end
  def form_for(record_or_name_or_array, *args, &proc); end
  def hidden_field(object_name, method, options = nil); end
  def label(object_name, method, text = nil, options = nil); end
  def password_field(object_name, method, options = nil); end
  def radio_button(object_name, method, tag_value, options = nil); end
  def text_area(object_name, method, options = nil); end
  def text_field(object_name, method, options = nil); end
end
class ActionView::Base
  def _copy_ivars_from_controller; end
  def _evaluate_assigns_and_ivars; end
  def _render_with_layout(options, local_assigns, &block); end
  def _set_controller_content_type(content_type); end
  def action_name(*args, &block); end
  def assigns; end
  def assigns=(arg0); end
  def base_path; end
  def base_path=(arg0); end
  def cache_template_loading; end
  def cache_template_loading=(obj); end
  def controller; end
  def controller=(arg0); end
  def controller_name(*args, &block); end
  def cookies(*args, &block); end
  def debug_rjs; end
  def debug_rjs=(obj); end
  def default_form_builder; end
  def default_form_builder=(obj); end
  def field_error_proc; end
  def field_error_proc=(obj); end
  def flash(*args, &block); end
  def headers(*args, &block); end
  def helpers; end
  def initialize(view_paths = nil, assigns_for_first_render = nil, controller = nil); end
  def logger(*args, &block); end
  def output_buffer; end
  def output_buffer=(arg0); end
  def params(*args, &block); end
  def render(options = nil, local_assigns = nil, &block); end
  def request; end
  def request=(v); end
  def request_forgery_protection_token(*args, &block); end
  def response(*args, &block); end
  def self.cache_template_loading; end
  def self.cache_template_loading=(obj); end
  def self.cache_template_loading?; end
  def self.debug_rjs; end
  def self.debug_rjs=(obj); end
  def self.default_form_builder; end
  def self.default_form_builder=(obj); end
  def self.erb_trim_mode=(*args, &block); end
  def self.field_error_proc; end
  def self.field_error_proc=(obj); end
  def self.logger(*args, &block); end
  def self.process_view_paths(value); end
  def self.xss_safe?; end
  def session(*args, &block); end
  def template; end
  def template=(template); end
  def template_extension; end
  def template_extension=(arg0); end
  def template_format; end
  def template_format=(arg0); end
  def view_paths; end
  def view_paths=(paths); end
  def with_template(current_template); end
  extend ActionView::Helpers::ClassMethods
  extend ActiveSupport::Memoizable
  include ActionView::Base::CompiledTemplates
  include ActionView::Helpers
end
module ActionView::Helpers::ActiveRecordHelper
  def all_input_tags(record, record_name, options); end
  def default_input_block; end
  def error_message_on(object, method, *args); end
  def error_messages_for(*params); end
  def form(record_name, options = nil); end
  def input(record_name, method, options = nil); end
end
module ActionView::Helpers::PrototypeHelper
  def build_callbacks(options); end
  def build_observer(klass, name, options = nil); end
  def button_to_remote(name, options = nil, html_options = nil); end
  def evaluate_remote_response; end
  def form_remote_for(record_or_name_or_array, *args, &proc); end
  def form_remote_tag(options = nil, &block); end
  def link_to_remote(name, options = nil, html_options = nil); end
  def method_option_to_s(method); end
  def observe_field(field_id, options = nil); end
  def observe_form(form_id, options = nil); end
  def options_for_ajax(options); end
  def periodically_call_remote(options = nil); end
  def remote_form_for(record_or_name_or_array, *args, &proc); end
  def remote_function(options); end
  def submit_to_remote(name, value, options = nil); end
  def update_page(&block); end
  def update_page_tag(html_options = nil, &block); end
end
class ActionView::Helpers::PrototypeHelper::JavaScriptGenerator
  def include_helpers_from_context; end
  def initialize(context, &block); end
end
module ActionView::Helpers::PrototypeHelper::JavaScriptGenerator::GeneratorMethods
  def <<(javascript); end
  def [](id); end
  def alert(message); end
  def arguments_for_call(arguments, block = nil); end
  def assign(variable, value); end
  def block_to_function(block); end
  def call(function, *arguments, &block); end
  def delay(seconds = nil); end
  def draggable(id, options = nil); end
  def drop_receiving(id, options = nil); end
  def hide(*ids); end
  def insert_html(position, id, *options_for_render); end
  def javascript_object_for(object); end
  def literal(code); end
  def loop_on_multiple_args(method, ids); end
  def method_missing(method, *arguments); end
  def page; end
  def record(line); end
  def redirect_to(location); end
  def reload; end
  def remove(*ids); end
  def render(*options_for_render); end
  def replace(id, *options_for_render); end
  def replace_html(id, *options_for_render); end
  def select(pattern); end
  def show(*ids); end
  def sortable(id, options = nil); end
  def to_s; end
  def toggle(*ids); end
  def visual_effect(name, id = nil, options = nil); end
end
class ActionView::Helpers::JavaScriptProxy < ActiveSupport::BasicObject
  def append_to_function_chain!(call); end
  def assign(variable, value); end
  def call(function, *arguments, &block); end
  def function_chain; end
  def initialize(generator, root = nil); end
  def method_missing(method, *arguments, &block); end
end
class ActionView::Helpers::JavaScriptElementProxy < ActionView::Helpers::JavaScriptProxy
  def [](attribute); end
  def []=(variable, value); end
  def initialize(generator, id); end
  def reload(options_for_replace = nil); end
  def replace(*options_for_render); end
  def replace_html(*options_for_render); end
end
class ActionView::Helpers::JavaScriptVariableProxy < ActionView::Helpers::JavaScriptProxy
  def append_to_function_chain!(call); end
  def initialize(generator, variable); end
  def respond_to?(method); end
  def to_json(options = nil); end
end
class ActionView::Helpers::JavaScriptCollectionProxy < ActionView::Helpers::JavaScriptProxy
  def add_return_statement!; end
  def add_variable_assignment!(variable); end
  def append_enumerable_function!(call); end
  def arguments_for_call(*args, &block); end
  def each_slice(variable, number, &block); end
  def enumerate(enumerable, options = nil, &block); end
  def generator; end
  def grep(variable, pattern, &block); end
  def in_groups_of(variable, number, fill_with = nil); end
  def initialize(generator, pattern); end
  def inject(variable, memo, &block); end
  def method_missing(method, *arguments, &block); end
  def pluck(variable, property); end
  def zip(variable, *arguments, &block); end
end
class ActionView::Helpers::JavaScriptElementCollectionProxy < ActionView::Helpers::JavaScriptCollectionProxy
  def initialize(generator, pattern); end
end
module ActionView::Helpers::JavaScriptHelper
  def array_or_string_for_javascript(option); end
  def button_to_function(name, *args, &block); end
  def escape_javascript(javascript); end
  def javascript_cdata_section(content); end
  def javascript_tag(content_or_options_with_block = nil, html_options = nil, &block); end
  def link_to_function(name, *args, &block); end
  def options_for_javascript(options); end
  include ActionView::Helpers::PrototypeHelper
end
module ActionView::Helpers::UrlHelper
  def button_to(name, options = nil, html_options = nil); end
  def confirm_javascript_function(confirm); end
  def convert_boolean_attributes!(html_options, bool_attrs); end
  def convert_options_to_javascript!(html_options, url = nil); end
  def current_page?(options); end
  def link_to(*args, &block); end
  def link_to_if(condition, name, options = nil, html_options = nil, &block); end
  def link_to_unless(condition, name, options = nil, html_options = nil, &block); end
  def link_to_unless_current(name, options = nil, html_options = nil, &block); end
  def mail_to(email_address, name = nil, html_options = nil); end
  def method_javascript_function(method, url = nil, href = nil); end
  def popup_javascript_function(popup); end
  def url_for(options = nil); end
  include ActionView::Helpers::JavaScriptHelper
end
module ActionView::Helpers::AssetTagHelper
  def asset_file_path(path); end
  def auto_discovery_link_tag(type = nil, url_options = nil, tag_options = nil); end
  def collect_asset_files(*path); end
  def compute_asset_host(source); end
  def compute_javascript_paths(*args); end
  def compute_public_path(source, dir, ext = nil, include_host = nil); end
  def compute_stylesheet_paths(*args); end
  def determine_source(source, collection); end
  def expand_javascript_sources(sources, recursive = nil); end
  def expand_stylesheet_sources(sources, recursive); end
  def image_path(source); end
  def image_tag(source, options = nil); end
  def javascript_include_tag(*sources); end
  def javascript_path(source); end
  def javascript_src_tag(source, options); end
  def join_asset_file_contents(paths); end
  def path_to_image(source); end
  def path_to_javascript(source); end
  def path_to_stylesheet(source); end
  def rails_asset_id(source); end
  def rewrite_asset_path(source); end
  def self.cache_asset_timestamps; end
  def self.cache_asset_timestamps=(value); end
  def self.register_javascript_expansion(expansions); end
  def self.register_javascript_include_default(*sources); end
  def self.register_stylesheet_expansion(expansions); end
  def self.reset_javascript_include_default; end
  def stylesheet_link_tag(*sources); end
  def stylesheet_path(source); end
  def stylesheet_tag(source, options); end
  def write_asset_file_contents(joined_asset_path, asset_paths); end
end
module ActionView::Helpers::AtomFeedHelper
  def atom_feed(options = nil, &block); end
end
class ActionView::Helpers::AtomFeedHelper::AtomBuilder
  def initialize(xml); end
  def method_missing(method, *arguments, &block); end
  def xhtml_block?(method, arguments); end
end
class ActionView::Helpers::AtomFeedHelper::AtomFeedBuilder < ActionView::Helpers::AtomFeedHelper::AtomBuilder
  def entry(record, options = nil); end
  def initialize(xml, view, feed_options = nil); end
  def updated(date_or_time = nil); end
end
module ActionView::Helpers::BenchmarkHelper
  def benchmark(message = nil, options = nil); end
end
module ActionView::Helpers::CacheHelper
  def cache(name = nil, options = nil, &block); end
end
module ActionView::Helpers::CaptureHelper
  def capture(*args, &block); end
  def content_for(name, content = nil, &block); end
  def with_output_buffer(buf = nil); end
end
module ActionView::Helpers::CsrfHelper
  def csrf_meta_tag; end
end
module ActionView::Helpers::DebugHelper
  def debug(object); end
end
module ActionView::Helpers::FormOptionsHelper
  def collection_select(object, method, collection, value_method, text_method, options = nil, html_options = nil); end
  def extract_selected_and_disabled(selected); end
  def extract_values_from_collection(collection, value_method, selected); end
  def grouped_collection_select(object, method, collection, group_method, group_label_method, option_key_method, option_value_method, options = nil, html_options = nil); end
  def grouped_options_for_select(grouped_options, selected_key = nil, prompt = nil); end
  def option_groups_from_collection_for_select(collection, group_method, group_label_method, option_key_method, option_value_method, selected_key = nil); end
  def option_text_and_value(option); end
  def option_value_selected?(value, selected); end
  def options_for_select(container, selected = nil); end
  def options_from_collection_for_select(collection, value_method, text_method, selected = nil); end
  def select(object, method, choices, options = nil, html_options = nil); end
  def time_zone_options_for_select(selected = nil, priority_zones = nil, model = nil); end
  def time_zone_select(object, method, priority_zones = nil, options = nil, html_options = nil); end
  include ERB::Util
end
module ActionView::Helpers::NumberHelper
  def number_to_currency(number, options = nil); end
  def number_to_human_size(number, *args); end
  def number_to_percentage(number, options = nil); end
  def number_to_phone(number, options = nil); end
  def number_with_delimiter(number, *args); end
  def number_with_precision(number, *args); end
end
module ActionView::Helpers::RawOutputHelper
  def raw(stringish); end
end
module ActionView::Helpers::RecordIdentificationHelper
  def dom_class(*args, &block); end
  def dom_id(*args, &block); end
  def partial_path(*args, &block); end
end
module ActionView::Helpers::RecordTagHelper
  def content_tag_for(tag_name, record, *args, &block); end
  def div_for(record, *args, &block); end
end
module ActionView::Helpers::ScriptaculousHelper
  def draggable_element(element_id, options = nil); end
  def draggable_element_js(element_id, options = nil); end
  def drop_receiving_element(element_id, options = nil); end
  def drop_receiving_element_js(element_id, options = nil); end
  def sortable_element(element_id, options = nil); end
  def sortable_element_js(element_id, options = nil); end
  def visual_effect(name, element_id = nil, js_options = nil); end
end
module ActionView::Helpers::TextHelper
  def auto_link(text, *args, &block); end
  def auto_link_email_addresses(text, html_options = nil); end
  def auto_link_urls(text, html_options = nil); end
  def auto_linked?(left, right); end
  def concat(string, unused_binding = nil); end
  def current_cycle(name = nil); end
  def cycle(first_value, *values); end
  def excerpt(text, phrase, *args); end
  def get_cycle(name); end
  def highlight(text, phrases, *args); end
  def markdown(text); end
  def pluralize(count, singular, plural = nil); end
  def reset_cycle(name = nil); end
  def set_cycle(name, cycle_object); end
  def simple_format(text, html_options = nil); end
  def textilize(text, *options); end
  def textilize_without_paragraph(text); end
  def truncate(text, *args); end
  def word_wrap(text, *args); end
end
class ActionView::Helpers::TextHelper::Cycle
  def current_value; end
  def initialize(first_value, *values); end
  def next_index; end
  def previous_index; end
  def reset; end
  def step_index(n); end
  def to_s; end
  def values; end
end
module ActionView::Helpers::TranslationHelper
  def html_safe_translation_keys(keys, translations); end
  def l(*args); end
  def localize(*args); end
  def scope_keys_by_partial(keys); end
  def t(keys, options = nil); end
  def translate(keys, options = nil); end
end
module ActionView::Helpers::ClassMethods
  include ActionView::Helpers::SanitizeHelper::ClassMethods
end
module ActionView::Partials
  def _pick_partial_template(*args); end
  def _unmemoized__pick_partial_template(partial_path); end
  def freeze; end
  def freeze_without_memoizable; end
  def render_partial(options = nil); end
  def render_partial_collection(options = nil); end
  extend ActiveSupport::Memoizable
  include ActiveSupport::Memoizable::InstanceMethods
end
class ActionView::ActionViewError < StandardError
end
class ActionView::MissingTemplate < ActionView::ActionViewError
  def initialize(paths, path, template_format = nil); end
  def path; end
end
module ActionView::Base::CompiledTemplates
end
class ActionView::Base::ProxyModule < Module
  def include(*args); end
  def initialize(receiver); end
end
class ActionView::PathSet < Array
  def <<(obj); end
  def concat(array); end
  def find_template(original_template_path, format = nil, html_fallback = nil); end
  def initialize(*args); end
  def insert(index, obj); end
  def load!; end
  def push(*objs); end
  def self.type_cast(obj); end
  def unshift(*objs); end
end
module ActionController::Filters
  def self.included(base); end
end
class ActionController::Filters::FilterChain < ActiveSupport::Callbacks::CallbackChain
  def append_filter_to_chain(filters, filter_type, &block); end
  def create_filters(filters, filter_type, &block); end
  def find_filter_append_position(filters, filter_type); end
  def find_filter_prepend_position(filters, filter_type); end
  def find_or_create_filter(filter, filter_type, options = nil); end
  def prepend_filter_to_chain(filters, filter_type, &block); end
  def skip_filter_in_chain(*filters, &test); end
  def update_filter_chain(filters, filter_type, pos, &block); end
  def update_filter_in_chain(filters, options, &test); end
end
class ActionController::Filters::Filter < ActiveSupport::Callbacks::Callback
  def after?; end
  def around?; end
  def before?; end
  def convert_only_and_except_options_to_sets_of_strings(opts); end
  def included_in_action?(controller, options); end
  def initialize(kind, method, options = nil); end
  def should_not_skip?(controller); end
  def should_run_callback?(controller); end
  def update_options!(other); end
end
class ActionController::Filters::AroundFilter < ActionController::Filters::Filter
  def around?; end
  def around_proc; end
  def call(controller, &block); end
  def filter_responds_to_before_and_after?; end
  def type; end
end
class ActionController::Filters::BeforeFilter < ActionController::Filters::Filter
  def before?; end
  def call(controller, &block); end
  def type; end
end
class ActionController::Filters::AfterFilter < ActionController::Filters::Filter
  def after?; end
  def type; end
end
module ActionController::Filters::ClassMethods
  def after_filter(*filters, &block); end
  def after_filters; end
  def append_after_filter(*filters, &block); end
  def append_around_filter(*filters, &block); end
  def append_before_filter(*filters, &block); end
  def around_filter(*filters, &block); end
  def before_filter(*filters, &block); end
  def before_filters; end
  def filter_chain; end
  def prepend_after_filter(*filters, &block); end
  def prepend_around_filter(*filters, &block); end
  def prepend_before_filter(*filters, &block); end
  def skip_after_filter(*filters); end
  def skip_before_filter(*filters); end
  def skip_filter(*filters); end
end
module ActionController::Filters::InstanceMethods
  def call_filters(chain, index, nesting); end
  def halt_filter_chain(filter, reason); end
  def perform_action_with_filters; end
  def process_with_filters(request, response, method = nil, *arguments); end
  def run_after_filters(chain, index); end
  def run_before_filters(chain, index, nesting); end
  def self.included(base); end
end
module ActionController::Layout
  def action_has_layout?; end
  def active_layout(passed_layout = nil, options = nil); end
  def candidate_for_layout?(options); end
  def default_layout; end
  def default_template_format; end
  def find_layout(layout, format, html_fallback = nil); end
  def initialize(*args); end
  def pick_layout(options); end
  def self.included(base); end
end
module ActionController::Layout::ClassMethods
  def add_layout_conditions(conditions); end
  def inherited_with_layout(child); end
  def layout(template_name, conditions = nil, auto = nil); end
  def layout_conditions; end
  def layout_list; end
  def normalize_conditions(conditions); end
end
module ActionController::Benchmarking
  def active_record_runtime; end
  def perform_action_with_benchmark; end
  def render_with_benchmark(options = nil, extra_options = nil, &block); end
  def self.included(base); end
  def view_runtime; end
end
module ActionController::Benchmarking::ClassMethods
  def benchmark(title, log_level = nil, use_silence = nil); end
  def silence; end
end
module ActionView::TemplateHandlers
  def handler_class_for_extension(extension); end
  def register_default_template_handler(extension, klass); end
  def register_template_handler(extension, klass); end
  def registered_template_handler(extension); end
  def self.extended(base); end
  def template_handler_extensions; end
end
module ActionView::TemplateHandlers::Compilable
  def compile(template); end
  def self.included(base); end
end
module ActionView::TemplateHandlers::Compilable::ClassMethods
  def call(template); end
end
class ActionView::TemplateHandler
  def initialize(view = nil); end
  def render(template, local_assigns); end
  def self.call(template); end
end
class ActionView::TemplateHandlers::ERB < ActionView::TemplateHandler
  def compile(template); end
  def erb_trim_mode; end
  def erb_trim_mode=(obj); end
  def self.erb_trim_mode; end
  def self.erb_trim_mode=(obj); end
  extend ActionView::TemplateHandlers::Compilable::ClassMethods
  include ActionView::TemplateHandlers::Compilable
end
class ActionView::TemplateHandlers::RJS < ActionView::TemplateHandler
  def compile(template); end
  extend ActionView::TemplateHandlers::Compilable::ClassMethods
  include ActionView::TemplateHandlers::Compilable
end
class ActionView::TemplateHandlers::Builder < ActionView::TemplateHandler
  def compile(template); end
  extend ActionView::TemplateHandlers::Compilable::ClassMethods
  include ActionView::TemplateHandlers::Compilable
end
module ActionView::Renderable
  def _unmemoized_handler; end
  def _unmemoized_method_name_without_locals; end
  def compile!(render_symbol, local_assigns); end
  def compile(local_assigns); end
  def compiled_source; end
  def filename; end
  def freeze; end
  def freeze_without_memoizable; end
  def handler(reload = nil); end
  def method_name(local_assigns); end
  def method_name_without_locals(reload = nil); end
  def recompile?; end
  def render(view, local_assigns = nil); end
  extend ActiveSupport::Memoizable
  include ActiveSupport::Memoizable::InstanceMethods
  include ActiveSupport::Memoizable::InstanceMethods
end
class ActionView::Template
  def _unmemoized_filename; end
  def _unmemoized_format_and_extension; end
  def _unmemoized_method_segment; end
  def _unmemoized_mime_type; end
  def _unmemoized_path; end
  def _unmemoized_path_without_extension; end
  def _unmemoized_path_without_format_and_extension; end
  def _unmemoized_relative_path; end
  def _unmemoized_source; end
  def accessible_paths; end
  def base_path; end
  def base_path=(arg0); end
  def content_type; end
  def exempt_from_layout?; end
  def extension; end
  def extension=(arg0); end
  def filename(reload = nil); end
  def filename=(arg0); end
  def format; end
  def format=(arg0); end
  def format_and_extension(reload = nil); end
  def initialize(template_path, load_path = nil); end
  def load!; end
  def load_path; end
  def load_path=(arg0); end
  def locale; end
  def locale=(arg0); end
  def method_segment(reload = nil); end
  def mime_type(reload = nil); end
  def multipart?; end
  def name; end
  def name=(arg0); end
  def parse_extensions(extensions); end
  def path(reload = nil); end
  def path_without_extension(reload = nil); end
  def path_without_format_and_extension(reload = nil); end
  def relative_path(reload = nil); end
  def render_template(view, local_assigns = nil); end
  def self.exempt_from_layout(*extensions); end
  def source(reload = nil); end
  def split(file); end
  def template_path; end
  def template_path=(arg0); end
  def to_s(*args, &block); end
  def valid_extension?(extension); end
  def valid_locale?(locale); end
  extend ActionView::TemplateHandlers
  extend ActiveSupport::Memoizable
  include ActionView::Renderable
  include ActiveSupport::Memoizable::InstanceMethods
  include ActiveSupport::Memoizable::InstanceMethods
  include ActiveSupport::Memoizable::InstanceMethods
  include ActiveSupport::Memoizable::InstanceMethods
  include ActiveSupport::Memoizable::InstanceMethods
  include ActiveSupport::Memoizable::InstanceMethods
  include ActiveSupport::Memoizable::InstanceMethods
  include ActiveSupport::Memoizable::InstanceMethods
  include ActiveSupport::Memoizable::InstanceMethods
end
class ActionView::Template::Path
  def ==(path); end
  def [](path); end
  def eql?(path); end
  def hash(*args, &block); end
  def initialize(path); end
  def inspect(*args, &block); end
  def load!; end
  def path; end
  def paths; end
  def relative_path_for_template_file(full_file_path); end
  def self.new_and_loaded(path); end
  def to_s; end
  def to_str; end
end
class ActionView::Template::EagerPath < ActionView::Template::Path
  def [](path); end
  def create_template(file); end
  def initialize(path); end
  def load!; end
  def templates_in_path; end
end
module ActionView::RenderablePartial
  def _unmemoized_counter_name; end
  def _unmemoized_variable_name; end
  def counter_name(reload = nil); end
  def freeze; end
  def freeze_without_memoizable; end
  def local_assigns_key?(local_assigns); end
  def render(view, local_assigns = nil); end
  def render_partial(view, object = nil, local_assigns = nil, as = nil); end
  def variable_name(reload = nil); end
  extend ActiveSupport::Memoizable
  include ActiveSupport::Memoizable::InstanceMethods
  include ActiveSupport::Memoizable::InstanceMethods
end
module ActionController::Rescue
  def clean_backtrace(exception); end
  def local_request?; end
  def log_error(exception); end
  def perform_action_with_rescue; end
  def render_optional_error_file(status_code); end
  def rescue_action(exception); end
  def rescue_action_in_public(exception); end
  def rescue_action_locally(exception); end
  def rescue_action_without_handler(exception); end
  def rescues_path(template_name); end
  def response_code_for_rescue(exception); end
  def self.included(base); end
  def template_path_for_local_rescue(exception); end
end
module ActionController::Rescue::ClassMethods
  def call_with_exception(env, exception); end
end
module Mime
end
class Mime::Type
  def ==(mime_type); end
  def ===(list); end
  def =~(mime_type); end
  def browser_generated?; end
  def browser_generated_types; end
  def html?; end
  def html_types; end
  def initialize(string, symbol = nil, synonyms = nil); end
  def method_missing(method, *args); end
  def self.browser_generated_types; end
  def self.html_types; end
  def self.lookup(string); end
  def self.lookup_by_extension(extension); end
  def self.parse(accept_header); end
  def self.register(string, symbol, mime_type_synonyms = nil, extension_synonyms = nil, skip_lookup = nil); end
  def self.register_alias(string, symbol, extension_synonyms = nil); end
  def self.unverifiable_types; end
  def to_s; end
  def to_str; end
  def to_sym; end
  def verify_request?; end
end
class Mime::Type::AcceptItem
  def <=>(item); end
  def ==(item); end
  def initialize(order, name, q = nil); end
  def name; end
  def name=(arg0); end
  def order; end
  def order=(arg0); end
  def q; end
  def q=(arg0); end
  def to_s; end
end
module ActionController::MimeResponds
  def self.included(base); end
end
module ActionController::MimeResponds::InstanceMethods
  def respond_to(*types, &block); end
end
class ActionController::MimeResponds::Responder
  def all(&block); end
  def any(*args, &block); end
  def atom(&block); end
  def css(&block); end
  def csv(&block); end
  def custom(mime_type, &block); end
  def html(&block); end
  def ics(&block); end
  def initialize(controller); end
  def js(&block); end
  def json(&block); end
  def method_missing(symbol, &block); end
  def multipart_form(&block); end
  def respond; end
  def rss(&block); end
  def self.generate_method_for_mime(mime); end
  def text(&block); end
  def url_encoded_form(&block); end
  def xml(&block); end
  def yaml(&block); end
end
module ActionController::Helpers
  def self.included(base); end
end
module ActionController::Helpers::ClassMethods
  def add_template_helper(helper_module); end
  def all_application_helpers; end
  def default_helper_module!; end
  def helper(*args, &block); end
  def helper_attr(*attrs); end
  def helper_method(*methods); end
  def helpers; end
  def inherited_with_helper(child); end
end
module ActionController::Flash
  def self.included(base); end
end
class ActionController::Flash::FlashNow
  def [](k); end
  def []=(k, v); end
  def initialize(flash); end
end
class ActionController::Flash::FlashHash < Hash
  def []=(k, v); end
  def discard(k = nil); end
  def initialize; end
  def keep(k = nil); end
  def merge!(h); end
  def now; end
  def replace(h); end
  def store(session, key = nil); end
  def sweep; end
  def update(h); end
  def use(k = nil, v = nil); end
end
module ActionController::Flash::InstanceMethods
  def alert; end
  def alert=(message); end
  def flash; end
  def notice; end
  def notice=(message); end
  def perform_action_with_flash; end
  def redirect_to_with_flash(options = nil, response_status_and_flash = nil); end
  def reset_session_with_flash; end
end
module ActionController::Cookies
  def cookies; end
  def self.included(base); end
end
class ActionController::CookieJar < Hash
  def [](name); end
  def []=(key, options); end
  def controller; end
  def delete(key, options = nil); end
  def initialize(controller); end
  def permanent; end
  def signed; end
  def write_cookie?(cookie); end
end
class ActionController::PermanentCookieJar < ActionController::CookieJar
  def []=(key, options); end
  def controller; end
  def initialize(parent_jar); end
  def method_missing(method, *arguments, &block); end
  def signed; end
end
class ActionController::SignedCookieJar < ActionController::CookieJar
  def [](name); end
  def []=(key, options); end
  def initialize(parent_jar); end
  def method_missing(method, *arguments, &block); end
end
module ActionController::Caching
  def cache(key, options = nil, &block); end
  def cache_configured?; end
  def self.included(base); end
end
module ActionController::Verification
  def apply_redirect_to(redirect_to_option); end
  def apply_remaining_actions(options); end
  def prereqs_invalid?(options); end
  def self.included(base); end
  def verify_action(options); end
  def verify_method(options); end
  def verify_presence_of_keys_in_hash_flash_or_params(options); end
  def verify_request_xhr_status(options); end
end
module ActionController::Verification::ClassMethods
  def verify(options = nil); end
end
module ActionController::Streaming
  def send_data(data, options = nil); end
  def send_file(path, options = nil); end
  def send_file_headers!(options); end
end
module ActionController::SessionManagement
  def self.included(base); end
end
module ActionController::SessionManagement::ClassMethods
  def session(*args); end
  def session=(options = nil); end
  def session_options; end
  def session_store; end
  def session_store=(store); end
end
module ActionController::HttpAuthentication
end
module ActionController::HttpAuthentication::Basic
  def authenticate(controller, &login_procedure); end
  def authentication_request(controller, realm); end
  def authorization(request); end
  def decode_credentials(request); end
  def encode_credentials(user_name, password); end
  def user_name_and_password(request); end
  extend ActionController::HttpAuthentication::Basic
end
module ActionController::HttpAuthentication::Basic::ControllerMethods
  def authenticate_or_request_with_http_basic(realm = nil, &login_procedure); end
  def authenticate_with_http_basic(&login_procedure); end
  def request_http_basic_authentication(realm = nil); end
end
module ActionController::HttpAuthentication::Digest
  def authenticate(controller, realm, &password_procedure); end
  def authentication_header(controller, realm); end
  def authentication_request(controller, realm, message = nil); end
  def authorization(request); end
  def decode_credentials(header); end
  def decode_credentials_header(request); end
  def encode_credentials(http_method, credentials, password, password_is_ha1); end
  def expected_response(http_method, uri, credentials, password, password_is_ha1 = nil); end
  def ha1(credentials, password); end
  def nonce(time = nil); end
  def opaque; end
  def secret_key; end
  def validate_digest_response(request, realm, &password_procedure); end
  def validate_nonce(request, value, seconds_to_timeout = nil); end
  extend ActionController::HttpAuthentication::Digest
end
module ActionController::HttpAuthentication::Digest::ControllerMethods
  def authenticate_or_request_with_http_digest(realm = nil, &password_procedure); end
  def authenticate_with_http_digest(realm = nil, &password_procedure); end
  def request_http_digest_authentication(realm = nil, message = nil); end
end
module ActionController::RecordIdentifier
  def dom_class(record_or_class, prefix = nil); end
  def dom_id(record, prefix = nil); end
  def model_name_from_record_or_class(record_or_class); end
  def partial_path(record_or_class, controller_path = nil); end
  def plural_class_name(record_or_class); end
  def singular_class_name(record_or_class); end
  extend ActionController::RecordIdentifier
end
class ActionController::InvalidAuthenticityToken < ActionController::ActionControllerError
end
module ActionController::RequestForgeryProtection
  def form_authenticity_param; end
  def form_authenticity_token; end
  def handle_unverified_request; end
  def protect_against_forgery?; end
  def self.included(base); end
  def verifiable_request_format?; end
  def verified_request?; end
  def verify_authenticity_token; end
end
module ActionController::RequestForgeryProtection::ClassMethods
  def protect_from_forgery(options = nil); end
end
module ActionController::Translation
  def l(*args); end
  def localize(*args); end
  def t(*args); end
  def translate(*args); end
end
module ActionController::Caching::Pages
  def cache_page(content = nil, options = nil); end
  def caching_allowed; end
  def expire_page(options = nil); end
  def self.included(base); end
end
module ActionController::Caching::Pages::ClassMethods
  def cache_page(content, path); end
  def caches_page(*actions); end
  def expire_page(path); end
  def page_cache_file(path); end
  def page_cache_path(path); end
end
module ActionController::Caching::Actions
  def expire_action(options = nil); end
  def self.included(base); end
end
module ActionController::Caching::Actions::ClassMethods
  def caches_action(*actions); end
end
class ActionController::Caching::Actions::ActionCacheFilter
  def after(controller); end
  def before(controller); end
  def cache_layout?; end
  def caching_allowed(controller); end
  def content_for_layout(controller); end
  def filter(controller, action); end
  def initialize(options, &block); end
  def path_options_for(controller, options); end
  def set_content_type!(controller, extension); end
end
class ActionController::Caching::Actions::ActionCachePath
  def add_extension!(path, extension); end
  def extension; end
  def extract_extension(request); end
  def initialize(controller, options = nil, infer_extension = nil); end
  def normalize!(path); end
  def path; end
  def self.path_for(controller, options, infer_extension = nil); end
end
module ActionController::Caching::Fragments
  def expire_fragment(key, options = nil); end
  def fragment_cache_key(key); end
  def fragment_exist?(key, options = nil); end
  def fragment_for(buffer, name = nil, options = nil, &block); end
  def read_fragment(key, options = nil); end
  def write_fragment(key, content, options = nil); end
end
module ActionController::Caching::Sweeping
  def self.included(base); end
end
module ActionController::Caching::Sweeping::ClassMethods
  def cache_sweeper(*sweepers); end
end
class ActionController::ActionControllerError < StandardError
end
class ActionController::SessionRestoreError < ActionController::ActionControllerError
end
class ActionController::RenderError < ActionController::ActionControllerError
end
class ActionController::RoutingError < ActionController::ActionControllerError
  def failures; end
  def initialize(message, failures = nil); end
end
class ActionController::MethodNotAllowed < ActionController::ActionControllerError
  def allowed_methods; end
  def allowed_methods_header; end
  def handle_response!(response); end
  def initialize(*allowed_methods); end
end
class ActionController::NotImplemented < ActionController::MethodNotAllowed
end
class ActionController::UnknownController < ActionController::ActionControllerError
end
class ActionController::UnknownAction < ActionController::ActionControllerError
end
class ActionController::MissingFile < ActionController::ActionControllerError
end
class ActionController::SessionOverflowError < ActionController::ActionControllerError
  def initialize(message = nil); end
end
class ActionController::DoubleRenderError < ActionController::ActionControllerError
  def initialize(message = nil); end
end
class ActionController::RedirectBackError < ActionController::ActionControllerError
  def initialize(message = nil); end
end
class ActionController::UnknownHttpMethod < ActionController::ActionControllerError
end
class ActionController::Base
  def action_cache_path; end
  def action_cache_path=(arg0); end
  def action_methods; end
  def action_name; end
  def action_name=(arg0); end
  def allow_concurrency; end
  def allow_concurrency=(obj); end
  def allow_forgery_protection; end
  def allow_forgery_protection=(obj); end
  def append_view_path(path); end
  def asset_host; end
  def asset_host=(obj); end
  def assign_names; end
  def assign_shortcuts(request, response); end
  def cache_store; end
  def complete_request_uri; end
  def consider_all_requests_local; end
  def consider_all_requests_local=(obj); end
  def controller_class_name; end
  def controller_name; end
  def controller_path; end
  def cookie_verifier_secret; end
  def cookie_verifier_secret=(obj); end
  def default_charset; end
  def default_charset=(obj); end
  def default_render; end
  def default_template(action_name = nil); end
  def default_template_name(action_name = nil); end
  def default_url_options(options = nil); end
  def erase_redirect_results; end
  def erase_render_results; end
  def erase_results; end
  def expires_in(seconds, options = nil); end
  def expires_now; end
  def fresh_when(options); end
  def head(*args); end
  def headers; end
  def headers=(v); end
  def helpers_dir; end
  def helpers_dir=(obj); end
  def initialize_current_url; end
  def initialize_template_class(response); end
  def ip_spoofing_check; end
  def ip_spoofing_check=(obj); end
  def log_processing; end
  def log_processing_for_parameters; end
  def log_processing_for_request_id; end
  def logger; end
  def logger=(obj); end
  def master_helper_module; end
  def master_helper_module=(obj); end
  def optimise_named_routes; end
  def optimise_named_routes=(obj); end
  def page_cache_directory; end
  def page_cache_directory=(obj); end
  def page_cache_extension; end
  def page_cache_extension=(obj); end
  def param_parsers; end
  def param_parsers=(obj); end
  def params; end
  def params=(v); end
  def perform_action; end
  def perform_action_without_benchmark; end
  def perform_action_without_filters; end
  def perform_action_without_flash; end
  def perform_action_without_rescue; end
  def perform_caching; end
  def perform_caching=(obj); end
  def performed?; end
  def prepend_view_path(path); end
  def process(request, response, method = nil, *arguments); end
  def process_cleanup; end
  def process_without_filters(request, response, method = nil, *arguments); end
  def protected_instance_variables; end
  def redirect_to(options = nil, response_status_and_flash = nil); end
  def redirect_to_full_url(url, status); end
  def redirect_to_without_flash(options = nil, response_status = nil); end
  def relative_url_root; end
  def relative_url_root=(obj); end
  def render(options = nil, extra_options = nil, &block); end
  def render_for_file(template_path, status = nil, layout = nil, locals = nil); end
  def render_for_text(text = nil, status = nil, append_response = nil); end
  def render_to_string(options = nil, &block); end
  def render_without_benchmark(options = nil, extra_options = nil, &block); end
  def rendered_action_cache; end
  def rendered_action_cache=(arg0); end
  def request; end
  def request=(v); end
  def request_forgery_protection_token; end
  def request_forgery_protection_token=(obj); end
  def request_origin; end
  def rescue_handlers; end
  def rescue_handlers=(obj); end
  def rescue_responses; end
  def rescue_responses=(obj); end
  def rescue_templates; end
  def rescue_templates=(obj); end
  def reset_session; end
  def reset_session_without_flash; end
  def reset_variables_added_to_assigns; end
  def resource_action_separator; end
  def resource_action_separator=(obj); end
  def resources_path_names; end
  def resources_path_names=(obj); end
  def response; end
  def response=(v); end
  def rewrite_options(options); end
  def self.action_methods; end
  def self.allow_concurrency; end
  def self.allow_concurrency=(obj); end
  def self.allow_forgery_protection; end
  def self.allow_forgery_protection=(obj); end
  def self.append_view_path(path); end
  def self.asset_host; end
  def self.asset_host=(obj); end
  def self.cache_configured?; end
  def self.cache_store; end
  def self.cache_store=(store_option); end
  def self.call(env); end
  def self.consider_all_requests_local; end
  def self.consider_all_requests_local=(obj); end
  def self.controller_class_name; end
  def self.controller_name; end
  def self.controller_path; end
  def self.cookie_verifier_secret; end
  def self.cookie_verifier_secret=(obj); end
  def self.default_charset; end
  def self.default_charset=(obj); end
  def self.exempt_from_layout(*args, &block); end
  def self.filter_parameter_logging(*filter_words, &block); end
  def self.helpers_dir; end
  def self.helpers_dir=(obj); end
  def self.hidden_actions; end
  def self.hide_action(*names); end
  def self.inherited(child); end
  def self.inherited_without_helper(child); end
  def self.inherited_without_layout(child); end
  def self.ip_spoofing_check; end
  def self.ip_spoofing_check=(obj); end
  def self.logger; end
  def self.logger=(obj); end
  def self.master_helper_module; end
  def self.master_helper_module=(obj); end
  def self.optimise_named_routes; end
  def self.optimise_named_routes=(obj); end
  def self.page_cache_directory; end
  def self.page_cache_directory=(obj); end
  def self.page_cache_extension; end
  def self.page_cache_extension=(obj); end
  def self.param_parsers; end
  def self.param_parsers=(obj); end
  def self.perform_caching; end
  def self.perform_caching=(obj); end
  def self.prepend_view_path(path); end
  def self.process(request, response); end
  def self.protected_instance_variables; end
  def self.relative_url_root; end
  def self.relative_url_root=(obj); end
  def self.request_forgery_protection_token; end
  def self.request_forgery_protection_token=(obj); end
  def self.rescue_handlers; end
  def self.rescue_handlers=(obj); end
  def self.rescue_responses; end
  def self.rescue_responses=(obj); end
  def self.rescue_templates; end
  def self.rescue_templates=(obj); end
  def self.resource_action_separator; end
  def self.resource_action_separator=(obj); end
  def self.resources_path_names; end
  def self.resources_path_names=(obj); end
  def self.use_accept_header; end
  def self.use_accept_header=(obj); end
  def self.view_paths; end
  def self.view_paths=(value); end
  def send_response; end
  def session; end
  def session=(v); end
  def session_enabled?; end
  def stale?(options); end
  def strip_out_controller(path); end
  def template_path_includes_controller?(path); end
  def url_for(options = nil); end
  def use_accept_header; end
  def use_accept_header=(obj); end
  def validate_render_arguments(options, extra_options, has_block); end
  def view_paths; end
  def view_paths=(value); end
  extend ActionController::Benchmarking::ClassMethods
  extend ActionController::Caching::Actions::ClassMethods
  extend ActionController::Caching::Pages::ClassMethods
  extend ActionController::Caching::Sweeping::ClassMethods
  extend ActionController::Filters::ClassMethods
  extend ActionController::Helpers::ClassMethods
  extend ActionController::Layout::ClassMethods
  extend ActionController::RequestForgeryProtection::ClassMethods
  extend ActionController::Rescue::ClassMethods
  extend ActionController::SessionManagement::ClassMethods
  extend ActionController::Verification::ClassMethods
  extend ActiveSupport::Rescuable::ClassMethods
  include ActionController::Benchmarking
  include ActionController::Caching
  include ActionController::Caching::Pages
  include ActionController::Caching::Sweeping
  include ActionController::Cookies
  include ActionController::Filters
  include ActionController::Filters::InstanceMethods
  include ActionController::Flash
  include ActionController::Flash::InstanceMethods
  include ActionController::Helpers
  include ActionController::HttpAuthentication::Basic::ControllerMethods
  include ActionController::HttpAuthentication::Digest::ControllerMethods
  include ActionController::Layout
  include ActionController::MimeResponds
  include ActionController::MimeResponds::InstanceMethods
  include ActionController::RecordIdentifier
  include ActionController::RequestForgeryProtection
  include ActionController::Rescue
  include ActionController::SessionManagement
  include ActionController::StatusCodes
  include ActionController::Streaming
  include ActionController::Translation
  include ActionController::Verification
  include ActiveSupport::Rescuable
end
module ActionController::UrlWriter
  def self.included(base); end
  def url_for(options); end
end
class ActionController::UrlRewriter
  def initialize(request, parameters); end
  def rewrite(options = nil); end
  def rewrite_authentication(options); end
  def rewrite_path(options); end
  def rewrite_url(options); end
  def to_s; end
  def to_str; end
end
module ActionController::Routing
  def controller_paths; end
  def controller_paths=(obj); end
  def generate_best_match; end
  def generate_best_match=(obj); end
  def self.controller_paths; end
  def self.controller_paths=(obj); end
  def self.controller_relative_to(controller, previous); end
  def self.generate_best_match; end
  def self.generate_best_match=(obj); end
  def self.normalize_paths(paths); end
  def self.possible_controllers; end
  def self.use_controllers!(controller_names); end
  def self.with_controllers(names); end
end
module ActionController::Routing::Optimisation
  def generate_optimisation_block(route, kind); end
end
class ActionController::Routing::Optimisation::Optimiser
  def applicable?; end
  def generation_code; end
  def guard_conditions; end
  def initialize(route, kind); end
  def kind; end
  def route; end
  def source_code; end
end
class ActionController::Routing::Optimisation::PositionalArguments < ActionController::Routing::Optimisation::Optimiser
  def generation_code; end
  def guard_conditions; end
end
class ActionController::Routing::Optimisation::PositionalArgumentsWithAdditionalParams < ActionController::Routing::Optimisation::PositionalArguments
  def applicable?; end
  def generation_code; end
  def guard_conditions; end
end
class Object < BasicObject
end
class TrueClass
  def to_param; end
end
class FalseClass
  def to_param; end
end
class NilClass
  def to_param; end
end
class Regexp
  def multiline?; end
  def number_of_captures; end
  def self.compile(*arg0); end
  def self.try_convert(arg0); end
end
class ActionController::Routing::Route
  def append_query_string(path, hash, query_keys = nil); end
  def build_query_string(hash, only_keys = nil); end
  def conditions; end
  def conditions=(arg0); end
  def defaults; end
  def extra_keys(hash, recall = nil); end
  def freeze; end
  def generate(options, hash, expire_on = nil); end
  def generate_extras(options, hash, expire_on = nil); end
  def generation_extraction; end
  def generation_requirements; end
  def generation_structure; end
  def initialize(segments = nil, requirements = nil, conditions = nil); end
  def matches_controller_and_action?(controller, action); end
  def optimise; end
  def optimise=(arg0); end
  def optimise?; end
  def parameter_shell; end
  def prepare_matching!; end
  def recognition_conditions; end
  def recognition_extraction; end
  def recognition_pattern(wrap = nil); end
  def required_segment_keys; end
  def requirement_for(key); end
  def requirements; end
  def requirements=(arg0); end
  def segment_keys; end
  def segments; end
  def segments=(arg0); end
  def significant_keys; end
  def to_s; end
  def write_generation!; end
  def write_recognition!; end
end
class ActionController::Routing::Segment
  def all_optionals_available_condition(prior_segments); end
  def continue_string_structure(prior_segments); end
  def extraction_code; end
  def initialize; end
  def interpolation_chunk; end
  def interpolation_statement(prior_segments); end
  def is_optional; end
  def is_optional=(arg0); end
  def match_extraction(next_capture); end
  def number_of_captures; end
  def optional?; end
  def optionality_implied?; end
  def string_structure(prior_segments); end
end
class ActionController::Routing::StaticSegment < ActionController::Routing::Segment
  def build_pattern(pattern); end
  def initialize(value = nil, options = nil); end
  def interpolation_chunk; end
  def number_of_captures; end
  def raw; end
  def raw?; end
  def regexp_chunk; end
  def to_s; end
  def value; end
end
class ActionController::Routing::DividerSegment < ActionController::Routing::StaticSegment
  def initialize(value = nil, options = nil); end
  def optionality_implied?; end
end
class ActionController::Routing::DynamicSegment < ActionController::Routing::Segment
  def build_pattern(pattern); end
  def default; end
  def default=(arg0); end
  def default_regexp_chunk; end
  def expiry_statement; end
  def extract_value; end
  def extraction_code; end
  def initialize(key = nil, options = nil); end
  def interpolation_chunk(value_code = nil); end
  def key; end
  def local_name; end
  def match_extraction(next_capture); end
  def number_of_captures; end
  def optionality_implied?; end
  def regexp; end
  def regexp=(arg0); end
  def regexp_chunk; end
  def regexp_has_modifiers?; end
  def regexp_string; end
  def string_structure(prior_segments); end
  def to_s; end
  def value_check; end
  def value_regexp; end
end
class ActionController::Routing::ControllerSegment < ActionController::Routing::DynamicSegment
  def extract_value; end
  def interpolation_chunk(value_code = nil); end
  def match_extraction(next_capture); end
  def regexp_chunk; end
end
class ActionController::Routing::PathSegment < ActionController::Routing::DynamicSegment
  def default; end
  def default=(path); end
  def default_regexp_chunk; end
  def extract_value; end
  def interpolation_chunk(value_code = nil); end
  def match_extraction(next_capture); end
  def number_of_captures; end
  def optionality_implied?; end
end
class ActionController::Routing::PathSegment::Result < Array
  def self.new_escaped(strings); end
  def to_s; end
end
class ActionController::Routing::OptionalFormatSegment < ActionController::Routing::DynamicSegment
  def extract_value; end
  def initialize(key = nil, options = nil); end
  def interpolation_chunk; end
  def match_extraction(next_capture); end
  def regexp_chunk; end
  def to_s; end
end
class ActionController::Routing::RouteBuilder
  def assign_default_route_options(segments); end
  def assign_route_options(segments, defaults, requirements); end
  def build(path, options); end
  def divide_route_options(segments, options); end
  def ensure_required_segments(segments); end
  def initialize; end
  def interval_regexp; end
  def nonseparator_regexp; end
  def optional_separators; end
  def segment_for(string); end
  def segments_for_route_path(path); end
  def separator_regexp; end
  def separators; end
  def validate_route_conditions(conditions); end
end
module ActionController::Resources
  def action_options_for(action, resource, method = nil, resource_options = nil); end
  def add_conditions_for(conditions, method); end
  def map_associations(resource, options); end
  def map_collection_actions(map, resource); end
  def map_default_collection_actions(map, resource); end
  def map_default_singleton_actions(map, resource); end
  def map_has_many_associations(resource, associations, options); end
  def map_member_actions(map, resource); end
  def map_new_actions(map, resource); end
  def map_resource(entities, options = nil, &block); end
  def map_resource_routes(map, resource, action, route_path, route_name = nil, method = nil, resource_options = nil); end
  def map_singleton_resource(entities, options = nil, &block); end
  def resource(*entities, &block); end
  def resources(*entities, &block); end
end
class ActionController::Resources::Resource
  def action_allowed?(action); end
  def action_separator; end
  def add_default_action(collection, method, action); end
  def add_default_actions; end
  def arrange_actions; end
  def arrange_actions_by_methods(actions); end
  def collection_methods; end
  def conditions; end
  def controller; end
  def has_action?(action); end
  def initialize(entities, options); end
  def member_methods; end
  def member_path; end
  def name_prefix; end
  def nesting_name_prefix; end
  def nesting_path_prefix; end
  def new_methods; end
  def new_path; end
  def options; end
  def path; end
  def path_prefix; end
  def path_segment; end
  def plural; end
  def requirements(with_id = nil); end
  def set_allowed_actions; end
  def set_prefixes; end
  def shallow_name_prefix; end
  def shallow_path_prefix; end
  def singular; end
  def uncountable?; end
end
class ActionController::Resources::SingletonResource < ActionController::Resources::Resource
  def initialize(entity, options); end
  def member_path; end
  def nesting_path_prefix; end
  def shallow_name_prefix; end
  def shallow_path_prefix; end
end
class ActionController::Routing::RouteSet
  def add_configuration_file(path); end
  def add_named_route(name, path, options = nil); end
  def add_route(path, options = nil); end
  def build_expiry(options, recall); end
  def builder; end
  def call(env); end
  def clear!; end
  def clear_recognize_optimized!; end
  def configuration_file; end
  def configuration_file=(path); end
  def configuration_files; end
  def configuration_files=(arg0); end
  def deprecated_routes_for_controller_and_action_and_keys(controller, action, keys); end
  def draw; end
  def empty?; end
  def extra_keys(options, recall = nil); end
  def extract_request_environment(request); end
  def generate(options, recall = nil, method = nil); end
  def generate_code(list, padding = nil, level = nil); end
  def generate_extras(options, recall = nil); end
  def initialize; end
  def install_helpers(destinations = nil, regenerate_code = nil); end
  def load!; end
  def load_routes!; end
  def named_routes; end
  def named_routes=(arg0); end
  def options_as_params(options); end
  def raise_named_route_error(options, named_route, named_route_name); end
  def recognize(request); end
  def recognize_path(path, environment = nil); end
  def reload!; end
  def reload; end
  def remove_recognize_optimized!; end
  def routes; end
  def routes=(arg0); end
  def routes_by_controller; end
  def routes_changed_at; end
  def routes_for(options, merged, expire_on); end
  def routes_for_controller_and_action(controller, action); end
  def routes_for_controller_and_action_and_keys(controller, action, keys); end
  def segment_tree(routes); end
  def to_plain_segments(str); end
  def write_recognize_optimized!; end
end
class ActionController::Routing::RouteSet::Mapper
  def connect(path, options = nil); end
  def initialize(set); end
  def method_missing(route_name, *args, &proc); end
  def named_route(name, path, options = nil); end
  def namespace(name, options = nil, &block); end
  def root(options = nil); end
  include ActionController::Resources
end
class ActionController::Routing::RouteSet::NamedRouteCollection
  def [](name); end
  def []=(name, route); end
  def add(name, route); end
  def clear!; end
  def clear; end
  def define_hash_access(route, name, kind, options); end
  def define_named_route_methods(name, route); end
  def define_url_helper(route, name, kind, options); end
  def each; end
  def get(name); end
  def hash_access_name(name, kind = nil); end
  def helpers; end
  def initialize; end
  def install(destinations = nil, regenerate = nil); end
  def length; end
  def named_helper_module_eval(code, *args); end
  def names; end
  def reset!; end
  def routes; end
  def url_helper_name(name, kind = nil); end
  include ActionController::Routing::Optimisation
  include Enumerable
end
module ActionController::PolymorphicRoutes
  def action_prefix(options); end
  def build_named_route_call(records, inflection, options = nil); end
  def edit_polymorphic_path(record_or_hash, options = nil); end
  def edit_polymorphic_url(record_or_hash, options = nil); end
  def extract_record(record_or_hash_or_array); end
  def formatted_polymorphic_path(record_or_hash, options = nil); end
  def formatted_polymorphic_url(record_or_hash, options = nil); end
  def new_polymorphic_path(record_or_hash, options = nil); end
  def new_polymorphic_url(record_or_hash, options = nil); end
  def polymorphic_path(record_or_hash_or_array, options = nil); end
  def polymorphic_url(record_or_hash_or_array, options = nil); end
  def routing_type(options); end
end
module ActionController::Routing::Helpers
  include ActionController::PolymorphicRoutes
end
module Anonymous_Module_4
end
module ActiveSupport::Inflector
  def inflections_with_route_reloading(&block); end
  def inflections_without_route_reloading; end
end
class ActionView::ReloadableTemplate < ActionView::Template
  def initialize(*args); end
  def mtime; end
  def previously_last_modified; end
  def previously_last_modified=(arg0); end
  def reset_cache_if_stale!; end
  def stale?; end
  def undef_my_compiled_methods!; end
end
class ActionView::ReloadableTemplate::TemplateDeleted < ActionView::ActionViewError
end
class ActionView::ReloadableTemplate::ReloadablePath < ActionView::Template::Path
  def [](path); end
  def initialize(path); end
  def load!; end
  def load_all_templates_from_dir(dir); end
  def new_request!; end
  def register_template(template); end
  def register_template_from_file(template_full_file_path); end
  def template_files_from_dir(dir); end
  def templates_dir_from_path(path); end
  def unregister_template(template); end
end
module ActionView::ReloadableTemplate::Unfreezable
  def freeze; end
end
class ActionController::MiddlewareStack < Array
  def active; end
  def build(app); end
  def initialize(*args, &block); end
  def insert(index, *args, &block); end
  def insert_after(index, *args, &block); end
  def insert_before(index, *args, &block); end
  def swap(target, *args, &block); end
  def use(*args, &block); end
end
class ActionController::MiddlewareStack::Middleware
  def ==(middleware); end
  def active?; end
  def args; end
  def block; end
  def build(app); end
  def build_args; end
  def initialize(klass, *args, &block); end
  def inspect; end
  def klass; end
  def self.new(klass, *args, &block); end
end
class ActionController::Dispatcher
  def _call(env); end
  def build_middleware_stack; end
  def call(env); end
  def dispatch; end
  def dispatch_cgi(cgi, session_options); end
  def flush_logger; end
  def initialize(output = nil, request = nil, response = nil); end
  def middleware; end
  def middleware=(obj); end
  def self.after_dispatch(*methods, &block); end
  def self.after_dispatch_callback_chain; end
  def self.before_dispatch(*methods, &block); end
  def self.before_dispatch_callback_chain; end
  def self.cleanup_application; end
  def self.define_dispatcher_callbacks(cache_classes); end
  def self.dispatch(cgi = nil, session_options = nil, output = nil); end
  def self.middleware; end
  def self.middleware=(obj); end
  def self.prepare_dispatch(*methods, &block); end
  def self.prepare_dispatch_callback_chain; end
  def self.reload_application; end
  def self.run_prepare_callbacks; end
  def self.to_prepare(identifier = nil, &block); end
  extend ActiveSupport::Callbacks::ClassMethods
  include ActiveSupport::Callbacks
end
class ActionController::ParamsParser
  def call(env); end
  def content_type_from_legacy_post_data_format_header(env); end
  def initialize(app); end
  def logger; end
  def parse_formatted_parameters(env); end
end
class ActionController::Failsafe
  def call(env); end
  def error_file_path; end
  def error_file_path=(obj); end
  def failsafe_logger; end
  def failsafe_response(exception); end
  def failsafe_response_body; end
  def h(text); end
  def initialize(app); end
  def log_failsafe_exception(exception); end
  def render_template(filename); end
  def self.error_file_path; end
  def self.error_file_path=(obj); end
end
class ActionController::Session::AbstractStore
  def call(env); end
  def current_session_id(env); end
  def destroy(env); end
  def exists?(env); end
  def extract_session_id(env); end
  def generate_sid; end
  def get_session(env, sid); end
  def initialize(app, options = nil); end
  def load_session(env); end
  def prepare!(env); end
  def set_session(env, sid, session_data); end
  include ActionController::Session::AbstractStore::SessionUtils
end
class ActionController::Session::AbstractStore::OptionsHash < Hash
  def [](key); end
  def has_session_id?; end
  def initialize(by, env, default_options); end
  def load_session_id!; end
end
class ActionController::Session::AbstractStore::SessionHash < Hash
  def [](key); end
  def []=(key, value); end
  def clear; end
  def data; end
  def delete(key); end
  def destroy; end
  def exists?; end
  def has_key?(key); end
  def initialize(by, env); end
  def inspect; end
  def load!; end
  def load_for_read!; end
  def load_for_write!; end
  def loaded?; end
  def session_id; end
  def to_hash; end
  def update(hash); end
end
module ActionController::Session::AbstractStore::SessionUtils
  def stale_session_check!; end
end
class ActionController::Session::CookieStore
  def call(env); end
  def current_session_id(env); end
  def destroy(env); end
  def ensure_secret_secure(secret); end
  def ensure_session_key(key); end
  def exists?(env); end
  def extract_session_id(env); end
  def generate_sid; end
  def initialize(app, options = nil); end
  def inject_persistent_session_id(data); end
  def load_session(env); end
  def marshal(session); end
  def persistent_session_id!(data); end
  def prepare!(env); end
  def requires_session_id?(data); end
  def unmarshal(cookie); end
  def unpacked_cookie_data(env); end
  def verifier_for(secret, digest); end
  include ActionController::Session::AbstractStore::SessionUtils
end
class ActionController::Session::CookieStore::CookieOverflow < StandardError
end
