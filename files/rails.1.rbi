# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: true
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/rails/all/rails.rbi
#
# rails-2.3.18
module Rails
  def self.backtrace_cleaner; end
  def self.cache; end
  def self.configuration; end
  def self.configuration=(configuration); end
  def self.env; end
  def self.initialized=(initialized); end
  def self.initialized?; end
  def self.logger; end
  def self.public_path; end
  def self.public_path=(path); end
  def self.root; end
  def self.version; end
end
module Rails::VERSION
end
class Rails::Plugin
  def <=>(other_plugin); end
  def about; end
  def app_paths; end
  def classic_init_path; end
  def controller_path; end
  def directory; end
  def engine?; end
  def evaluate_init_rb(initializer); end
  def gem_init_path; end
  def has_app_directory?; end
  def has_init_file?; end
  def has_lib_directory?; end
  def init_path; end
  def initialize(directory); end
  def lib_path; end
  def load(initializer); end
  def load_about_information; end
  def load_paths; end
  def loaded?; end
  def locale_files; end
  def locale_path; end
  def localized?; end
  def metal_path; end
  def name; end
  def report_nonexistant_or_empty_plugin!; end
  def routed?; end
  def routing_file; end
  def valid?; end
  def view_path; end
  include Comparable
end
class Rails::Plugin::Locator
  def each(&block); end
  def initialize(initializer); end
  def initializer; end
  def plugin_names; end
  def plugins; end
  include Enumerable
end
class Rails::Plugin::FileSystemLocator < Rails::Plugin::Locator
  def create_plugin(path); end
  def locate_plugins_under(base_path); end
  def plugins; end
end
class Rails::Plugin::GemLocator < Rails::Plugin::Locator
  def plugins; end
end
class Rails::GemPlugin < Rails::Plugin
  def init_path; end
  def initialize(spec, gem); end
end
class Rails::Plugin::Loader
  def add_engine_controller_paths; end
  def add_engine_locales; end
  def add_engine_routing_configurations; end
  def add_engine_view_paths; end
  def add_plugin_load_paths; end
  def all_plugins; end
  def application_lib_index; end
  def configuration; end
  def configure_engines; end
  def effective_order_of(plugin); end
  def enabled?(plugin); end
  def engine_metal_paths; end
  def engines; end
  def ensure_all_registered_plugins_are_loaded!; end
  def explicit_plugin_loading_order?; end
  def explicitly_enabled?(plugin); end
  def explicitly_registered?(plugin); end
  def initialize(initializer); end
  def initializer; end
  def load_plugins; end
  def loaded?(plugin_name); end
  def locate_plugins; end
  def order_plugins(plugin_a, plugin_b); end
  def plugins; end
  def register_plugin_as_loaded(plugin); end
  def registered?(plugin); end
  def registered_plugin_names; end
  def registered_plugins_names_plugin?(plugin); end
  def should_load?(plugin); end
end
class Rails::VendorGemSourceIndex
  def add_spec(spec); end
  def each(&block); end
  def find_name(*args); end
  def initialize(installed_index, vendor_dir = nil); end
  def installed_source_index; end
  def load_specification(gem_dir); end
  def refresh!; end
  def remove_spec(spec); end
  def search(*args); end
  def self.silence_spec_warnings; end
  def self.silence_spec_warnings=(v); end
  def size; end
  def vendor_source_index; end
  def version_for_dir(d); end
  include Enumerable
end
module Gem
  def self.source_index=(index); end
end
class Rails::GemDependency < Gem::Dependency
  def ==(other); end
  def add_load_paths; end
  def build(options = nil); end
  def built?; end
  def dep; end
  def dep=(arg0); end
  def dependencies; end
  def eql?(other); end
  def framework_gem?; end
  def frozen?; end
  def gem_command; end
  def initialize(name, options = nil); end
  def install; end
  def install_command; end
  def installed?; end
  def lib; end
  def lib=(arg0); end
  def load; end
  def load_paths_added?; end
  def loaded?; end
  def refresh; end
  def self.add_frozen_gem_path; end
  def self.from_directory_name(directory_name, load_spec = nil); end
  def self.unpacked_path; end
  def source; end
  def source=(arg0); end
  def specification; end
  def specification=(s); end
  def unpack(options = nil); end
  def unpack_base; end
  def unpack_command; end
  def unpacked_gem_directory; end
  def unpacked_specification_filename; end
  def vendor_gem?; end
  def vendor_rails?; end
  def write_specification(spec); end
end
module Rails::Rack
end
class Rails::Initializer
  def add_gem_load_paths; end
  def add_plugin_load_paths; end
  def add_support_load_paths; end
  def after_initialize; end
  def check_for_unbuilt_gems; end
  def check_gem_dependencies; end
  def check_ruby_version; end
  def configuration; end
  def disable_dependency_loading; end
  def gems_dependencies_loaded; end
  def initialize(configuration); end
  def initialize_cache; end
  def initialize_database; end
  def initialize_database_middleware; end
  def initialize_dependency_mechanism; end
  def initialize_encoding; end
  def initialize_framework_caches; end
  def initialize_framework_logging; end
  def initialize_framework_settings; end
  def initialize_framework_views; end
  def initialize_i18n; end
  def initialize_logger; end
  def initialize_metal; end
  def initialize_routing; end
  def initialize_time_zone; end
  def initialize_whiny_nils; end
  def install_gem_spec_stubs; end
  def load_application_classes; end
  def load_application_initializers; end
  def load_environment; end
  def load_gems; end
  def load_observers; end
  def load_plugins; end
  def load_view_paths; end
  def loaded_plugins; end
  def plugin_loader; end
  def preload_frameworks; end
  def prepare_dispatcher; end
  def process; end
  def require_frameworks; end
  def self.run(command = nil, configuration = nil); end
  def set_autoload_paths; end
  def set_load_path; end
end
class Rails::Configuration
  def action_controller; end
  def action_controller=(arg0); end
  def action_mailer; end
  def action_mailer=(arg0); end
  def action_view; end
  def action_view=(arg0); end
  def active_record; end
  def active_record=(arg0); end
  def active_resource; end
  def active_resource=(arg0); end
  def active_support; end
  def active_support=(arg0); end
  def after_initialize(&after_initialize_block); end
  def after_initialize_blocks; end
  def autoload_once_paths; end
  def autoload_once_paths=(arg0); end
  def autoload_paths; end
  def autoload_paths=(arg0); end
  def breakpoint_server(_ = nil); end
  def breakpoint_server=(_ = nil); end
  def builtin_directories; end
  def cache_classes; end
  def cache_classes=(arg0); end
  def cache_store; end
  def cache_store=(arg0); end
  def controller_paths; end
  def controller_paths=(arg0); end
  def database_configuration; end
  def database_configuration_file; end
  def database_configuration_file=(arg0); end
  def default_autoload_once_paths; end
  def default_autoload_paths; end
  def default_cache_classes; end
  def default_cache_store; end
  def default_controller_paths; end
  def default_database_configuration_file; end
  def default_dependency_loading; end
  def default_eager_load_paths; end
  def default_frameworks; end
  def default_gems; end
  def default_i18n; end
  def default_log_level; end
  def default_log_path; end
  def default_plugin_loader; end
  def default_plugin_locators; end
  def default_plugin_paths; end
  def default_plugins; end
  def default_preload_frameworks; end
  def default_routes_configuration_file; end
  def default_view_path; end
  def default_whiny_nils; end
  def dependency_loading; end
  def dependency_loading=(arg0); end
  def eager_load_paths; end
  def eager_load_paths=(arg0); end
  def environment; end
  def environment_path; end
  def framework_paths; end
  def framework_root_path; end
  def frameworks; end
  def frameworks=(arg0); end
  def gem(name, options = nil); end
  def gems; end
  def gems=(arg0); end
  def i18n; end
  def i18n=(arg0); end
  def initialize; end
  def load_once_paths; end
  def load_once_paths=(paths); end
  def load_paths; end
  def load_paths=(paths); end
  def log_level; end
  def log_level=(arg0); end
  def log_path; end
  def log_path=(arg0); end
  def logger; end
  def logger=(arg0); end
  def metals; end
  def metals=(arg0); end
  def middleware; end
  def plugin_loader; end
  def plugin_loader=(arg0); end
  def plugin_locators; end
  def plugin_locators=(arg0); end
  def plugin_paths; end
  def plugin_paths=(arg0); end
  def plugins; end
  def plugins=(plugins); end
  def preload_frameworks; end
  def preload_frameworks=(arg0); end
  def reload_plugins; end
  def reload_plugins=(arg0); end
  def reload_plugins?; end
  def root_path; end
  def routes_configuration_file; end
  def routes_configuration_file=(arg0); end
  def set_root_path!; end
  def threadsafe!; end
  def time_zone; end
  def time_zone=(arg0); end
  def to_prepare(&callback); end
  def view_path; end
  def view_path=(arg0); end
  def whiny_nils; end
  def whiny_nils=(arg0); end
end
class Rails::OrderedOptions < Array
  def [](key); end
  def []=(key, value); end
  def find_pair(key); end
  def method_missing(name, *args); end
end
class Rails::Rack::Metal
  def call(env); end
  def initialize(app); end
  def metal_paths; end
  def metal_paths=(obj); end
  def requested_metals; end
  def requested_metals=(obj); end
  def self.metal_paths; end
  def self.metal_paths=(obj); end
  def self.metals; end
  def self.requested_metals; end
  def self.requested_metals=(obj); end
end
