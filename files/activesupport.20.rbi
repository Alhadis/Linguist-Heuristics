# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: true
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/activesupport/all/activesupport.rbi
#
# activesupport-2.3.18
class BlankSlate
  def self.find_hidden_method(name); end
  def self.hide(name); end
  def self.reveal(name); end
end
module Kernel
  def breakpoint; end
  def class_eval(*args, &block); end
  def daemonize; end
  def debugger; end
  def enable_warnings; end
  def require_library_or_gem(library_name); end
  def self.blank_slate_method_added(arg0); end
  def self.method_added(name); end
  def silence_stderr; end
  def silence_stream(stream); end
  def silence_warnings; end
  def suppress(*exception_classes); end
end
class Object < BasicObject
  def `(command); end
  def acts_like?(duck); end
  def as_json(options = nil); end
  def blank?; end
  def class_eval(*args, &block); end
  def copy_instance_variables_from(object, exclude = nil); end
  def duplicable?; end
  def extend_with_included_modules_from(object); end
  def extended_by; end
  def html_safe?; end
  def instance_values; end
  def instance_variable_names; end
  def load(file, *extras); end
  def load_without_new_constant_marking(*arg0); end
  def metaclass(*args, &block); end
  def metaclass_with_deprecation(*args, &block); end
  def metaclass_without_deprecation; end
  def presence; end
  def present?; end
  def remove_subclasses_of(*superclasses); end
  def returning(value); end
  def self.blank_slate_method_added(arg0); end
  def self.find_hidden_method(name); end
  def self.method_added(name); end
  def subclasses_of(*superclasses); end
  def to_json(options = nil); end
  def to_param; end
  def to_query(key); end
  def try(*arg0); end
  def with_options(options); end
  include ActiveSupport::Dependencies::Loadable
end
class Module
  def as_load_path; end
  def attr_accessor_with_default(sym, default = nil, &block); end
  def attr_internal(*attrs); end
  def attr_internal_accessor(*attrs); end
  def attr_internal_ivar_name(attr); end
  def attr_internal_naming_format; end
  def attr_internal_naming_format=(obj); end
  def attr_internal_reader(*attrs); end
  def attr_internal_writer(*attrs); end
  def blankslate_original_append_features(arg0); end
  def const_missing_without_dependencies(arg0); end
  def delegate(*methods); end
  def included_in_classes; end
  def mattr_accessor(*syms); end
  def mattr_reader(*syms); end
  def mattr_writer(*syms); end
  def remove_possible_method(method); end
  def self.attr_internal_naming_format; end
  def self.attr_internal_naming_format=(obj); end
  def synchronize(*methods); end
  include ActiveSupport::CoreExtensions::Module
  include ActiveSupport::Dependencies::ModuleConstMissing
  include ActiveSupport::Deprecation::ClassMethods
end
module Builder
  def self.check_for_name_collision(klass, method_name, defined_constant = nil); end
end
module Builder::XChar
end
class Integer < Numeric
  def html_safe?; end
  def to_json(options = nil); end
  def xchr; end
  include ActiveSupport::CoreExtensions::Integer::EvenOdd
  include ActiveSupport::CoreExtensions::Integer::Inflections
  include ActiveSupport::CoreExtensions::Integer::Time
end
class String
  def as_json(options = nil); end
  def as_str; end
  def blank?; end
  def ends_with?(*arg0); end
  def html_safe; end
  def html_safe?; end
  def safe_concat(*arg0); end
  def starts_with?(*arg0); end
  def to_json(options = nil); end
  def to_xs; end
  include ActiveSupport::CoreExtensions::String::Access
  include ActiveSupport::CoreExtensions::String::Behavior
  include ActiveSupport::CoreExtensions::String::Conversions
  include ActiveSupport::CoreExtensions::String::Filters
  include ActiveSupport::CoreExtensions::String::Inflections
  include ActiveSupport::CoreExtensions::String::Inflections
  include ActiveSupport::CoreExtensions::String::Iterators
  include ActiveSupport::CoreExtensions::String::Multibyte
  include ActiveSupport::CoreExtensions::String::StartsEndsWith
end
class Builder::IllegalBlockError < RuntimeError
end
class Builder::XmlBase < BlankSlate
  def <<(text); end
  def _escape(text); end
  def _escape_quote(text); end
  def _indent; end
  def _nested_structures(block); end
  def _newline; end
  def initialize(indent = nil, initial = nil); end
  def method_missing(sym, *args, &block); end
  def nil?; end
  def tag!(sym, *args, &block); end
  def text!(text); end
end
class Builder::XmlMarkup < Builder::XmlBase
  def _attr_value(value); end
  def _end_tag(sym); end
  def _ensure_no_block(got_block); end
  def _insert_attributes(attrs, order = nil); end
  def _special(open, close, data = nil, attrs = nil, order = nil); end
  def _start_tag(sym, attrs, end_too = nil); end
  def _text(text); end
  def cdata!(text); end
  def comment!(comment_text); end
  def declare!(inst, *args, &block); end
  def initialize(options = nil); end
  def instruct!(directive_tag = nil, attrs = nil); end
  def target!; end
end
class Builder::XmlEvents < Builder::XmlMarkup
  def _end_tag(sym); end
  def _start_tag(sym, attrs, end_too = nil); end
  def text!(text); end
end
module I18n
  def self.normalize_translation_keys(*args); end
end
module ActiveSupport
  def camelize_xml; end
  def camelize_xml=(obj); end
  def dasherize_xml; end
  def dasherize_xml=(obj); end
  def parse_json_times; end
  def parse_json_times=(obj); end
  def self.camelize_xml; end
  def self.camelize_xml=(obj); end
  def self.dasherize_xml; end
  def self.dasherize_xml=(obj); end
  def self.escape_html_entities_in_json(*args, &block); end
  def self.escape_html_entities_in_json=(*args, &block); end
  def self.load_all!; end
  def self.parse_json_times; end
  def self.parse_json_times=(obj); end
  def self.use_standard_json_time_format(*args, &block); end
  def self.use_standard_json_time_format=(*args, &block); end
end
module ActiveSupport::CoreExtensions
end
module ActiveSupport::CoreExtensions::Array
end
module ActiveSupport::CoreExtensions::Array::Access
  def fifth; end
  def forty_two; end
  def fourth; end
  def from(position); end
  def second; end
  def third; end
  def to(position); end
end
module ActiveSupport::CoreExtensions::Array::Conversions
  def self.included(base); end
  def to_formatted_s(format = nil); end
  def to_param; end
  def to_query(key); end
  def to_sentence(options = nil); end
  def to_xml(options = nil); end
end
module ActiveSupport::CoreExtensions::Array::ExtractOptions
  def extract_options!; end
end
module ActiveSupport::CoreExtensions::Array::Grouping
  def in_groups(number, fill_with = nil); end
  def in_groups_of(number, fill_with = nil); end
  def split(value = nil); end
end
module ActiveSupport::CoreExtensions::Array::RandomAccess
  def rand; end
  def random_element; end
  def sample(n = nil); end
end
module ActiveSupport::CoreExtensions::Array::Wrapper
  def wrap(object); end
end
class Array
  def as_json(options = nil); end
  def blank?; end
  def to_default_s; end
  def to_json(options = nil); end
  extend ActiveSupport::CoreExtensions::Array::Wrapper
  include ActiveSupport::CoreExtensions::Array::Access
  include ActiveSupport::CoreExtensions::Array::Conversions
  include ActiveSupport::CoreExtensions::Array::ExtractOptions
  include ActiveSupport::CoreExtensions::Array::Grouping
  include ActiveSupport::CoreExtensions::Array::RandomAccess
end
module ActiveSupport::CoreExtensions::Base64
end
module ActiveSupport::CoreExtensions::Base64::Encoding
  def encode64s(value); end
end
module Base64
  extend ActiveSupport::CoreExtensions::Base64::Encoding
end
module Benchmark
  def self.ms; end
end
module ActiveSupport::CoreExtensions::BigDecimal
end
module ActiveSupport::CoreExtensions::BigDecimal::Conversions
  def self.included(base); end
  def to_formatted_s(format = nil); end
  def to_yaml(opts = nil); end
end
class BigDecimal < Numeric
  def _original_to_s(*arg0); end
  include ActiveSupport::CoreExtensions::BigDecimal::Conversions
end
module ActiveSupport::CoreExtensions::CGI
end
module ActiveSupport::CoreExtensions::CGI::EscapeSkippingSlashes
  def escape_skipping_slashes(str); end
end
class CGI
  extend ActiveSupport::CoreExtensions::CGI::EscapeSkippingSlashes
end
class Class < Module
  def cattr_accessor(*syms); end
  def cattr_reader(*syms); end
  def cattr_writer(*syms); end
  def class_attribute(*attrs); end
  def class_inheritable_accessor(*syms); end
  def class_inheritable_array(*syms); end
  def class_inheritable_array_writer(*syms); end
  def class_inheritable_hash(*syms); end
  def class_inheritable_hash_writer(*syms); end
  def class_inheritable_reader(*syms); end
  def class_inheritable_writer(*syms); end
  def duplicable?; end
  def inheritable_attributes; end
  def inherited_with_inheritable_attributes(child); end
  def inherited_without_inheritable_attributes(arg0); end
  def read_inheritable_attribute(key); end
  def remove_class(*klasses); end
  def remove_subclasses; end
  def reset_inheritable_attributes; end
  def subclasses; end
  def superclass_delegating_accessor(*names); end
  def superclass_delegating_reader(*names); end
  def superclass_delegating_writer(*names); end
  def write_inheritable_array(key, elements); end
  def write_inheritable_attribute(key, value); end
  def write_inheritable_hash(key, hash); end
  def write_inheritable_hiwa(key, hash); end
  include ActiveSupport::Dependencies::ClassConstMissing
end
module ClassInheritableAttributes
end
module ActiveSupport::CoreExtensions::Date
end
module ActiveSupport::CoreExtensions::Date::Behavior
  def acts_like_date?; end
end
module ActiveSupport::CoreExtensions::Date::Calculations
  def advance(options); end
  def ago(seconds); end
  def at_beginning_of_day; end
  def at_beginning_of_month; end
  def at_beginning_of_quarter; end
  def at_beginning_of_week; end
  def at_beginning_of_year; end
  def at_end_of_month; end
  def at_end_of_quarter; end
  def at_end_of_week; end
  def at_end_of_year; end
  def at_midnight; end
  def beginning_of_day; end
  def beginning_of_month; end
  def beginning_of_quarter; end
  def beginning_of_week; end
  def beginning_of_year; end
  def change(options); end
  def end_of_day; end
  def end_of_month; end
  def end_of_quarter; end
  def end_of_week; end
  def end_of_year; end
  def future?; end
  def in(seconds); end
  def last_month; end
  def last_year; end
  def midnight; end
  def minus_with_duration(other); end
  def monday; end
  def months_ago(months); end
  def months_since(months); end
  def next_month; end
  def next_week(day = nil); end
  def next_year; end
  def past?; end
  def plus_with_duration(other); end
  def prev_month; end
  def prev_year; end
  def self.included(base); end
  def since(seconds); end
  def today?; end
  def tomorrow; end
  def years_ago(years); end
  def years_since(years); end
  def yesterday; end
end
module ActiveSupport::CoreExtensions::Date::Calculations::ClassMethods
  def current; end
  def tomorrow; end
  def yesterday; end
end
module ActiveSupport::CoreExtensions::Date::Conversions
  def readable_inspect; end
  def self.included(base); end
  def to_formatted_s(format = nil); end
  def to_time(form = nil); end
  def xmlschema; end
end
class Date
  def as_json(options = nil); end
  def default_inspect; end
  def minus_without_duration(arg0); end
  def plus_without_duration(arg0); end
  def to_default_s; end
  extend ActiveSupport::CoreExtensions::Date::Calculations::ClassMethods
  include ActiveSupport::CoreExtensions::Date::Behavior
  include ActiveSupport::CoreExtensions::Date::Calculations
  include ActiveSupport::CoreExtensions::Date::Conversions
end
module ActiveSupport::CoreExtensions::Time
end
module ActiveSupport::CoreExtensions::Time::Behavior
  def acts_like_time?; end
end
module ActiveSupport::CoreExtensions::Time::Zones
  def in_time_zone(zone = nil); end
  def self.included(base); end
end
module ActiveSupport::CoreExtensions::Time::Zones::ClassMethods
  def current; end
  def get_zone(time_zone); end
  def use_zone(time_zone); end
  def zone; end
  def zone=(time_zone); end
  def zone_default; end
  def zone_default=(arg0); end
end
module ActiveSupport::CoreExtensions::DateTime
end
module ActiveSupport::CoreExtensions::DateTime::Calculations
  def advance(options); end
  def ago(seconds); end
  def at_beginning_of_day; end
  def at_midnight; end
  def beginning_of_day; end
  def change(options); end
  def compare_with_coercion(other); end
  def end_of_day; end
  def future?; end
  def getutc; end
  def in(seconds); end
  def midnight; end
  def past?; end
  def seconds_since_midnight; end
  def self.included(base); end
  def since(seconds); end
  def utc; end
  def utc?; end
  def utc_offset; end
end
module ActiveSupport::CoreExtensions::DateTime::Calculations::ClassMethods
  def current; end
  def local_offset; end
end
module ActiveSupport::CoreExtensions::DateTime::Conversions
  def formatted_offset(colon = nil, alternate_utc_string = nil); end
  def readable_inspect; end
  def seconds_since_unix_epoch; end
  def self.append_features(base); end
  def to_date; end
  def to_datetime; end
  def to_f; end
  def to_formatted_s(format = nil); end
  def to_i; end
  def to_time; end
end
class DateTime < Date
  def <=>(other); end
  def as_json(options = nil); end
  def compare_without_coercion(arg0); end
  def default_inspect; end
  def inspect; end
  def to_default_s; end
  extend ActiveSupport::CoreExtensions::DateTime::Calculations::ClassMethods
  include ActiveSupport::CoreExtensions::DateTime::Calculations
  include ActiveSupport::CoreExtensions::DateTime::Conversions
  include ActiveSupport::CoreExtensions::Time::Behavior
  include ActiveSupport::CoreExtensions::Time::Zones
end
class NilClass
  def as_json(options = nil); end
  def blank?; end
  def duplicable?; end
  def id; end
  def method_missing(method, *args, &block); end
  def raise_nil_warning_for(class_name = nil, selector = nil, with_caller = nil); end
  def try(*args); end
end
class FalseClass
  def as_json(options = nil); end
  def blank?; end
  def duplicable?; end
end
class TrueClass
  def as_json(options = nil); end
  def blank?; end
  def duplicable?; end
end
class Symbol
  def as_json(options = nil); end
  def duplicable?; end
end
class Numeric
  def as_json(options = nil); end
  def blank?; end
  def duplicable?; end
  def to_json(options = nil); end
  include ActiveSupport::CoreExtensions::Numeric::Bytes
  include ActiveSupport::CoreExtensions::Numeric::Conversions
  include ActiveSupport::CoreExtensions::Numeric::Time
end
class ActiveSupport::OrderedHash < Hash
  def to_yaml(opts = nil); end
  def to_yaml_type; end
end
module Enumerable
  def as_json(options = nil); end
  def exclude?(object); end
  def index_by; end
  def many?(&block); end
end
class Exception
  def application_backtrace; end
  def clean_backtrace; end
  def clean_message; end
  def framework_backtrace; end
  include ActiveSupport::Dependencies::Blamable
end
module ActiveSupport::CoreExtensions::File
end
module ActiveSupport::CoreExtensions::File::Atomic
  def atomic_write(file_name, temp_dir = nil); end
end
class File < IO
  extend ActiveSupport::CoreExtensions::File::Atomic
end
module ActiveSupport::CoreExtensions::Float
end
module ActiveSupport::CoreExtensions::Float::Rounding
  def round_with_precision(precision = nil); end
  def self.included(base); end
end
module ActiveSupport::CoreExtensions::Float::Time
  def month; end
  def months; end
  def months_without_deprecation; end
  def year; end
  def years; end
  def years_without_deprecation; end
end
class Float < Numeric
  def round_without_precision(*arg0); end
  def to_json(options = nil); end
  include ActiveSupport::CoreExtensions::Float::Rounding
  include ActiveSupport::CoreExtensions::Float::Time
end
module ActiveSupport::CoreExtensions::Hash
end
module ActiveSupport::CoreExtensions::Hash::Keys
  def assert_valid_keys(*valid_keys); end
  def stringify_keys!; end
  def stringify_keys; end
  def symbolize_keys!; end
  def symbolize_keys; end
  def to_options!; end
  def to_options; end
end
class HashWithIndifferentAccess < Hash
  def []=(key, value); end
  def convert_key(key); end
  def convert_value(value); end
  def default(key = nil); end
  def delete(key); end
  def dup; end
  def fetch(key, *extras); end
  def has_key?(key); end
  def include?(key); end
  def initialize(constructor = nil); end
  def key?(key); end
  def member?(key); end
  def merge!(other_hash); end
  def merge(hash); end
  def regular_update(arg0); end
  def regular_writer(arg0, arg1); end
  def reverse_merge(other_hash); end
  def stringify_keys!; end
  def symbolize_keys!; end
  def to_hash; end
  def to_options!; end
  def update(other_hash); end
  def values_at(*indices); end
end
module ActiveSupport::CoreExtensions::Hash::IndifferentAccess
  def with_indifferent_access; end
end
module ActiveSupport::CoreExtensions::Hash::DeepMerge
  def deep_merge!(other_hash); end
  def deep_merge(other_hash); end
end
module ActiveSupport::CoreExtensions::Hash::ReverseMerge
  def reverse_merge!(other_hash); end
  def reverse_merge(other_hash); end
  def reverse_update(other_hash); end
end
module ActiveSupport::CoreExtensions::Hash::Conversions
  def rename_key(key, options = nil); end
  def self.included(klass); end
  def to_param(namespace = nil); end
  def to_query(namespace = nil); end
  def to_xml(options = nil); end
end
module ActiveSupport::CoreExtensions::Hash::Conversions::FileLike
  def content_type; end
  def content_type=(arg0); end
  def original_filename; end
  def original_filename=(arg0); end
end
class ActiveSupport::CoreExtensions::Hash::Conversions::DisallowedType < StandardError
  def initialize(type); end
end
module ActiveSupport::CoreExtensions::Hash::Conversions::ClassMethods
  def from_trusted_xml(xml); end
  def from_xml(xml, disallowed_types = nil); end
  def typecast_xml_value(value, disallowed_types = nil); end
  def unrename_keys(params); end
end
module ActiveSupport::CoreExtensions::Hash::Diff
  def diff(h2); end
end
module ActiveSupport::CoreExtensions::Hash::Slice
  def slice!(*keys); end
  def slice(*keys); end
end
module ActiveSupport::CoreExtensions::Hash::Except
  def except!(*keys); end
  def except(*keys); end
end
class Hash
  def as_json(options = nil); end
  def blank?; end
  def to_json(options = nil); end
  extend ActiveSupport::CoreExtensions::Hash::Conversions::ClassMethods
  include ActiveSupport::CoreExtensions::Hash::Conversions
  include ActiveSupport::CoreExtensions::Hash::DeepMerge
  include ActiveSupport::CoreExtensions::Hash::Diff
  include ActiveSupport::CoreExtensions::Hash::Except
  include ActiveSupport::CoreExtensions::Hash::IndifferentAccess
  include ActiveSupport::CoreExtensions::Hash::Keys
  include ActiveSupport::CoreExtensions::Hash::ReverseMerge
  include ActiveSupport::CoreExtensions::Hash::Slice
end
module ActiveSupport::CoreExtensions::Integer
end
module ActiveSupport::CoreExtensions::Integer::EvenOdd
  def multiple_of?(number); end
end
module ActiveSupport::CoreExtensions::String
end
module ActiveSupport::CoreExtensions::String::Inflections
  def camelcase(first_letter = nil); end
  def camelize(first_letter = nil); end
  def classify; end
  def constantize; end
  def dasherize; end
  def demodulize; end
  def foreign_key(separate_class_name_and_id_with_underscore = nil); end
  def humanize; end
  def parameterize(sep = nil); end
  def pluralize; end
  def singularize; end
  def tableize; end
  def titlecase; end
  def titleize; end
  def underscore; end
end
module ActiveSupport::Inflector
  def camelize(lower_case_and_underscored_word, first_letter_in_uppercase = nil); end
  def classify(table_name); end
  def constantize(camel_cased_word); end
  def dasherize(underscored_word); end
  def demodulize(class_name_in_module); end
  def foreign_key(class_name, separate_class_name_and_id_with_underscore = nil); end
  def humanize(lower_case_and_underscored_word); end
  def inflections(&block); end
  def ordinalize(number); end
  def parameterize(string, sep = nil); end
  def pluralize(word); end
  def singularize(word); end
  def tableize(class_name); end
  def titleize(word); end
  def transliterate(string); end
  def underscore(camel_cased_word); end
  extend ActiveSupport::Inflector
end
class ActiveSupport::Inflector::Inflections
  def clear(scope = nil); end
  def human(rule, replacement); end
  def humans; end
  def initialize; end
  def irregular(singular, plural); end
  def plural(rule, replacement); end
  def plurals; end
  def self.allocate; end
  def self.instance; end
  def self.new(*arg0); end
  def singular(rule, replacement); end
  def singulars; end
  def uncountable(*words); end
  def uncountables; end
  extend Singleton::SingletonClassMethods
  include Singleton
end
module ActiveSupport::CoreExtensions::Integer::Inflections
  def ordinalize; end
end
module ActiveSupport::CoreExtensions::Integer::Time
  def month; end
  def months; end
  def year; end
  def years; end
end
class MissingSourceFile < LoadError
  def initialize(message, path); end
  def is_missing?(path); end
  def path; end
  def self.from_message(message); end
end
module ActiveSupport::CoreExtensions::LoadErrorExtensions
end
module ActiveSupport::CoreExtensions::LoadErrorExtensions::LoadErrorClassMethods
  def new(*args); end
end
class LoadError < ScriptError
  extend ActiveSupport::CoreExtensions::LoadErrorExtensions::LoadErrorClassMethods
end
class Logger
  def around_debug(before_message, after_message, &block); end
  def around_error(before_message, after_message, &block); end
  def around_fatal(before_message, after_message, &block); end
  def around_info(before_message, after_message, &block); end
  def old_datetime_format; end
  def old_datetime_format=(datetime_format); end
  def old_format_message(severity, datetime, progname, msg); end
  def old_formatter; end
  def self.define_around_helper(level); end
  def self.silencer; end
  def self.silencer=(obj); end
  def silence(temporary_level = nil); end
  def silencer; end
  def silencer=(obj); end
end
class Logger::SimpleFormatter < Logger::Formatter
  def call(severity, timestamp, progname, msg); end
end
module ActiveSupport::CoreExtensions::Module
  def alias_attribute(new_name, old_name); end
  def alias_method_chain(target, feature); end
  def local_constant_names; end
  def local_constants; end
  def model_name; end
  def parent; end
  def parent_name; end
  def parents; end
end
class ActiveSupport::ModelName < String
  def cache_key; end
  def collection; end
  def element; end
  def initialize(name); end
  def partial_path; end
  def plural; end
  def singular; end
end
class NameError < StandardError
  def missing_name; end
  def missing_name?(name); end
end
module ActiveSupport::CoreExtensions::Numeric
end
module ActiveSupport::CoreExtensions::Numeric::Time
  def ago(time = nil); end
  def day; end
  def days; end
  def fortnight; end
  def fortnights; end
  def from_now(time = nil); end
  def hour; end
  def hours; end
  def minute; end
  def minutes; end
  def second; end
  def seconds; end
  def since(time = nil); end
  def until(time = nil); end
  def week; end
  def weeks; end
end
module ActiveSupport::CoreExtensions::Numeric::Bytes
  def byte; end
  def bytes; end
  def exabyte; end
  def exabytes; end
  def gigabyte; end
  def gigabytes; end
  def kilobyte; end
  def kilobytes; end
  def megabyte; end
  def megabytes; end
  def petabyte; end
  def petabytes; end
  def terabyte; end
  def terabytes; end
end
module ActiveSupport::CoreExtensions::Numeric::Conversions
  def to_utc_offset_s(colon = nil); end
end
module ActiveSupport::Deprecation
  def behavior; end
  def behavior=(obj); end
  def debug; end
  def debug=(obj); end
  def self.behavior; end
  def self.behavior=(obj); end
  def self.debug; end
  def self.debug=(obj); end
  def self.default_behavior; end
  def self.deprecation_caller_message(callstack); end
  def self.deprecation_message(callstack, message = nil); end
  def self.extract_callstack(callstack); end
  def self.silence; end
  def self.silenced=(arg0); end
  def self.silenced?; end
  def self.warn(message = nil, callstack = nil); end
end
module ActiveSupport::Deprecation::ClassMethods
  def deprecate(*method_names); end
  def deprecated_method_warning(method_name, message = nil); end
  def deprecation_horizon; end
end
class ActiveSupport::Deprecation::DeprecationProxy
  def inspect; end
  def method_missing(called, *args, &block); end
  def self.new(*args, &block); end
end
class ActiveSupport::Deprecation::DeprecatedObjectProxy < ActiveSupport::Deprecation::DeprecationProxy
  def initialize(object, message); end
  def target; end
  def warn(callstack, called, args); end
end
class ActiveSupport::Deprecation::DeprecatedInstanceVariableProxy < ActiveSupport::Deprecation::DeprecationProxy
  def initialize(instance, method, var = nil); end
  def target; end
  def warn(callstack, called, args); end
end
class ActiveSupport::Deprecation::DeprecatedConstantProxy < ActiveSupport::Deprecation::DeprecationProxy
  def class; end
  def initialize(old_const, new_const); end
  def target; end
  def warn(callstack, called, args); end
end
module ActiveSupport::CoreExtensions::Pathname
end
module ActiveSupport::CoreExtensions::Pathname::CleanWithin
  def clean_within(string); end
end
class Pathname
  extend ActiveSupport::CoreExtensions::Pathname::CleanWithin
end
class Proc
  def bind(object); end
end
module ActiveSupport::CoreExtensions::Range
end
module ActiveSupport::CoreExtensions::Range::Conversions
  def self.included(base); end
  def to_formatted_s(format = nil); end
end
module ActiveSupport::CoreExtensions::Range::Overlaps
  def overlaps?(other); end
end
module ActiveSupport::CoreExtensions::Range::IncludeRange
  def include_with_range?(value); end
  def self.included(base); end
end
module ActiveSupport::CoreExtensions::Range::BlocklessStep
  def self.included(base); end
  def step_with_blockless(value = nil, &block); end
end
class Range
  def include_without_range?(arg0); end
  def step_without_blockless(*arg0); end
  def to_default_s; end
  include ActiveSupport::CoreExtensions::Range::BlocklessStep
  include ActiveSupport::CoreExtensions::Range::Conversions
  include ActiveSupport::CoreExtensions::Range::IncludeRange
  include ActiveSupport::CoreExtensions::Range::Overlaps
end
module ActiveSupport::CoreExtensions::String::Conversions
  def to_date; end
  def to_datetime; end
  def to_time(form = nil); end
end
module ActiveSupport::CoreExtensions::String::Access
  def at(position); end
  def first(limit = nil); end
  def from(position); end
  def last(limit = nil); end
  def to(position); end
end
module ActiveSupport::CoreExtensions::String::StartsEndsWith
  def ends_with?(suffix); end
  def self.append_features(base); end
  def starts_with?(prefix); end
end
module ActiveSupport::CoreExtensions::String::Iterators
  def each_char; end
  def self.append_features(base); end
end
module ActiveSupport::CoreExtensions::String::Multibyte
  def is_utf8?; end
  def mb_chars; end
end
module ActiveSupport::CoreExtensions::String::Filters
  def squish!; end
  def squish; end
end
module ActiveSupport::CoreExtensions::String::Behavior
  def acts_like_string?; end
end
class ERB
end
module ERB::Util
  def j(s); end
  def json_escape(s); end
  def self.j(s); end
  def self.json_escape(s); end
end
class ActiveSupport::SafeBuffer < String
  def +(other); end
  def html_safe; end
  def html_safe?; end
  def to_s; end
  def to_yaml(*args); end
end
class ActiveSupport::BasicObject < BasicObject
  def raise(*args); end
end
class ActiveSupport::Duration < ActiveSupport::BasicObject
  def +(other); end
  def -(other); end
  def -@; end
  def ==(other); end
  def ago(time = nil); end
  def from_now(time = nil); end
  def initialize(value, parts); end
  def inspect; end
  def is_a?(klass); end
  def method_missing(method, *args, &block); end
  def parts; end
  def parts=(arg0); end
  def self.===(other); end
  def since(time = nil); end
  def sum(sign, time = nil); end
  def until(time = nil); end
  def value; end
  def value=(arg0); end
end
module ActiveSupport::CoreExtensions::Time::Calculations
  def advance(options); end
  def ago(seconds); end
  def at_beginning_of_day; end
  def at_beginning_of_month; end
  def at_beginning_of_quarter; end
  def at_beginning_of_week; end
  def at_beginning_of_year; end
  def at_end_of_month; end
  def at_end_of_quarter; end
  def at_end_of_week; end
  def at_end_of_year; end
  def at_midnight; end
  def beginning_of_day; end
  def beginning_of_month; end
  def beginning_of_quarter; end
  def beginning_of_week; end
  def beginning_of_year; end
  def change(options); end
  def compare_with_coercion(other); end
  def end_of_day; end
  def end_of_month; end
  def end_of_quarter; end
  def end_of_week; end
  def end_of_year; end
  def future?; end
  def in(seconds); end
  def last_month; end
  def last_year; end
  def midnight; end
  def minus_with_coercion(other); end
  def minus_with_duration(other); end
  def monday; end
  def months_ago(months); end
  def months_since(months); end
  def next_month; end
  def next_week(day = nil); end
  def next_year; end
  def past?; end
  def plus_with_duration(other); end
  def prev_month; end
  def prev_year; end
  def seconds_since_midnight; end
  def self.included(base); end
  def since(seconds); end
  def today?; end
  def tomorrow; end
  def years_ago(years); end
  def years_since(years); end
  def yesterday; end
end
module ActiveSupport::CoreExtensions::Time::Calculations::ClassMethods
  def ===(other); end
  def days_in_month(month, year = nil); end
  def local_time(*args); end
  def time_with_datetime_fallback(utc_or_local, year, month = nil, day = nil, hour = nil, min = nil, sec = nil, usec = nil); end
  def utc_time(*args); end
end
module ActiveSupport::CoreExtensions::Time::Conversions
  def formatted_offset(colon = nil, alternate_utc_string = nil); end
  def self.included(base); end
  def to_date; end
  def to_datetime; end
  def to_formatted_s(format = nil); end
  def to_time; end
end
class Time
  def as_json(options = nil); end
  def compare_without_coercion(arg0); end
  def minus_without_coercion(other); end
  def minus_without_duration(arg0); end
  def plus_without_duration(arg0); end
  def to_default_s; end
  extend ActiveSupport::CoreExtensions::Time::Calculations::ClassMethods
  extend ActiveSupport::CoreExtensions::Time::Zones::ClassMethods
  include ActiveSupport::CoreExtensions::Time::Behavior
  include ActiveSupport::CoreExtensions::Time::Calculations
  include ActiveSupport::CoreExtensions::Time::Conversions
  include ActiveSupport::CoreExtensions::Time::Zones
end
module ActiveSupport::Dependencies
  def associate_with(file_name); end
  def autoload_module!(into, const_name, qualified_name, path_suffix); end
  def autoload_once_paths; end
  def autoload_once_paths=(obj); end
  def autoload_paths; end
  def autoload_paths=(obj); end
  def autoloadable_module?(path_suffix); end
  def autoloaded?(desc); end
  def autoloaded_constants; end
  def autoloaded_constants=(obj); end
  def clear; end
  def constant_watch_stack; end
  def constant_watch_stack=(obj); end
  def constant_watch_stack_mutex; end
  def constant_watch_stack_mutex=(obj); end
  def depend_on(file_name, swallow_load_errors = nil); end
  def explicitly_unloadable_constants; end
  def explicitly_unloadable_constants=(obj); end
  def history; end
  def history=(obj); end
  def hook!; end
  def load?; end
  def load_file(path, const_paths = nil); end
  def load_missing_constant(from_mod, const_name); end
  def load_once_path?(path); end
  def loadable_constants_for_path(path, bases = nil); end
  def loaded; end
  def loaded=(obj); end
  def log(msg); end
  def log_activity; end
  def log_activity=(obj); end
  def log_call(*args); end
  def logger; end
  def logger=(obj); end
  def mark_for_unload(const_desc); end
  def mechanism; end
  def mechanism=(obj); end
  def new_constants_in(*descs); end
  def qualified_const_defined?(path); end
  def qualified_name_for(mod, name); end
  def remove_constant(const); end
  def remove_unloadable_constants!; end
  def require_or_load(file_name, const_path = nil); end
  def search_for_file(path_suffix); end
  def self.autoload_once_paths; end
  def self.autoload_once_paths=(obj); end
  def self.autoload_paths; end
  def self.autoload_paths=(obj); end
  def self.autoloaded_constants; end
  def self.autoloaded_constants=(obj); end
  def self.constant_watch_stack; end
  def self.constant_watch_stack=(obj); end
  def self.constant_watch_stack_mutex; end
  def self.constant_watch_stack_mutex=(obj); end
  def self.explicitly_unloadable_constants; end
  def self.explicitly_unloadable_constants=(obj); end
  def self.history; end
  def self.history=(obj); end
  def self.load_once_paths; end
  def self.load_once_paths=(paths); end
  def self.load_paths; end
  def self.load_paths=(paths); end
  def self.loaded; end
  def self.loaded=(obj); end
  def self.log_activity; end
  def self.log_activity=(obj); end
  def self.logger; end
  def self.logger=(obj); end
  def self.mechanism; end
  def self.mechanism=(obj); end
  def self.warnings_on_first_load; end
  def self.warnings_on_first_load=(obj); end
  def to_constant_name(desc); end
  def unhook!; end
  def uninherited_const_defined?(mod, const); end
  def warnings_on_first_load; end
  def warnings_on_first_load=(obj); end
  def will_unload?(const_desc); end
  extend ActiveSupport::Dependencies
end
module ActiveSupport::Dependencies::ModuleConstMissing
  def const_missing_with_dependencies(class_id); end
  def self.excluded(base); end
  def self.included(base); end
  def unloadable(const_desc = nil); end
end
module ActiveSupport::Dependencies::ClassConstMissing
  def const_missing(const_name); end
end
module ActiveSupport::Dependencies::Loadable
  def load_with_new_constant_marking(file, *extras); end
  def require(file, *extras); end
  def require_association(file_name); end
  def require_dependency(file_name); end
  def require_or_load(file_name); end
  def self.excluded(base); end
  def self.included(base); end
  def unloadable(const_desc); end
end
module ActiveSupport::Dependencies::Blamable
  def blame_file!(file); end
  def blamed_files; end
  def copy_blame!(exc); end
  def describe_blame; end
end
class ActiveSupport::Dependencies::LoadingModule
  def self.root(*args); end
end
module ActiveSupport::JSON
  def self.backend; end
  def self.backend=(name); end
  def self.decode(*args, &block); end
  def self.encode(*args, &block); end
  def self.parse_error; end
  def self.set_default_backend; end
  def self.with_backend(name); end
end
class ActiveSupport::JSON::Variable < String
  def to_json(options = nil); end
end
class Regexp
  def as_json(options = nil); end
  def to_json(options = nil); end
end
module ActiveSupport::JSON::Encoding
  def self.encode(value, options = nil); end
  def self.escape(string); end
  def self.escape_html_entities_in_json; end
  def self.escape_html_entities_in_json=(value); end
  def self.escape_regex; end
  def self.escape_regex=(arg0); end
  def self.use_standard_json_time_format; end
  def self.use_standard_json_time_format=(arg0); end
end
class ActiveSupport::JSON::Encoding::CircularReferenceError < StandardError
end
module ActiveSupport::Callbacks
  def run_callbacks(kind, options = nil, &block); end
  def self.included(base); end
end
class ActiveSupport::Callbacks::CallbackChain < Array
  def delete(callback); end
  def extract_options(*methods, &block); end
  def find(callback, &block); end
  def replace_or_append!(chain); end
  def run(object, options = nil, &terminator); end
  def self.build(kind, *methods, &block); end
  def self.extract_options(*methods, &block); end
end
class ActiveSupport::Callbacks::Callback
  def ==(other); end
  def call(*args, &block); end
  def dup; end
  def eql?(other); end
  def evaluate_method(method, *args, &block); end
  def hash; end
  def identifier; end
  def initialize(kind, method, options = nil); end
  def kind; end
  def method; end
  def options; end
  def should_run_callback?(*args); end
end
module ActiveSupport::Callbacks::ClassMethods
  def define_callbacks(*callbacks); end
end
module ActiveSupport::Cache
  def self.expand_cache_key(key, namespace = nil); end
  def self.lookup_store(*store_option); end
end
module ActiveSupport::Cache::Strategy
end
class ActiveSupport::Cache::Store
  def decrement(key, amount = nil); end
  def delete(key, options = nil); end
  def delete_matched(matcher, options = nil); end
  def exist?(key, options = nil); end
  def expires_in(options); end
  def fetch(key, options = nil); end
  def increment(key, amount = nil); end
  def log(operation, key, options); end
  def logger; end
  def logger=(obj); end
  def logger_off; end
  def logger_off?; end
  def mute; end
  def read(key, options = nil); end
  def self.logger; end
  def self.logger=(obj); end
  def silence!; end
  def silence; end
  def silence?; end
  def write(key, value, options = nil); end
end
class ActiveSupport::Cache::MemoryStore < ActiveSupport::Cache::Store
  def clear; end
  def delete(name, options = nil); end
  def delete_matched(matcher, options = nil); end
  def exist?(name, options = nil); end
  def initialize; end
  def read(name, options = nil); end
  def read_multi(*names); end
  def write(name, value, options = nil); end
end
module ActiveSupport::Multibyte
  def default_normalization_form; end
  def default_normalization_form=(obj); end
  def self.clean(string); end
  def self.default_normalization_form; end
  def self.default_normalization_form=(obj); end
  def self.proxy_class; end
  def self.proxy_class=(klass); end
  def self.valid_character; end
  def self.verify!(string); end
  def self.verify(string); end
end
class ActiveSupport::Multibyte::Chars
  def +(other); end
  def <=>(other); end
  def =~(other); end
  def [](*args); end
  def []=(*args); end
  def acts_like_string?; end
  def apply_mapping(mapping); end
  def capitalize!(*args); end
  def capitalize; end
  def center(integer, padstr = nil); end
  def chars(string); end
  def compose; end
  def decompose; end
  def downcase!(*args); end
  def downcase; end
  def g_length; end
  def include?(other); end
  def index(needle, offset = nil); end
  def initialize(string); end
  def insert(offset, fragment); end
  def justify(integer, way, padstr = nil); end
  def length; end
  def ljust(integer, padstr = nil); end
  def lstrip!(*args); end
  def lstrip; end
  def method_missing(method, *args, &block); end
  def normalize(form = nil); end
  def ord; end
  def respond_to?(method, include_private = nil); end
  def reverse!(*args); end
  def reverse; end
  def rindex(needle, offset = nil); end
  def rjust(integer, padstr = nil); end
  def rstrip!(*args); end
  def rstrip; end
  def self.codepoints_to_pattern(array_of_codepoints); end
  def self.compose_codepoints(codepoints); end
  def self.consumes?(string); end
  def self.decompose_codepoints(type, codepoints); end
  def self.g_pack(unpacked); end
  def self.g_unpack(string); end
  def self.in_char_class?(codepoint, classes); end
  def self.padding(padsize, padstr = nil); end
  def self.reorder_characters(codepoints); end
  def self.tidy_bytes(string); end
  def self.u_unpack(string); end
  def self.wants?(string); end
  def size; end
  def slice!(*args); end
  def slice(*args); end
  def split(*args); end
  def strip!(*args); end
  def strip; end
  def tidy_bytes!(*args); end
  def tidy_bytes; end
  def to_s; end
  def to_str; end
  def translate_offset(byte_offset); end
  def upcase!(*args); end
  def upcase; end
  def wrapped_string; end
  include Comparable
end
class ActiveSupport::Multibyte::EncodingError < StandardError
end
class ActiveSupport::Multibyte::Codepoint
  def code; end
  def code=(arg0); end
  def combining_class; end
  def combining_class=(arg0); end
  def decomp_mapping; end
  def decomp_mapping=(arg0); end
  def decomp_type; end
  def decomp_type=(arg0); end
  def lowercase_mapping; end
  def lowercase_mapping=(arg0); end
  def uppercase_mapping; end
  def uppercase_mapping=(arg0); end
end
class ActiveSupport::Multibyte::UnicodeDatabase
  def boundary; end
  def boundary=(arg0); end
  def codepoints; end
  def codepoints=(arg0); end
  def composition_exclusion; end
  def composition_exclusion=(arg0); end
  def composition_map; end
  def composition_map=(arg0); end
  def cp1252; end
  def cp1252=(arg0); end
  def initialize; end
  def load; end
  def self.dirname; end
  def self.filename; end
end
module ActiveSupport::Memoizable
  def memoize(*symbols); end
  def self.memoized_ivar_for(symbol); end
end
module ActiveSupport::Memoizable::InstanceMethods
  def flush_cache(*syms, &block); end
  def freeze_with_memoizable; end
  def memoize_all; end
  def prime_cache(*syms); end
  def self.included(base); end
  def unmemoize_all; end
end
module ActiveSupport::Rescuable
  def handler_for_rescue(exception); end
  def rescue_with_handler(exception); end
  def self.included(base); end
end
module ActiveSupport::Rescuable::ClassMethods
  def rescue_from(*klasses, &block); end
end
class ActiveSupport::BufferedLogger
  def add(severity, message = nil, progname = nil, &block); end
  def auto_flush; end
  def auto_flushing; end
  def auto_flushing=(period); end
  def buffer; end
  def clear_buffer; end
  def close; end
  def debug(message = nil, progname = nil, &block); end
  def debug?; end
  def error(message = nil, progname = nil, &block); end
  def error?; end
  def fatal(message = nil, progname = nil, &block); end
  def fatal?; end
  def flush; end
  def info(message = nil, progname = nil, &block); end
  def info?; end
  def initialize(log, level = nil); end
  def level; end
  def level=(arg0); end
  def self.silencer; end
  def self.silencer=(obj); end
  def silence(temporary_level = nil); end
  def silencer; end
  def silencer=(obj); end
  def unknown(message = nil, progname = nil, &block); end
  def unknown?; end
  def warn(message = nil, progname = nil, &block); end
  def warn?; end
  include ActiveSupport::BufferedLogger::Severity
end
module ActiveSupport::BufferedLogger::Severity
end
class ActiveSupport::TimeZone
  def <=>(zone); end
  def =~(re); end
  def at(secs); end
  def formatted_offset(colon = nil, alternate_utc_string = nil); end
  def initialize(name, utc_offset = nil, tzinfo = nil); end
  def local(*args); end
  def local_to_utc(time, dst = nil); end
  def name; end
  def now; end
  def parse(str, now = nil); end
  def period_for_local(time, dst = nil); end
  def period_for_utc(time); end
  def self.[](arg); end
  def self.all; end
  def self.create(*arg0); end
  def self.find_tzinfo(name); end
  def self.lookup(name); end
  def self.new(name); end
  def self.us_zones; end
  def self.zones_map; end
  def to_s; end
  def today; end
  def tzinfo; end
  def utc_offset; end
  def utc_to_local(time); end
  include Comparable
end
module TZInfo
end
module TZInfo::RubyCoreSupport
  def self.datetime_new!(ajd = nil, of = nil, sg = nil); end
  def self.rational_new!(numerator, denominator = nil); end
end
module TZInfo::OffsetRationals
  def rational_for_offset(offset); end
  def self.rational_for_offset(offset); end
end
class TZInfo::TimeOrDateTime
  def +(seconds); end
  def -(seconds); end
  def <=>(timeOrDateTime); end
  def add_with_convert(seconds); end
  def day; end
  def eql?(todt); end
  def hash; end
  def hour; end
  def initialize(timeOrDateTime); end
  def inspect; end
  def mday; end
  def min; end
  def mon; end
  def month; end
  def sec; end
  def self.wrap(timeOrDateTime); end
  def to_datetime; end
  def to_i; end
  def to_orig; end
  def to_s; end
  def to_time; end
  def year; end
  include Comparable
end
class TZInfo::TimezonePeriod
  def ==(p); end
  def abbreviation; end
  def dst?; end
  def end_transition; end
  def eql?(p); end
  def hash; end
  def initialize(start_transition, end_transition, offset = nil); end
  def inspect; end
  def local_after_start?(local); end
  def local_before_end?(local); end
  def local_end; end
  def local_start; end
  def offset; end
  def start_transition; end
  def std_offset; end
  def to_local(utc); end
  def to_utc(local); end
  def utc_after_start?(utc); end
  def utc_before_end?(utc); end
  def utc_end; end
  def utc_offset; end
  def utc_start; end
  def utc_total_offset; end
  def utc_total_offset_rational; end
  def valid_for_local?(local); end
  def valid_for_utc?(utc); end
  def zone_identifier; end
end
class TZInfo::AmbiguousTime < StandardError
end
class TZInfo::PeriodNotFound < StandardError
end
class TZInfo::InvalidTimezoneIdentifier < StandardError
end
class TZInfo::UnknownTimezone < StandardError
end
class TZInfo::Timezone
  def <=>(tz); end
  def _dump(limit); end
  def current_period; end
  def current_period_and_time; end
  def current_time_and_period; end
  def eql?(tz); end
  def friendly_identifier(skip_first_part = nil); end
  def hash; end
  def identifier; end
  def inspect; end
  def local_to_utc(local, dst = nil); end
  def name; end
  def now; end
  def period_for_local(local, dst = nil); end
  def period_for_utc(utc); end
  def periods_for_local(local); end
  def self._load(data); end
  def self.all; end
  def self.all_country_zone_identifiers; end
  def self.all_country_zones; end
  def self.all_data_zone_identifiers; end
  def self.all_data_zones; end
  def self.all_identifiers; end
  def self.all_linked_zone_identifiers; end
  def self.all_linked_zones; end
  def self.get(identifier); end
  def self.get_proxies(identifiers); end
  def self.get_proxy(identifier); end
  def self.load_index; end
  def self.new(identifier = nil); end
  def self.us_zone_identifiers; end
  def self.us_zones; end
  def strftime(format, utc = nil); end
  def to_s; end
  def utc_to_local(utc); end
  include Comparable
end
class TZInfo::InfoTimezone < TZInfo::Timezone
  def identifier; end
  def info; end
  def self.new(info); end
  def setup(info); end
end
class TZInfo::DataTimezone < TZInfo::InfoTimezone
  def period_for_utc(utc); end
  def periods_for_local(local); end
end
class TZInfo::LinkedTimezone < TZInfo::InfoTimezone
  def period_for_utc(utc); end
  def periods_for_local(local); end
  def setup(info); end
end
class TZInfo::TimezoneInfo
  def identifier; end
  def initialize(identifier); end
  def inspect; end
end
class TZInfo::TimezoneOffsetInfo
  def ==(toi); end
  def abbreviation; end
  def dst?; end
  def eql?(toi); end
  def hash; end
  def initialize(utc_offset, std_offset, abbreviation); end
  def inspect; end
  def std_offset; end
  def to_local(utc); end
  def to_utc(local); end
  def utc_offset; end
  def utc_total_offset; end
end
class TZInfo::TimezoneTransitionInfo
  def ==(tti); end
  def at; end
  def denominator; end
  def eql?(tti); end
  def hash; end
  def initialize(offset, previous_offset, numerator_or_time, denominator = nil); end
  def inspect; end
  def local_end; end
  def local_start; end
  def numerator_or_time; end
  def offset; end
  def previous_offset; end
end
class TZInfo::NoOffsetsDefined < StandardError
end
class TZInfo::DataTimezoneInfo < TZInfo::TimezoneInfo
  def initialize(identifier); end
  def offset(id, utc_offset, std_offset, abbreviation); end
  def period_for_utc(utc); end
  def periods_for_local(local); end
  def transition(year, month, offset_id, numerator_or_time, denominator = nil); end
  def transition_after_start(index); end
  def transition_before_end(index); end
  def transition_index(year, month); end
end
class TZInfo::LinkedTimezoneInfo < TZInfo::TimezoneInfo
  def initialize(identifier, link_to_identifier); end
  def inspect; end
  def link_to_identifier; end
end
module TZInfo::TimezoneDefinition
  def self.append_features(base); end
end
module TZInfo::TimezoneDefinition::ClassMethods
  def get; end
  def linked_timezone(identifier, link_to_identifier); end
  def timezone(identifier); end
end
module TZInfo::Definitions
end
module TZInfo::Definitions::Pacific
end
module TZInfo::Definitions::Pacific::Midway
  extend TZInfo::TimezoneDefinition::ClassMethods
  include TZInfo::TimezoneDefinition
end
module TZInfo::Definitions::Pacific::Pago_Pago
  extend TZInfo::TimezoneDefinition::ClassMethods
  include TZInfo::TimezoneDefinition
end
module TZInfo::Definitions::Pacific::Honolulu
  extend TZInfo::TimezoneDefinition::ClassMethods
  include TZInfo::TimezoneDefinition
end
module TZInfo::Definitions::America
end
module TZInfo::Definitions::America::Juneau
  extend TZInfo::TimezoneDefinition::ClassMethods
  include TZInfo::TimezoneDefinition
end
module TZInfo::Definitions::America::Los_Angeles
  extend TZInfo::TimezoneDefinition::ClassMethods
  include TZInfo::TimezoneDefinition
end
module TZInfo::Definitions::America::Tijuana
  extend TZInfo::TimezoneDefinition::ClassMethods
  include TZInfo::TimezoneDefinition
end
module TZInfo::Definitions::America::Denver
  extend TZInfo::TimezoneDefinition::ClassMethods
  include TZInfo::TimezoneDefinition
end
module TZInfo::Definitions::America::Chihuahua
  extend TZInfo::TimezoneDefinition::ClassMethods
  include TZInfo::TimezoneDefinition
end
module TZInfo::Definitions::America::Mazatlan
  extend TZInfo::TimezoneDefinition::ClassMethods
  include TZInfo::TimezoneDefinition
end
module TZInfo::Definitions::America::Phoenix
  extend TZInfo::TimezoneDefinition::ClassMethods
  include TZInfo::TimezoneDefinition
end
module TZInfo::Definitions::America::Chicago
  extend TZInfo::TimezoneDefinition::ClassMethods
  include TZInfo::TimezoneDefinition
end
module TZInfo::Definitions::America::Regina
  extend TZInfo::TimezoneDefinition::ClassMethods
  include TZInfo::TimezoneDefinition
end
module TZInfo::Definitions::America::Mexico_City
  extend TZInfo::TimezoneDefinition::ClassMethods
  include TZInfo::TimezoneDefinition
end
module TZInfo::Definitions::America::Monterrey
  extend TZInfo::TimezoneDefinition::ClassMethods
  include TZInfo::TimezoneDefinition
end
module TZInfo::Definitions::America::Guatemala
  extend TZInfo::TimezoneDefinition::ClassMethods
  include TZInfo::TimezoneDefinition
end
module TZInfo::Definitions::America::New_York
  extend TZInfo::TimezoneDefinition::ClassMethods
  include TZInfo::TimezoneDefinition
end
module TZInfo::Definitions::America::Indiana
end
module TZInfo::Definitions::America::Indiana::Indianapolis
  extend TZInfo::TimezoneDefinition::ClassMethods
  include TZInfo::TimezoneDefinition
end
module TZInfo::Definitions::America::Bogota
  extend TZInfo::TimezoneDefinition::ClassMethods
  include TZInfo::TimezoneDefinition
end
module TZInfo::Definitions::America::Lima
  extend TZInfo::TimezoneDefinition::ClassMethods
  include TZInfo::TimezoneDefinition
end
module TZInfo::Definitions::America::Caracas
  extend TZInfo::TimezoneDefinition::ClassMethods
  include TZInfo::TimezoneDefinition
end
module TZInfo::Definitions::America::Halifax
  extend TZInfo::TimezoneDefinition::ClassMethods
  include TZInfo::TimezoneDefinition
end
module TZInfo::Definitions::America::La_Paz
  extend TZInfo::TimezoneDefinition::ClassMethods
  include TZInfo::TimezoneDefinition
end
module TZInfo::Definitions::America::Santiago
  extend TZInfo::TimezoneDefinition::ClassMethods
  include TZInfo::TimezoneDefinition
end
module TZInfo::Definitions::America::St_Johns
  extend TZInfo::TimezoneDefinition::ClassMethods
  include TZInfo::TimezoneDefinition
end
module TZInfo::Definitions::America::Sao_Paulo
  extend TZInfo::TimezoneDefinition::ClassMethods
  include TZInfo::TimezoneDefinition
end
module TZInfo::Definitions::America::Argentina
end
module TZInfo::Definitions::America::Argentina::Buenos_Aires
  extend TZInfo::TimezoneDefinition::ClassMethods
  include TZInfo::TimezoneDefinition
end
module TZInfo::Definitions::America::Argentina::San_Juan
  extend TZInfo::TimezoneDefinition::ClassMethods
  include TZInfo::TimezoneDefinition
end
module TZInfo::Definitions::America::Godthab
  extend TZInfo::TimezoneDefinition::ClassMethods
  include TZInfo::TimezoneDefinition
end
module TZInfo::Definitions::Atlantic
end
module TZInfo::Definitions::Atlantic::South_Georgia
  extend TZInfo::TimezoneDefinition::ClassMethods
  include TZInfo::TimezoneDefinition
end
module TZInfo::Definitions::Atlantic::Azores
  extend TZInfo::TimezoneDefinition::ClassMethods
  include TZInfo::TimezoneDefinition
end
module TZInfo::Definitions::Atlantic::Cape_Verde
  extend TZInfo::TimezoneDefinition::ClassMethods
  include TZInfo::TimezoneDefinition
end
module TZInfo::Definitions::Europe
end
module TZInfo::Definitions::Europe::Dublin
  extend TZInfo::TimezoneDefinition::ClassMethods
  include TZInfo::TimezoneDefinition
end
module TZInfo::Definitions::Europe::Lisbon
  extend TZInfo::TimezoneDefinition::ClassMethods
  include TZInfo::TimezoneDefinition
end
module TZInfo::Definitions::Europe::London
  extend TZInfo::TimezoneDefinition::ClassMethods
  include TZInfo::TimezoneDefinition
end
module TZInfo::Definitions::Africa
end
module TZInfo::Definitions::Africa::Casablanca
  extend TZInfo::TimezoneDefinition::ClassMethods
  include TZInfo::TimezoneDefinition
end
module TZInfo::Definitions::Africa::Monrovia
  extend TZInfo::TimezoneDefinition::ClassMethods
  include TZInfo::TimezoneDefinition
end
module TZInfo::Definitions::Etc
end
module TZInfo::Definitions::Etc::UTC
  extend TZInfo::TimezoneDefinition::ClassMethods
  include TZInfo::TimezoneDefinition
end
module TZInfo::Definitions::Europe::Belgrade
  extend TZInfo::TimezoneDefinition::ClassMethods
  include TZInfo::TimezoneDefinition
end
module TZInfo::Definitions::Europe::Bratislava
  extend TZInfo::TimezoneDefinition::ClassMethods
  include TZInfo::TimezoneDefinition
end
module TZInfo::Definitions::Europe::Prague
  extend TZInfo::TimezoneDefinition::ClassMethods
  include TZInfo::TimezoneDefinition
end
module TZInfo::Definitions::Europe::Budapest
  extend TZInfo::TimezoneDefinition::ClassMethods
  include TZInfo::TimezoneDefinition
end
module TZInfo::Definitions::Europe::Ljubljana
  extend TZInfo::TimezoneDefinition::ClassMethods
  include TZInfo::TimezoneDefinition
end
module TZInfo::Definitions::Europe::Sarajevo
  extend TZInfo::TimezoneDefinition::ClassMethods
  include TZInfo::TimezoneDefinition
end
module TZInfo::Definitions::Europe::Skopje
  extend TZInfo::TimezoneDefinition::ClassMethods
  include TZInfo::TimezoneDefinition
end
module TZInfo::Definitions::Europe::Warsaw
  extend TZInfo::TimezoneDefinition::ClassMethods
  include TZInfo::TimezoneDefinition
end
module TZInfo::Definitions::Europe::Zagreb
  extend TZInfo::TimezoneDefinition::ClassMethods
  include TZInfo::TimezoneDefinition
end
module TZInfo::Definitions::Europe::Brussels
  extend TZInfo::TimezoneDefinition::ClassMethods
  include TZInfo::TimezoneDefinition
end
module TZInfo::Definitions::Europe::Copenhagen
  extend TZInfo::TimezoneDefinition::ClassMethods
  include TZInfo::TimezoneDefinition
end
module TZInfo::Definitions::Europe::Madrid
  extend TZInfo::TimezoneDefinition::ClassMethods
  include TZInfo::TimezoneDefinition
end
module TZInfo::Definitions::Europe::Paris
  extend TZInfo::TimezoneDefinition::ClassMethods
  include TZInfo::TimezoneDefinition
end
module TZInfo::Definitions::Europe::Amsterdam
  extend TZInfo::TimezoneDefinition::ClassMethods
  include TZInfo::TimezoneDefinition
end
module TZInfo::Definitions::Europe::Berlin
  extend TZInfo::TimezoneDefinition::ClassMethods
  include TZInfo::TimezoneDefinition
end
module TZInfo::Definitions::Europe::Rome
  extend TZInfo::TimezoneDefinition::ClassMethods
  include TZInfo::TimezoneDefinition
end
module TZInfo::Definitions::Europe::Stockholm
  extend TZInfo::TimezoneDefinition::ClassMethods
  include TZInfo::TimezoneDefinition
end
module TZInfo::Definitions::Europe::Vienna
  extend TZInfo::TimezoneDefinition::ClassMethods
  include TZInfo::TimezoneDefinition
end
module TZInfo::Definitions::Africa::Algiers
  extend TZInfo::TimezoneDefinition::ClassMethods
  include TZInfo::TimezoneDefinition
end
module TZInfo::Definitions::Europe::Bucharest
  extend TZInfo::TimezoneDefinition::ClassMethods
  include TZInfo::TimezoneDefinition
end
module TZInfo::Definitions::Africa::Cairo
  extend TZInfo::TimezoneDefinition::ClassMethods
  include TZInfo::TimezoneDefinition
end
module TZInfo::Definitions::Europe::Helsinki
  extend TZInfo::TimezoneDefinition::ClassMethods
  include TZInfo::TimezoneDefinition
end
module TZInfo::Definitions::Europe::Kiev
  extend TZInfo::TimezoneDefinition::ClassMethods
  include TZInfo::TimezoneDefinition
end
module TZInfo::Definitions::Europe::Riga
  extend TZInfo::TimezoneDefinition::ClassMethods
  include TZInfo::TimezoneDefinition
end
module TZInfo::Definitions::Europe::Sofia
  extend TZInfo::TimezoneDefinition::ClassMethods
  include TZInfo::TimezoneDefinition
end
module TZInfo::Definitions::Europe::Tallinn
  extend TZInfo::TimezoneDefinition::ClassMethods
  include TZInfo::TimezoneDefinition
end
module TZInfo::Definitions::Europe::Vilnius
  extend TZInfo::TimezoneDefinition::ClassMethods
  include TZInfo::TimezoneDefinition
end
module TZInfo::Definitions::Europe::Athens
  extend TZInfo::TimezoneDefinition::ClassMethods
  include TZInfo::TimezoneDefinition
end
module TZInfo::Definitions::Europe::Istanbul
  extend TZInfo::TimezoneDefinition::ClassMethods
  include TZInfo::TimezoneDefinition
end
module TZInfo::Definitions::Europe::Minsk
  extend TZInfo::TimezoneDefinition::ClassMethods
  include TZInfo::TimezoneDefinition
end
module TZInfo::Definitions::Asia
end
module TZInfo::Definitions::Asia::Jerusalem
  extend TZInfo::TimezoneDefinition::ClassMethods
  include TZInfo::TimezoneDefinition
end
module TZInfo::Definitions::Africa::Harare
  extend TZInfo::TimezoneDefinition::ClassMethods
  include TZInfo::TimezoneDefinition
end
module TZInfo::Definitions::Africa::Johannesburg
  extend TZInfo::TimezoneDefinition::ClassMethods
  include TZInfo::TimezoneDefinition
end
module TZInfo::Definitions::Europe::Moscow
  extend TZInfo::TimezoneDefinition::ClassMethods
  include TZInfo::TimezoneDefinition
end
module TZInfo::Definitions::Asia::Kuwait
  extend TZInfo::TimezoneDefinition::ClassMethods
  include TZInfo::TimezoneDefinition
end
module TZInfo::Definitions::Asia::Riyadh
  extend TZInfo::TimezoneDefinition::ClassMethods
  include TZInfo::TimezoneDefinition
end
module TZInfo::Definitions::Africa::Nairobi
  extend TZInfo::TimezoneDefinition::ClassMethods
  include TZInfo::TimezoneDefinition
end
module TZInfo::Definitions::Asia::Baghdad
  extend TZInfo::TimezoneDefinition::ClassMethods
  include TZInfo::TimezoneDefinition
end
module TZInfo::Definitions::Asia::Tehran
  extend TZInfo::TimezoneDefinition::ClassMethods
  include TZInfo::TimezoneDefinition
end
module TZInfo::Definitions::Asia::Muscat
  extend TZInfo::TimezoneDefinition::ClassMethods
  include TZInfo::TimezoneDefinition
end
module TZInfo::Definitions::Asia::Baku
  extend TZInfo::TimezoneDefinition::ClassMethods
  include TZInfo::TimezoneDefinition
end
module TZInfo::Definitions::Asia::Tbilisi
  extend TZInfo::TimezoneDefinition::ClassMethods
  include TZInfo::TimezoneDefinition
end
module TZInfo::Definitions::Asia::Yerevan
  extend TZInfo::TimezoneDefinition::ClassMethods
  include TZInfo::TimezoneDefinition
end
module TZInfo::Definitions::Asia::Kabul
  extend TZInfo::TimezoneDefinition::ClassMethods
  include TZInfo::TimezoneDefinition
end
module TZInfo::Definitions::Asia::Yekaterinburg
  extend TZInfo::TimezoneDefinition::ClassMethods
  include TZInfo::TimezoneDefinition
end
module TZInfo::Definitions::Asia::Karachi
  extend TZInfo::TimezoneDefinition::ClassMethods
  include TZInfo::TimezoneDefinition
end
module TZInfo::Definitions::Asia::Tashkent
  extend TZInfo::TimezoneDefinition::ClassMethods
  include TZInfo::TimezoneDefinition
end
module TZInfo::Definitions::Asia::Kolkata
  extend TZInfo::TimezoneDefinition::ClassMethods
  include TZInfo::TimezoneDefinition
end
module TZInfo::Definitions::Asia::Colombo
  extend TZInfo::TimezoneDefinition::ClassMethods
  include TZInfo::TimezoneDefinition
end
module TZInfo::Definitions::Asia::Katmandu
  extend TZInfo::TimezoneDefinition::ClassMethods
  include TZInfo::TimezoneDefinition
end
module TZInfo::Definitions::Asia::Dhaka
  extend TZInfo::TimezoneDefinition::ClassMethods
  include TZInfo::TimezoneDefinition
end
module TZInfo::Definitions::Asia::Almaty
  extend TZInfo::TimezoneDefinition::ClassMethods
  include TZInfo::TimezoneDefinition
end
module TZInfo::Definitions::Asia::Novosibirsk
  extend TZInfo::TimezoneDefinition::ClassMethods
  include TZInfo::TimezoneDefinition
end
module TZInfo::Definitions::Asia::Rangoon
  extend TZInfo::TimezoneDefinition::ClassMethods
  include TZInfo::TimezoneDefinition
end
module TZInfo::Definitions::Asia::Bangkok
  extend TZInfo::TimezoneDefinition::ClassMethods
  include TZInfo::TimezoneDefinition
end
module TZInfo::Definitions::Asia::Jakarta
  extend TZInfo::TimezoneDefinition::ClassMethods
  include TZInfo::TimezoneDefinition
end
module TZInfo::Definitions::Asia::Krasnoyarsk
  extend TZInfo::TimezoneDefinition::ClassMethods
  include TZInfo::TimezoneDefinition
end
module TZInfo::Definitions::Asia::Shanghai
  extend TZInfo::TimezoneDefinition::ClassMethods
  include TZInfo::TimezoneDefinition
end
module TZInfo::Definitions::Asia::Chongqing
  extend TZInfo::TimezoneDefinition::ClassMethods
  include TZInfo::TimezoneDefinition
end
module TZInfo::Definitions::Asia::Hong_Kong
  extend TZInfo::TimezoneDefinition::ClassMethods
  include TZInfo::TimezoneDefinition
end
module TZInfo::Definitions::Asia::Urumqi
  extend TZInfo::TimezoneDefinition::ClassMethods
  include TZInfo::TimezoneDefinition
end
module TZInfo::Definitions::Asia::Kuala_Lumpur
  extend TZInfo::TimezoneDefinition::ClassMethods
  include TZInfo::TimezoneDefinition
end
module TZInfo::Definitions::Asia::Singapore
  extend TZInfo::TimezoneDefinition::ClassMethods
  include TZInfo::TimezoneDefinition
end
module TZInfo::Definitions::Asia::Taipei
  extend TZInfo::TimezoneDefinition::ClassMethods
  include TZInfo::TimezoneDefinition
end
module TZInfo::Definitions::Australia
end
module TZInfo::Definitions::Australia::Perth
  extend TZInfo::TimezoneDefinition::ClassMethods
  include TZInfo::TimezoneDefinition
end
module TZInfo::Definitions::Asia::Irkutsk
  extend TZInfo::TimezoneDefinition::ClassMethods
  include TZInfo::TimezoneDefinition
end
module TZInfo::Definitions::Asia::Ulaanbaatar
  extend TZInfo::TimezoneDefinition::ClassMethods
  include TZInfo::TimezoneDefinition
end
module TZInfo::Definitions::Asia::Seoul
  extend TZInfo::TimezoneDefinition::ClassMethods
  include TZInfo::TimezoneDefinition
end
module TZInfo::Definitions::Asia::Tokyo
  extend TZInfo::TimezoneDefinition::ClassMethods
  include TZInfo::TimezoneDefinition
end
module TZInfo::Definitions::Asia::Yakutsk
  extend TZInfo::TimezoneDefinition::ClassMethods
  include TZInfo::TimezoneDefinition
end
module TZInfo::Definitions::Australia::Darwin
  extend TZInfo::TimezoneDefinition::ClassMethods
  include TZInfo::TimezoneDefinition
end
module TZInfo::Definitions::Australia::Adelaide
  extend TZInfo::TimezoneDefinition::ClassMethods
  include TZInfo::TimezoneDefinition
end
module TZInfo::Definitions::Australia::Melbourne
  extend TZInfo::TimezoneDefinition::ClassMethods
  include TZInfo::TimezoneDefinition
end
module TZInfo::Definitions::Australia::Sydney
  extend TZInfo::TimezoneDefinition::ClassMethods
  include TZInfo::TimezoneDefinition
end
module TZInfo::Definitions::Australia::Brisbane
  extend TZInfo::TimezoneDefinition::ClassMethods
  include TZInfo::TimezoneDefinition
end
module TZInfo::Definitions::Australia::Hobart
  extend TZInfo::TimezoneDefinition::ClassMethods
  include TZInfo::TimezoneDefinition
end
module TZInfo::Definitions::Asia::Vladivostok
  extend TZInfo::TimezoneDefinition::ClassMethods
  include TZInfo::TimezoneDefinition
end
module TZInfo::Definitions::Pacific::Guam
  extend TZInfo::TimezoneDefinition::ClassMethods
  include TZInfo::TimezoneDefinition
end
module TZInfo::Definitions::Pacific::Port_Moresby
  extend TZInfo::TimezoneDefinition::ClassMethods
  include TZInfo::TimezoneDefinition
end
module TZInfo::Definitions::Asia::Magadan
  extend TZInfo::TimezoneDefinition::ClassMethods
  include TZInfo::TimezoneDefinition
end
module TZInfo::Definitions::Pacific::Noumea
  extend TZInfo::TimezoneDefinition::ClassMethods
  include TZInfo::TimezoneDefinition
end
module TZInfo::Definitions::Pacific::Fiji
  extend TZInfo::TimezoneDefinition::ClassMethods
  include TZInfo::TimezoneDefinition
end
module TZInfo::Definitions::Asia::Kamchatka
  extend TZInfo::TimezoneDefinition::ClassMethods
  include TZInfo::TimezoneDefinition
end
module TZInfo::Definitions::Pacific::Majuro
  extend TZInfo::TimezoneDefinition::ClassMethods
  include TZInfo::TimezoneDefinition
end
module TZInfo::Definitions::Pacific::Auckland
  extend TZInfo::TimezoneDefinition::ClassMethods
  include TZInfo::TimezoneDefinition
end
module TZInfo::Definitions::Pacific::Tongatapu
  extend TZInfo::TimezoneDefinition::ClassMethods
  include TZInfo::TimezoneDefinition
end
class ActiveSupport::StringInquirer < String
  def method_missing(method_name, *arguments); end
end
class ActiveSupport::OptionMerger
  def initialize(context, options); end
  def method_missing(method, *arguments, &block); end
end
