'\" te
.\" Copyright (c) 2006, 2012, Oracle and/or its affiliates. All rights reserved.
.TH sdp 7D "29 Jun 2012" "SunOS 5.11" "Devices"
.SH NAME
sdp \- Sockets Direct Protocol driver
.SH SYNOPSIS
.LP
.nf
#include <socket.h>
.fi

.LP
.nf
#include <netinet/in.h>
.fi

.LP
.nf
\fBs = socket(AF_INET, SOCK_STREAM, PROTO_SDP);\fR
.fi

.LP
.nf
\fBs = socket(AF_INET6, SOCK_STREAM, PROTO_SDP);\fR
.fi

.SH DESCRIPTION
.sp
.LP
The Sockets Direct Protocol (\fBSDP\fR) is a transport protocol layered over the \fIInfiniband Transport Framework\fR (\fBIBTF\fR). \fBSDP\fR is a standard implementation based on Annex 4 of the \fIInfiniband Architecture Specification Vol 1\fR and provides reliable byte-stream, flow controlled two-way data transmission that closely mimics the Transmission Control Protocol (\fBTCP\fR).
.sp
.LP
\fBSDP\fR supports a sockets-based \fBSOCK_STREAM\fR interface to application programs. It also supports graceful close (including half-closed sockets), IP addressing (IPv4 or IPv6), the connecting/accepting connect model, out-of-band (OOB) data and common socket options. The \fBSDP\fR protocol also supports kernel bypass data transfers and data transfers from send-upper-layer-protocol (ULP) buffers to receive ULP buffers. A \fBSDP\fR message includes a BSDH header followed by data. (A BSDH header advertises the amount of available buffers on the local side).
.sp
.LP
\fBSDP\fR networking functionality is broken into the \fBsdp\fR driver and a function call-based \fBsockfs\fR implementation. A new protocol family of \fBPROTO_SDP\fR is introduced to use the \fBSDP\fR transport provided by the driver.
.sp
.LP
Sockets utilizing \fBSDP\fR are either active or passive. Active sockets initiate connections to passive sockets. Both active and passive sockets must have their local IP or IPv6 address and \fBSDP\fR port number bound with \fBbind\fR(3SOCKET) after the socket is created. By default, \fBSDP\fR sockets are active. A passive socket is created by calling \fBlisten\fR(3SOCKET) after binding the socket with \fBbind()\fR. This process establishes a queueing parameter for the passive socket. Connections to the passive  socket can be received with \fBaccept\fR(3SOCKET). Active sockets use the \fBconnect\fR(3SOCKET) call after binding to initiate connections.
.sp
.LP
In most cases, \fBSDP\fR sends data when it is presented. When outstanding  data is not yet acknowledged, \fBSDP\fR gathers small amounts of output to be sent in a single  packet once an acknowledgement is received. For a small number of clients this packetization may cause significant delays. To circumvent this problem,  \fBSDP\fR provided by the driver supplies \fBSDP_NODELAY\fR, a socket-level boolean option. Note that this behavior is similar to the \fBTCP_NODELAY\fR option.
.sp
.LP
\fBSDP\fR provides an urgent data mechanism that can be invoked using the out-of-band provisions of  \fBsend\fR(3SOCKET). The out-of-band delivery behavior is identical to TCP. The caller may mark one byte as urgent with the  MSG_OOB  flag to \fBsend\fR(3SOCKET). This sets an urgent pointer pointing to the byte in the \fBSDP\fR stream. The receiver of the stream is notified of the urgent data by a \fBSIGURG\fR signal. The SIOCATMARK  \fBioctl\fR(2) request returns a value indicating whether the stream is at the urgent mark. Because the system never returns data across the urgent  mark in a single \fBread\fR(2) call, it is possible to advance to the urgent data in a simple loop which reads data, testing  the  socket with the \fBSIOCATMARK\fR  \fBioctl()\fR request until it reaches the mark.
.SH ADDRESS FORMATS
.sp
.LP
\fBSDP\fR uses  IP/IPv6  addresses to refer to local and remote devices and opens a reliable connected IB connection between two end points. The \fBsdp\fR driver supports a point-to-point connection, however broadcasting and multicasting are not supported.
.SH SOCKET OPTIONS
.sp
.LP
\fBSDP\fR supports \fBsetsockopt()\fR and \fBgetsockopt()\fR to set and read socket options. Very few socket options affect \fBSDP\fR protocol operations. Other common socket options are processed but do not affect SDP protocol operation. All socket options are checked for validity. A \fBgetsockopt()\fR call returns the values set or toggled by \fBsetsockopt()\fR. Socket options that affect protocol operations are \fBSO_LINGER\fR, \fBSO_DEBUG\fR, \fBSO_REUSEADDR\fR, and \fBSO_OOBINLINE\fR.
.SH ERRORS
.sp
.ne 2
.mk
.na
\fB\fBEISCONN\fR\fR
.ad
.RS 20n
.rt  
A \fBconnect()\fR operation was attempted on a socket on which a \fBconnect()\fR operation had already  been performed.
.RE

.sp
.ne 2
.mk
.na
\fB\fBECONNRESET\fR\fR
.ad
.RS 20n
.rt  
The remote peer forced the connection to be closed. This usually occurs when the remote machine loses state information about the connection due to a crash.
.RE

.sp
.ne 2
.mk
.na
\fB\fBECONNREFUSED\fR\fR
.ad
.RS 20n
.rt  
The remote peer actively refused connection establishment. This usually occurs because no process is listening to the port.
.RE

.sp
.ne 2
.mk
.na
\fB\fBEADDRINUSE\fR\fR
.ad
.RS 20n
.rt  
A \fBbind()\fR operation was attempted  on a socket with a network address/port pair that has already been bound to another socket.
.RE

.sp
.ne 2
.mk
.na
\fB\fBEADDRNOTAVAIL\fR\fR
.ad
.RS 20n
.rt  
A \fBbind()\fR operation was attempted on a socket with a network address for which no network interface exists.
.RE

.sp
.ne 2
.mk
.na
\fB\fBEACCES\fR\fR
.ad
.RS 20n
.rt  
A \fBbind()\fR operation was attempted with  a reserved port number and the effective user ID of the process was not the privileged user.
.RE

.sp
.ne 2
.mk
.na
\fB\fBENOBUFS\fR\fR
.ad
.RS 20n
.rt  
The system ran out of memory for internal data structures.
.RE

.SH FILES
.sp
.ne 2
.mk
.na
\fB\fB/kernel/drv/amd64/sdpib\fR\fR
.ad
.sp .6
.RS 4n
64-bit \fBELF\fR kernel module (x86).
.RE

.sp
.ne 2
.mk
.na
\fB\fB/kernel/drv/sparcv9/sdpib\fR\fR
.ad
.sp .6
.RS 4n
64-bit \fBELF\fR kernel module (SPARC).
.RE

.SH ATTRIBUTES
.sp
.LP
See \fBattributes\fR(5) for descriptions of the following attribute:
.sp

.sp
.TS
tab() box;
cw(2.38i) |cw(3.12i) 
lw(2.38i) |lw(3.12i) 
.
ATTRIBUTE TYPEATTRIBUTE VALUE
_
Architecturex86, SPARC
_
Availabilitydriver/network/sdp, driver/network/sdp
.TE

.SH SEE ALSO
.sp
.LP
\fBread\fR(2), \fBgetsockopt\fR(3XNET), \fBsocket.h\fR(3HEAD), \fBaccept\fR(3SOCKET), \fBbind\fR(3SOCKET), \fBconnect\fR(3SOCKET), \fBsend\fR(3SOCKET), \fBattributes\fR(5), \fBstandards\fR(5)
.sp
.LP
\fIInfiniband Architecture Specification Vol 1- Annex 4\fR \(em November, 2002
