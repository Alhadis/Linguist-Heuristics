'\" te
.\" Copyright 1989 AT&T All Rights Reserved
.\" Copyright (c) 1998, 2015, Oracle and/or its affiliates.All rights reserved.
.TH ldd 1 "2015 年 1 月 14 日" "SunOS 5.11" "用户命令"
.SH 名称
ldd \- 列出可执行文件或共享目标文件的动态依赖项
.SH 用法概要
.LP
.nf
\fBldd\fR [\fB-d\fR | \fB-r\fR] [\fB-c\fR] [\fB-D\fR] [\fB-e\fR \fIenvar\fR] [\fB-f\fR] [\fB-i\fR] [\fB-L\fR] [\fB-l\fR] [\fB-p\fR]
        [\fB-s\fR] [\fB-U\fR | \fB-u\fR] [\fB-v\fR] [\fB-w\fR] \fIfilename\fR...
.fi

.SH 描述
.sp
.LP
\fBldd\fR 实用程序列出可执行文件和共享目标文件的动态依赖项。\fBldd\fR 使用运行时链接程序 \fBld.so.1\fR(1) 生成诊断信息。该运行时链接程序获取正在检查的文件并将其准备妥当，正如在正在运行的进程中将发生的一样。
.sp
.LP
缺省情况下，\fBldd\fR 触发与正在检查的文件关联的所有共享目标文件的装入。这些依赖项包括所有“懒惰”依赖项、延迟依赖项和 filtee。因此，\fBldd\fR 报告最大可能依赖项集。但是，在正常进程执行过程中，只有在引用依赖项时才会装入延迟装入的依赖项、延迟依赖项和 filtee。例如，许多系统库提供了广泛的功能，并且这些功能需要支持依赖项。\fBldd\fR 报告所有此类依赖项，但在正常的进程执行过程中，可能不需要这些支持依赖项。请参见“用法”部分下的“延迟装入”\fB\fR以及\fI"Lazy Loading of Dynamic Dependencies"\fR in \fI《Oracle Solaris 11.3 Linkers and Libraries         Guide》\fR。
.sp
.LP
\fBldd\fR 以其最简单的方式分析正在接受检查的目标文件的依赖项要求。还可以指示 \fBldd\fR 分析每个目标文件的重定位要求，这将使符号引用绑定到符号定义。
.sp
.LP
如果 \fIfilename\fR 是共享目标文件，则 \fBldd\fR 需要该文件具备执行权限。如果该文件不具备执行权限，\fBldd\fR 在尝试处理文件前会发出警告。
.sp
.LP
不会执行 \fBldd\fR 检查的动态目标文件。因此，\fBldd\fR 不会列出使用 \fBdlopen\fR(3C) 显式附加的任何共享目标文件。
.sp
.LP
要显示由某个进程或核心文件使用的所有目标文件，请使用 \fBpldd\fR(1)。
.SH 选项
.sp
.LP
支持以下选项：
.sp
.ne 2
.mk
.na
\fB\fB-c\fR\fR
.ad
.sp .6
.RS 4n
禁用对任何配置文件的使用。配置文件可用来更改缺省搜索路径，提供备选的目标文件依赖项。请参见 \fBcrle\fR(1)。
.RE

.sp
.ne 2
.mk
.na
\fB\fB-D\fR\fR
.ad
.sp .6
.RS 4n
跳过延迟依赖项装入。缺省情况下，\fBldd\fR 会强制处理延迟依赖项和“懒惰”依赖项。另请参见 \fB-L\fR 选项。在正常进程执行过程中，只有在第一次引用延迟依赖项时才会装入延迟依赖项。当使用了 \fB-D\fR 选项时，使用 \fB-d\fR 或 \fB-r\fR 选项不会触发任何延迟依赖项装入操作。请参见 \fBld\fR(1) 的 \fB-z\fR \fBdeferred\fR 选项。
.sp
缺省情况下，\fBldd\fR 不报告延迟的 filtee。请参见 \fB-l\fR 选项。
.RE

.sp
.ne 2
.mk
.na
\fB\fB-d\fR\fR
.ad
.sp .6
.RS 4n
检查\fB立即\fR引用。请参见“用法”下的“接口验证”\fB\fR部分。
.RE

.sp
.ne 2
.mk
.na
\fB\fB-e\fR \fIenvar\fR\fR
.ad
.sp .6
.RS 4n
设置环境变量 \fIenvar\fR。
.sp
此选项对于试用由运行时链接程序识别并可能会对 \fBldd\fR 产生负面影响的环境变量（如 \fBLD_PRELOAD\fR）非常有用。
.sp
此选项还可用来仅从正在检查的目标文件（例如 \fBLD_DEBUG\fR）提取附加信息。请参见 \fBld.so.1\fR(1)。
.RE

.sp
.ne 2
.mk
.na
\fB\fB-f\fR\fR
.ad
.sp .6
.RS 4n
强制 \fBldd\fR 检查不安全的可执行文件。超级用户调用 \fBldd\fR 时，缺省情况下，\fBldd\fR 不会处理任何不安全的可执行文件。如果可执行文件指定的解释程序没有驻留在 \fB/lib\fR 或 \fB/usr/lib\fR 下，则不会将可执行文件视为安全的文件。如果无法确定解释程序，也不会将可执行文件视为安全的文件。请参见“用法”下的“安全性”部分\fB\fR。
.RE

.sp
.ne 2
.mk
.na
\fB\fB-i\fR\fR
.ad
.sp .6
.RS 4n
显示初始化部分的执行顺序。使用 \fB-d\fR 或 \fB-r\fR 选项时可能会影响所发现的顺序。请参见“用法”下的“初始化顺序”部分\fB\fR。
.RE

.sp
.ne 2
.mk
.na
\fB\fB-L\fR\fR
.ad
.sp .6
.RS 4n
启用延迟装入。缺省情况下，\fBldd\fR 会强制处理“懒惰”依赖项和延迟依赖项。另请参见 \fB-D\fR 选项。在正常的进程执行期间，延迟装入是缺省操作模式。在此情况下，任何“懒惰”依赖项或延迟依赖项仅在对延迟目标文件中定义的符号进行引用时才会装入到进程中。\fB-d\fR 或 \fB-r\fR 选项与 \fB-L\fR 选项一起使用时，可用于检查依赖项及其在正在运行的进程中的装入顺序。请参见 \fBld\fR(1) 的 \fB-z\fR \fBlazyload\fR 选项。
.RE

.sp
.ne 2
.mk
.na
\fB\fB-l\fR\fR
.ad
.sp .6
.RS 4n
强制对任何过滤器立即进行处理，以便列出所有 filtee 及其依赖项。立即处理过滤器是 \fBldd\fR 的缺省操作模式。然而，在此缺省模式下，任何延迟的 filtee 或无法找到的辅助 filtee 会被忽略，且不进行任何提示。使用 \fB-l\fR 选项，延迟的 filtee 将与缺失的辅助 filtee 一起列出。
.RE

.sp
.ne 2
.mk
.na
\fB\fB-p\fR\fR
.ad
.sp .6
.RS 4n
向显式\fB父代\fR引用和\fB外部\fR引用公开任何符号无法解析错误。请参见“用法”下的“外部接口”\fB\fR部分。
.RE

.sp
.ne 2
.mk
.na
\fB\fB-r\fR\fR
.ad
.sp .6
.RS 4n
检查\fB立即\fR引用和\fB延迟\fR引用。请参见“用法”下的“接口验证”\fB\fR部分。
.RE

.sp
.ne 2
.mk
.na
\fB\fB-s\fR\fR
.ad
.sp .6
.RS 4n
显示用于定位共享目标文件依赖项的搜索路径。
.RE

.sp
.ne 2
.mk
.na
\fB\fB-U\fR\fR
.ad
.sp .6
.RS 4n
显示任何未引用或未使用的依赖项。如果未引用的依赖项未由随 \fIfilename\fR 装入的其他目标文件绑定，则该依赖项将标记为未使用。没有从循环外部的目标文件绑定的循环依赖项也会被视为未引用的依赖项。此选项还会显示任何未使用的搜索路径。请参见“用法”下的“未使用的材料”\fB\fR部分。
.RE

.sp
.ne 2
.mk
.na
\fB\fB-u\fR\fR
.ad
.sp .6
.RS 4n
显示任何未使用的目标文件。请参见“用法”下的“未使用的材料”\fB\fR部分。
.RE

.sp
.ne 2
.mk
.na
\fB\fB-v\fR\fR
.ad
.sp .6
.RS 4n
显示处理 \fIfilename\fR 时引起的所有依赖项关系。此选项还会显示任何依赖项版本要求。请参见 \fBpvs\fR(1)。
.RE

.sp
.ne 2
.mk
.na
\fB\fB-w\fR\fR
.ad
.sp .6
.RS 4n
公开任何无法解析的\fB弱\fR符号引用。请参见“用法”下的“弱引用”\fB\fR部分。
.RE

.SH 用法
.SS "外部接口"
.sp
.LP
共享目标文件可以引用应当由共享目标文件的调用者提供的符号。在创建共享目标文件时，可以显式将这些引用归类为可从\fB父代\fR使用的引用，或将其简单地归类为\fB外部\fR引用。请参见 \fBld\fR(1) 的 \fB-M\fR \fB mapfile\fR 选项以及 \fBPARENT\fR 和 \fBEXTERN\fR 符号定义关键字。
.sp
.LP
检查动态可执行文件时，无法解析的对\fB父代\fR或\fB外部\fR的依赖项引用会标记为错误。检查共享目标文件时，系统不会将无法解析的\fB父代\fR或\fB外部\fR引用标记为错误。
.sp
.LP
\fB-p\fR 选项在与 \fB-d\fR 或 \fB-r\fR 选项一起使用时，会将无法解析的\fB父代\fR或\fB外部\fR引用标记为错误。
.SS "初始化顺序"
.sp
.LP
动态目标文件装入进程时，将执行此目标文件提供的所有初始化代码。各个目标文件的初始化代码的执行顺序根据这些目标文件的依赖项关系确定。请参见\fI"Initialization and Termination Routines"\fR in \fI《Oracle Solaris 11.3 Linkers and Libraries         Guide》\fR。
.sp
.LP
\fBldd\fR 可以显示它装入的目标文件的初始化顺序。此分析在发现循环依赖项时非常有用。正常进程中装入依赖项的确切顺序可能会有所不同，因此运行时实际进行的初始化也可能会与 \fBldd\fR 列出的不同。
.sp
.LP
受所用选项的影响，未显式定义所需依赖项的目标文件可能会看到 \fBldd\fR 显示的初始化部分的顺序有所不同。例如，简单的应用程序可能会显示：
.sp
.in +2
.nf
example% \fBldd -i main\fR 
  libA.so.1 =>   ./libA.so.1
  libc.so.1 =>   /lib/libc.so.1
  libB.so.1 =>   ./libB.so.1

 init object=./libB.so.1
 init object=./libA.so.1
 init object=/lib/libc.so.1
.fi
.in -2
.sp

.sp
.LP
然而，当应用了重定位时，初始化部分的顺序为：
.sp
.in +2
.nf
example% \fBldd -ir main\fR 
  .........

 init object=/lib/libc.so.1
 init object=./libB.so.1
 init object=./libA.so.1
.fi
.in -2
.sp

.sp
.LP
在此情况下，\fBlibB.so.1\fR 会引用 \fB/lib/libc.so.1\fR 中的函数。但是，\fBlibB.so.1\fR 对此库没有显式依赖关系。仅当发现了重定位后才会建立依赖关系。此隐式依赖关系会影响初始化部分的顺序。
.sp
.LP
通常，在应用程序执行时建立的初始化部分的顺序等同于使用 \fB-d\fR 选项的 \fBldd\fR。如果所有目标文件都完整地定义了其依赖项，则可以获得最佳顺序。构建动态目标文件时，建议使用 \fBld\fR(1) 选项 \fB-z\fR \fBdefs\fR 和 \fB-z\fR \fBignore\fR。
.sp
.LP
一个或多个动态目标文件彼此引用时，会产生循环依赖关系。应当避免循环依赖关系，因为无法为这些循环依赖项建立唯一的初始化排序顺序。
.SS "接口验证"
.sp
.LP
\fBldd\fR 可以检查正在接受检查的目标文件的符号引用和符号定义的兼容性。指定了 \fB-d\fR 和 \fB-r\fR 选项时，\fBldd\fR 可以针对将 \fIfilename\fR 装入进程时会出现的任何未解析符号引用列显警告信息。
.sp
.LP
每次调用 \fBldd\fR 期间，选项 \fB-d\fR 和 \fB-r\fR 两者只能指定其一。
.sp
.LP
\fB立即\fR引用通常针对可执行或共享目标文件代码使用的数据项。\fB立即\fR引用同时也是函数指针，甚至是通过与位置\fB相关\fR的共享目标文件执行的函数调用。\fB延迟\fR引用通常是通过与位置\fB无关的\fR共享目标文件进行的全局函数调用，或者是通过可执行文件进行的外部函数调用。有关这些引用类型的更多信息，请参见\fI"When Relocations Are Performed"\fR in \fI《Oracle Solaris 11.3 Linkers and Libraries         Guide》\fR。
.sp
.LP
此外，目标文件装入也受重定位处理的影响。有关更多详细信息，请参见“用法”下的“延迟装入”\fB\fR部分。
.SS "延迟装入"
.sp
.LP
可通过建立“懒惰”依赖项和延迟依赖项直接应用延迟装入。请参见 \fBld\fR(1) 的 \fB-z\fR \fBlazyload\fR 选项和 \fB-z\fR \fBdeferred\fR 选项。延迟装入也可以通过过滤器间接应用。请参见 \fBld\fR(1) 的 \fB-f\fR 选项和 \fB-F\fR 选项。受所用选项的影响，采用延迟装入技术的目标文件在 \fBldd\fR 输出中可能会变化。如果目标文件将其所有依赖项都表示为延迟依赖项，\fBldd\fR 的缺省操作是按依赖项在该目标文件中的记录顺序列出所有依赖项：
.sp
.in +2
.nf
example% \fBldd main\fR 
  libelf.so.1 =>   /lib/libelf.so.1
  libnsl.so.1 =>   /lib/libnsl.so.1
  libc.so.1 =>  /lib/libc.so.1
.fi
.in -2
.sp

.sp
.LP
使用 \fB-L\fR 选项时，可以启用在运行时使用此目标文件时发生的延迟装入行为。在此模式下，延迟依赖项在对延迟目标文件中定义的符号进行引用时装入。因此，结合使用 \fB-L\fR 选项与 \fB-d\fR 和 \fB-r\fR 选项可以显示分别满足立即引用和延迟引用所需的依赖项：
.sp
.in +2
.nf
example% \fBldd\fR \fB-L\fR \fBmain\fR 
example% \fBldd\fR \fB-d\fR \fBmain\fR 
  libc.so.1 => /lib/libc.so.1 
example% \fBldd\fR \fB-r\fR \fBmain\fR 
  libc.so.1 => /lib/libc.so.1
  libelf.so.1 =>  /lib/libelf.so.1
.fi
.in -2
.sp

.sp
.LP
请注意，在本例中，依赖项的列出顺序不同于未使用选项时 \fBldd\fR 显示的顺序。即使使用了 \fB-r\fR 选项，对依赖项的延迟引用的顺序可能也不同于在正在运行的进程中的引用顺序。
.sp
.LP
观察延迟装入也可以查明满足任何引用时不需要的目标文件。这类目标文件（在本例中，为 \fBlibnsl.so.1\fR）可以从用来构建要检查的目标文件的链接行中删除。
.SS "安全性"
.sp
.LP
只有已知要检查的可执行文件值得信任时，超级用户才应使用 \fB-f\fR 选项。超级用户对不可信任的可执行文件使用 \fB-f\fR 会危害系统安全。如果可执行文件的可信度未知，则超级用户应该暂时变为一般用户。然后，以一般用户身份调用 \fBldd\fR。
.sp
.LP
只要不使用 \fB:r\fR 子命令，使用 \fBdump\fR(1)、\fBelfdump\fR(1)、\fBelfedit\fR(1) 和 \fBmdb\fR(1) 就可以安全地检查不可信任的目标文件。此外，非超级用户可以使用 \fBmdb\fR 的 \fB:r\fR 子命令或 \fBtruss\fR(1) 检查不可信任的可执行文件，同时又不会构成太大的安全风险。针对不可信任的可执行文件使用 \fBldd\fR、\fBmdb :r\fR 或 \fBtruss\fR 时，要最大程度地降低风险，请使用 \fBUID\fR \fB"nobody"\fR。
.SS "未使用的材料"
.sp
.LP
\fBldd\fR 可以验证依赖项使用情况。仅当某个符号引用绑定到了依赖项时，才认为依赖项已被使用。通过 \fB-U\fR 选项和 \fB-U\fR 选项，\fBldd\fR 可针对装入 \fIfilename\fR 时装入的任何未引用或未使用的依赖项列显警告信息。这些选项在检查符号引用时很有用。如果 \fB-r\fR 选项未生效，则会自动启用 \fB-d\fR 选项。
.sp
.LP
由目标文件定义的但未从该目标文件绑定的依赖项称为未引用的依赖项。在装入 \fIfilename\fR 时未由任何其他目标文件绑定的依赖项称为未使用的目标文件。
.sp
.LP
依赖项可能位于缺省系统位置，也可能位于必须由搜索路径指定的位置。可以全局指定搜索路径，例如使用环境变量 \fBLD_LIBRARY_PATH\fR。此外，也可以在动态目标文件中将搜索路径定义为 runpath。请参见 \fBld\fR(1) 的 \fB-R\fR 选项。不能用于满足任何依赖项的搜索路径会导致不必要的文件系统处理工作。
.sp
.LP
每次调用 \fBldd\fR 期间，选项 \fB-U\fR 或 \fB-u\fR 两者只能指定其一，尽管 \fB-U\fR 是 \fB-u\fR 的超集。使用 \fB-r\fR 选项时发现的未引用或未使用的目标文件应当从依赖项中删除。这些目标文件未提供引用，但在装入 \fIfilename\fR 时会导致不必要的开销。使用 \fB-d\fR 选项时发现的任何未引用或未使用的目标文件都不是装入 \fIfilename\fR 时立即需要的。这些目标文件是延迟装入的候选者。有关更多详细信息，请参见“用法”下的“延迟装入”\fB\fR部分。
.sp
.LP
删除未使用的依赖项可以降低运行时链接开销。删除未引用的依赖项可以进一步降低运行时链接开销。不过，在与其他目标文件一起使用时或在会衍生其他目标文件依赖项时，删除未引用的依赖项可防止有未使用的依赖项。
.sp
.LP
删除未使用的搜索路径会减少定位依赖项时需做的工作量。通过网络访问文件服务器中的文件时，这可以节省大量的工作量。请注意，搜索路径可以编码到目标文件中，以满足 \fBdlopen\fR(3C) 的要求。由于可能不需要通过搜索路径获取此目标文件的依赖项，因此，在 \fBldd\fR 看来，它是未使用的。
.SS "弱引用"
.sp
.LP
重定位使用的符号可以定义为\fB弱\fR引用。缺省情况下，如果弱符号引用无法解析，则会忽略重定位，并将零写入到重定位偏移。\fB-w\fR 选项在与 \fB-d\fR 或 \fB-r\fR 选项一起使用时，会将针对弱符号引用的任何无法解析的重定位标记为重定位错误。
.SH 属性
.sp
.LP
有关下列属性的说明，请参见 \fBattributes\fR(5)：
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i) 
lw(2.75i) |lw(2.75i) 
.
属性类型属性值
_
可用性system/linker
.TE

.SH 另请参见
.sp
.LP
\fBcrle\fR(1)、\fBdump\fR(1)、\fBelfdump\fR(1)、\fBelfedit\fR(1)、\fBld\fR(1)、\fBld.so.1\fR(1)、\fBmdb\fR(1)、\fBpldd\fR(1)、\fBpvs\fR(1)、\fBtruss\fR(1)、\fBdlopen\fR(3C)、\fBattributes\fR(5)
.sp
.LP
\fI《Oracle Solaris 11.3 Linkers and Libraries         Guide》\fR
.SH 诊断
.sp
.LP
\fBldd\fR 将共享目标文件路径名记录输出到 \fBstdout\fR。还可以选择将符号解析问题的列表输出到 \fBstderr\fR。如果 \fIfilename\fR 不是可执行文件或共享目标文件，或者无法打开 \fIfilename\fR 进行读取，则将返回非零退出状态。
.SH 附注
.sp
.LP
为共享目标文件使用 \fB-d\fR 或 \fB-r\fR 选项可能会产生误导性结果。\fBldd\fR 会对共享目标文件执行最坏情形分析。然而，实际上，报告为无法解析的符号的符号可以由引用共享目标文件的可执行文件解析。可以使用运行时链接程序预装入机制为正在检查的目标文件添加依赖项。请参见 \fBLD_PRELOAD\fR。
