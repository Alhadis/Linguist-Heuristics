'\" te
.\" Copyright 1989 AT&T.
.\" Portions Copyright (c) 1992, X/Open Company Limited All Rights Reserved
.\" Portions Copyright (c) 2008, 2014, Oracle and/or its affiliates.All rights reserved.
.\" The Institute of Electrical and Electronics Engineers and The Open Group, have given us permission to reprint portions of their documentation.In the following statement, the phrase "this text" refers to portions of the system documentation.Portions of this text are reprinted and reproduced in electronic form in the Sun OS Reference Manual, from IEEE Std 1003.1, 2004 Edition, Standard for Information Technology -- Portable Operating System Interface (POSIX), The Open Group Base Specifications Issue 6, Copyright (C) 2001-2004 by the Institute of Electrical and Electronics Engineers, Inc and The Open Group.In the event of any discrepancy between these versions and the original IEEE and The Open Group Standard, the original IEEE and The Open Group Standard is the referee document.The original Standard can be obtained online at http://www.opengroup.org/unix/online.html.This notice shall appear on any product containing this material. 
.TH chmod 1 "2014 年 2 月 25 日" "SunOS 5.11" "用户命令"
.SH 名称
chmod \- 更改文件的权限模式
.SH 用法概要
.LP
.nf
\fBchmod\fR [\fB-fR\fR] \fIabsolute-mode\fR \fIfile\fR...
.fi

.LP
.nf
\fBchmod\fR [\fB-fR\fR] \fIsymbolic-mode-list\fR \fIfile\fR...
.fi

.LP
.nf
\fBchmod\fR [\fB-fR\fR] \fIacl_operation\fR \fIfile\fR...
.fi

.LP
.nf
\fBchmod\fR [\fB-fR\fR] [\fB-@\fR \fInamed_attribute\fR]...\fIattribute_specification_list\fR \fIfile\fR...
.fi

.SH 描述
.sp
.LP
\fBchmod\fR 实用程序可更改或分配文件的模式。 
.sp
.LP
\fBchmod\fR 也可用于修改文件和目录的访问控制列表 (Access Control List, ACL)，并修改正规文件、目录和不透明扩展属性文件的布尔读写系统属性。
.SS "绝对模式"
.sp
.LP
绝对模式命令行格式如下：
.sp
.LP
\fBchmod\fR [\fIoptions\fR] \fIabsolute-mode\fR \fIfile\fR . . .
.sp
.LP
其中 \fIabsolute-mode\fR 使用八进制数字 \fInnnn\fR 指定，定义如下：
.sp
.ne 2
.mk
.na
\fB\fIn\fR\fR
.ad
.sp .6
.RS 4n
一个从 \fB0\fR 到 \fB7\fR 的数字。绝对模式通过以下任意模式的 OR 运算构建而成：
.sp
.ne 2
.mk
.na
\fB\fB4000\fR\fR
.ad
.sp .6
.RS 4n
执行时设置用户 \fBID\fR。
.RE

.sp
.ne 2
.mk
.na
\fB\fB20\fR\fI # \fR\fB0\fR\fR
.ad
.sp .6
.RS 4n
如果 \fI#\fR 为 \fB7\fR、\fB5\fR、\fB3\fR 或 \fB1\fR，则在执行时设置组 \fBID\fR。
.sp
如果 \fI#\fR 为 \fB6\fR、\fB4\fR、\fB2\fR 或 \fB0\fR，则启用强制性锁定。
.sp
对于目录，通过用于传播组 ID 的 BSD 语义创建文件。使用该选项，在目录中创建的文件和子目录将继承目录而非当前进程的组 ID。对于目录，只能使用符号模式设置或清除 setgid 位（分别使用 \fBg+s\fR 或 \fBg-s\fR）。
.RE

.sp
.ne 2
.mk
.na
\fB\fB1000\fR\fR
.ad
.sp .6
.RS 4n
启用 sticky 位。请参见 \fBchmod\fR(2)。
.RE

.sp
.ne 2
.mk
.na
\fB\fB0400\fR\fR
.ad
.sp .6
.RS 4n
允许所有者读取。
.RE

.sp
.ne 2
.mk
.na
\fB\fB0200\fR\fR
.ad
.sp .6
.RS 4n
允许所有者写入。
.RE

.sp
.ne 2
.mk
.na
\fB\fB0100\fR\fR
.ad
.sp .6
.RS 4n
允许所有者执行（在目录中搜索）。
.RE

.sp
.ne 2
.mk
.na
\fB\fB0700\fR\fR
.ad
.sp .6
.RS 4n
允许所有者读取、写入和执行（搜索）。
.RE

.sp
.ne 2
.mk
.na
\fB\fB0040\fR\fR
.ad
.sp .6
.RS 4n
允许组读取。
.RE

.sp
.ne 2
.mk
.na
\fB\fB0020\fR\fR
.ad
.sp .6
.RS 4n
允许组写入。
.RE

.sp
.ne 2
.mk
.na
\fB\fB0010\fR\fR
.ad
.sp .6
.RS 4n
允许组执行（在目录中搜索）。
.RE

.sp
.ne 2
.mk
.na
\fB\fB0070\fR\fR
.ad
.sp .6
.RS 4n
允许组读取、写入和执行（搜索）。
.RE

.sp
.ne 2
.mk
.na
\fB\fB0004\fR\fR
.ad
.sp .6
.RS 4n
允许其他用户读取。
.RE

.sp
.ne 2
.mk
.na
\fB\fB0002\fR\fR
.ad
.sp .6
.RS 4n
允许其他用户写入。
.RE

.sp
.ne 2
.mk
.na
\fB\fB0001\fR\fR
.ad
.sp .6
.RS 4n
允许其他用户执行（在目录中搜索）。
.RE

.sp
.ne 2
.mk
.na
\fB\fB0007\fR\fR
.ad
.sp .6
.RS 4n
允许其他用户读取、写入和执行（搜索）。
.RE

.RE

.sp
.LP
对于目录，无法在绝对模式 (chmod 20#0 ...) 下设置（或清除）\fBsetgid\fR 位；必须在符号模式下使用 '\fBchmod\fR \fBg+s\fR ...'（或 '\fBchmod\fR \fBg-s\fR ...'）进行设置。
.SS "符号模式"
.sp
.LP
符号模式命令行格式如下：
.sp
.LP
\fBchmod\fR [\fIoptions\fR] \fIsymbolic-mode-list\fR \fIfile\fR . . .
.sp
.LP
其中 \fIsymbolic-mode-list\fR 是符号模式表达式的逗号分隔列表（中间无空格），格式如下：
.sp
.LP
[\fBwho\fR] \fIoperator\fR [\fIpermissions\fR]
.sp
.LP
将按指定顺序执行运算。如果一个运算符后跟多个 \fIpermissions\fR 字母，将同时执行相应的多项运算。
.sp
.ne 2
.mk
.na
\fB\fBwho\fR\fR
.ad
.sp .6
.RS 4n
零个或多个字符 \fBu\fR、\fBg\fR、\fBo\fR 和 \fBa\fR，指定要更改或分配谁的权限：
.sp
.ne 2
.mk
.na
\fB\fBu\fR\fR
.ad
.sp .6
.RS 4n
用户的权限
.RE

.sp
.ne 2
.mk
.na
\fB\fBg\fR\fR
.ad
.sp .6
.RS 4n
组的权限
.RE

.sp
.ne 2
.mk
.na
\fB\fBo\fR\fR
.ad
.sp .6
.RS 4n
其他用户的权限
.RE

.sp
.ne 2
.mk
.na
\fB\fBa\fR\fR
.ad
.sp .6
.RS 4n
所有权限（用户、组和其他用户）
.RE

如果省略了 \fBwho\fR，则缺省为 \fBa\fR，但是会考虑文件模式创建掩码（有关更多信息，请参见 \fBsh\fR(1) 或 \fBcsh\fR(1) 中的 \fBumask\fR）的设置。如果省略了 \fBwho\fR，\fBchmod\fR 不会覆盖用户掩码的限制。
.RE

.sp
.ne 2
.mk
.na
\fB\fIoperator\fR\fR
.ad
.sp .6
.RS 4n
\fB+\fR、\fB-\fR 或 \fB=\fR，指定要如何更改权限：
.sp
.ne 2
.mk
.na
\fB\fB+\fR\fR
.ad
.sp .6
.RS 4n
添加权限。
.sp
如果省略了 \fIpermissions\fR，将不添加任何内容。
.sp
如果省略了 \fBwho\fR，将添加由 \fIpermissions\fR 表示的文件模式位，文件模式创建掩码中有相应位的 \fIexcept\fR。
.sp
如果指定了 \fBwho\fR，将添加由 \fIpermissions\fR 表示的文件模式位。
.RE

.sp
.ne 2
.mk
.na
\fB\fB-\fR\fR
.ad
.sp .6
.RS 4n
解除权限。
.sp
如果省略了 \fIpermissions\fR，将不执行任何操作。
.sp
如果省略了 \fBwho\fR，将清除由 \fIpermissions\fR 表示的文件模式位，文件模式创建掩码中有相应位的 \fIexcept\fR。
.sp
如果指定了 \fBwho\fR，将清除由 \fIpermissions\fR 表示的文件模式位。
.RE

.sp
.ne 2
.mk
.na
\fB\fB=\fR\fR
.ad
.sp .6
.RS 4n
绝对分配权限。
.sp
如果省略了 \fBwho\fR，将清除所有文件模式位；如果指定了 \fBwho\fR，将清除由 \fBwho\fR 表示的文件模式位。
.sp
如果省略了 \fIpermissions\fR，将不执行其他任何操作。
.sp
如果省略了 \fBwho\fR，将添加由 \fIpermissions\fR 表示的文件模式位，文件模式创建掩码中有相应位的 \fIexcept\fR。
.sp
如果指定了 \fBwho\fR，将添加由 \fIpermissions\fR 表示的文件模式位。
.RE

\fB=\fR 有一种绝对效应，即重置由 \fBwho\fR 表示的其他所有位，这与其他符号运算不同。省略 \fIpermissions\fR 只在使用 \fB=\fR 解除所有权限时有用。
.RE

.sp
.ne 2
.mk
.na
\fB\fIpermission\fR\fR
.ad
.sp .6
.RS 4n
以下字母的任意兼容组合：
.sp
.ne 2
.mk
.na
\fB\fBl\fR\fR
.ad
.sp .6
.RS 4n
强制性锁定
.RE

.sp
.ne 2
.mk
.na
\fB\fBr\fR\fR
.ad
.sp .6
.RS 4n
读取权限
.RE

.sp
.ne 2
.mk
.na
\fB\fBs\fR\fR
.ad
.sp .6
.RS 4n
用户或组 set-ID
.RE

.sp
.ne 2
.mk
.na
\fB\fBt\fR\fR
.ad
.sp .6
.RS 4n
sticky 位
.RE

.sp
.ne 2
.mk
.na
\fB\fBw\fR\fR
.ad
.sp .6
.RS 4n
写入权限
.RE

.sp
.ne 2
.mk
.na
\fB\fBx\fR\fR
.ad
.sp .6
.RS 4n
执行权限
.RE

.sp
.ne 2
.mk
.na
\fB\fBX\fR\fR
.ad
.sp .6
.RS 4n
执行权限，如果文件为目录或者如果其他用户类之一具有执行权限
.RE

.sp
.ne 2
.mk
.na
\fB\fBu\fR、\fBg\fR、\fBo\fR\fR
.ad
.sp .6
.RS 4n
分别表示将从当前用户、组或其他用户模式中解除 \fIpermission\fR。
.RE

文件的权限可能会因用户标识号 (user identification number, UID) 或组标识号 (group identification number, GID) 而异。权限以三个序列描述，每个序列包含三个字符：
.sp

.sp
.TS
tab();
lw(1.83i) lw(1.83i) lw(1.83i) 
lw(1.83i) lw(1.83i) lw(1.83i) 
.
用户组其他用户
rwxrwxrwx
.TE

本例（用户、组和其他用户都具有读取、写入和执行指定文件的权限）说明了授予权限的两个类别：访问类和权限本身。
.sp
字母 \fBs\fR 只有与 \fBu\fR 或 \fBg\fR 一起使用才有意义，而 \fBt\fR 只有与 \fBu\fR 一起使用才起作用。
.sp
文件和记录强制性锁定 (\fBl\fR) 是指某个文件能够在程序访问该文件的同时锁定其读取或写入权限。
.sp
在设置了 set-group-ID 位（反映为 \fB\&'ls -ld'\fR 输出中的 \fB-----s---\fR 或 \fB-----l---\fR）的目录中，将使用父目录而非当前进程的组 ID 创建文件和子目录。
.sp
无法在允许组执行的同时锁定文件禁止执行。此外，也无法在启用 set-group-ID 位的同时锁定文件禁止执行。因此，以下示例中的命令无效，将导致显示错误消息：
.sp
.in +2
.nf
chmod g+x,+l \fIfile\fR
chmod g+s,+l \fIfile\fR
.fi
.in -2
.sp

只有某个文件或目录的所有者（或超级用户）可更改该文件或目录的模式。只有超级用户可设置非目录文件的 sticky 位。如果您不是超级用户，\fBchmod\fR 将屏蔽 sticky 位，但是不会返回错误。要启用某个文件的 set-group-ID 位，您自己的组 ID 必须对应于该文件的组 ID，并且必须设置组执行。
.RE

.SS "ACL 运算"
.sp
.LP
访问控制列表 (Access Control List, ACL) 是访问控制条目 (Access Control Entries, ACE) 的列表，每个 ACE 定义特定某个用户类的访问权限。ACE 列表将从零开始进行编号。ACE 在 ACL 中的位置称为 \fIindex\fR。该索引将用作下方所述多个 \fBchmod\fR 命令的参数。有关 ACL 和 ACE 的详细说明，请参见\fI《Managing ZFS File Systems in Oracle Solaris 11.3》\fR。
.sp
.LP
Oracle Solaris 实用程序（包括 \fBchmod\fR）既支持 NFSv4，也支持较新的 POSIX 样式的 ACL 规范。这些规范阐明了下方所示 \fIacl_specification\fR 字段的语法和语义。这两种 ACL 规范将在下文各自相应的小节进行介绍。
.sp
.LP
ACL 运算命令行格式如下：
.sp
.in +2
.nf
chmod [\fIoptions\fR] A[\fIindex\fR]- \fIfile\fR ...
chmod [\fIoptions\fR] A-\fIacl_specification\fR \fIfile\fR ...
chmod [\fIoptions\fR] A[\fIindex\fR]{+|=}\fIacl_specification\fR \fIfile\fR ...
.fi
.in -2
.sp

.sp
.LP
其中 \fIacl_specification\fR 是逗号分隔列表（中间无空格），格式如下： 
.sp
.ne 2
.mk
.na
\fB\fBA\fR[\fIindex\fR]+\fIacl_specification\fR\fR
.ad
.sp .6
.RS 4n
将 \fIacl_specification\fR 中指定的访问控制条目 (Access Control Entries, ACE) 附加到文件 ACL 的开头。根据文件系统，ACL 应用于文件时可进行重新排序。如果指定了可选 \fIindex\fR，则将在指定的 \fIindex\fR 前面插入新 ACE。
.RE

.sp
.ne 2
.mk
.na
\fB\fBA-\fR\fR
.ad
.sp .6
.RS 4n
删除文件当前 ACL 的所有 ACE，将当前的 ACL 替换为仅表示当前文件模式的新 ACL。
.RE

.sp
.ne 2
.mk
.na
\fB\fBA\fIindex\fR\fR-\fR
.ad
.sp .6
.RS 4n
删除 \fIindex\fR 编号指定的 ACE。
.RE

.sp
.ne 2
.mk
.na
\fB\fBA-\fIacl_specification\fR\fR\fR
.ad
.br
.na
\fB\fR
.ad
.sp .6
.RS 4n
删除 \fIacl_specification\fR 指定的 ACE（如果当前文件的 ACL 中存在）。
.RE

.sp
.ne 2
.mk
.na
\fB\fBA=\fIacl_specification\fR\fR\fR
.ad
.sp .6
.RS 4n
将文件的整个 ACL 替换为 \fIacl_specification\fR。
.RE

.sp
.ne 2
.mk
.na
\fB\fBA[\fIindex\fR]=\fIacl_specification\fR\fR\fR
.ad
.sp .6
.RS 4n
从特定索引编号开始替换文件当前 ACL 中的 ACE。如果指定了多个 ACE，则 \fIacl_specification\fR 中的每个后续 ACE 替换当前 ACL 中的相应 ACE。 
.RE

.SS "POSIX 样式的 ACL 规范（由 UFS 支持）"
.sp
.LP
POSIX 样式的 ACL（由 UFS 支持）指定为以下冒号 (\fB:\fR) 分隔字段。
.sp
.ne 2
.mk
.na
\fBuser::perms\fR
.ad
.sp .6
.RS 4n
文件所有者权限。
.RE

.sp
.ne 2
.mk
.na
\fBuser:\fIusername\fR:perms\fR
.ad
.sp .6
.RS 4n
特定用户的权限。
.RE

.sp
.ne 2
.mk
.na
\fBgroup::perms\fR
.ad
.sp .6
.RS 4n
文件组成员权限。
.RE

.sp
.ne 2
.mk
.na
\fBgroup:\fIgroupname:\fRperms\fR
.ad
.sp .6
.RS 4n
特定组的权限。
.RE

.sp
.ne 2
.mk
.na
\fBother::perms\fR
.ad
.sp .6
.RS 4n
文件所有者或文件组成员以外的其他用户的权限。
.RE

.sp
.ne 2
.mk
.na
\fBmask:perms\fR
.ad
.sp .6
.RS 4n
ACL 掩码。掩码条目指定允许用户（所有者除外）和组具有的最大权限。
.RE

.sp
.ne 2
.mk
.na
\fBdefault:user::perms\fR
.ad
.sp .6
.RS 4n
缺省文件所有者权限。
.RE

.sp
.ne 2
.mk
.na
\fBdefault:user:\fIusername\fR:perms\fR
.ad
.sp .6
.RS 4n
特定用户的缺省权限。
.RE

.sp
.ne 2
.mk
.na
\fBdefault:group::perms\fR
.ad
.sp .6
.RS 4n
缺省文件组成员权限。
.RE

.sp
.ne 2
.mk
.na
\fBdefault:group:\fIgroupname\fR:perms\fR
.ad
.sp .6
.RS 4n
特定组的缺省权限。
.RE

.sp
.ne 2
.mk
.na
\fBdefault:other:perms\fR
.ad
.sp .6
.RS 4n
文件所有者或文件组成员之外的其他用户的缺省权限。
.RE

.sp
.ne 2
.mk
.na
\fBdefault:mask:perms\fR
.ad
.sp .6
.RS 4n
缺省 ACL 掩码。
.RE

.sp
.LP
使用以上规范可指定 ACL，例如：
.sp
.in +2
.nf
user:tom:rw-,mask:rwx,group:staff:r-x
.fi
.in -2
.sp

.SS "NFSv4 ACL 规范（由 NFSv4 和 ZFS 支持）"
.sp
.LP
NFSv4 ACL 可提供更丰富的 ACL 语义。这种规范可提供允许和拒绝条目、更精细的权限和增强的继承控制。
.sp
.LP
NFSv4 ACL 指定为以下冒号 (\fB:\fR) 分隔字段。
.sp
.ne 2
.mk
.na
\fBowner@:<perms>[:inheritance flags]:<allow|deny>\fR
.ad
.sp .6
.RS 4n
文件所有者的权限。
.RE

.sp
.ne 2
.mk
.na
\fBgroup@:<perms>[:inheritance flags]:<allow|deny>\fR
.ad
.sp .6
.RS 4n
文件组成员的权限。
.RE

.sp
.ne 2
.mk
.na
\fBeveryone@:<perms>[:inheritance flags]:<allow|deny>\fR
.ad
.sp .6
.RS 4n
所有人（包括文件所有者和组成员）的权限。
.RE

.sp
.ne 2
.mk
.na
\fBuser:<username>:<perms>[:inheritance flags]:<allow|deny>\fR
.ad
.sp .6
.RS 4n
特定用户的权限。
.RE

.sp
.ne 2
.mk
.na
\fBusersid:<sid string>:<perms>[:inheritance flags]:<allow|deny>\fR
.ad
.sp .6
.RS 4n
特定用户的权限，但是用户由 SID 指定。
.RE

.sp
.ne 2
.mk
.na
\fBgroup:<groupname>:<perms>[:inheritance flags]:<allow|deny>\fR
.ad
.sp .6
.RS 4n
特定组的权限。
.RE

.sp
.ne 2
.mk
.na
\fBgroupsid:<sid string>:<perms>[:inheritance flags]:<allow|deny>\fR
.ad
.sp .6
.RS 4n
特定组的权限，但是组由 SID 指定。
.RE

.sp
.ne 2
.mk
.na
\fBsid:<sid string>:<perms>[:inheritance flags]:<allow|deny>\fR
.ad
.sp .6
.RS 4n
特定 SID 的权限，但是 SID 是用户还是组无关紧要。
.RE

.sp
.LP
可采用三种不同 \fBchmod\fR ACL 格式指定权限：详细、紧凑或位置。详细格式使用字词指示用正斜杠 (\fB/\fR) 字符分隔权限。紧凑格式使用权限字母标识权限，位置格式使用权限字母标识权限，或使用连字符 (\fB-\fR) 标识没有任何权限。
.sp
.LP
详细模式的权限以及其括号中的缩写形式（紧凑和位置模式）如下所述：
.sp
.ne 2
.mk
.na
\fBread_data (\fBr\fR)\fR
.ad
.sp .6
.RS 4n
读取文件数据的权限。
.RE

.sp
.ne 2
.mk
.na
\fBlist_directory (\fBr\fR)\fR
.ad
.sp .6
.RS 4n
列出目录内容的权限。
.RE

.sp
.ne 2
.mk
.na
\fBwrite_data (\fBw\fR)\fR
.ad
.sp .6
.RS 4n
在文件的偏移范围内任意位置修改文件数据的权限。
.RE

.sp
.ne 2
.mk
.na
\fBadd_file (\fBw\fR)\fR
.ad
.sp .6
.RS 4n
向目录中添加新文件的权限。
.RE

.sp
.ne 2
.mk
.na
\fBappend_data (\fBp\fR)\fR
.ad
.sp .6
.RS 4n
修改文件数据的能力，但仅从 EOF 开始。
.sp
当前不支持此权限。
.RE

.sp
.ne 2
.mk
.na
\fBadd_subdirectory (\fBp\fR)\fR
.ad
.sp .6
.RS 4n
在目录中创建子目录的权限。
.RE

.sp
.ne 2
.mk
.na
\fBread_xattr (\fBR\fR)\fR
.ad
.sp .6
.RS 4n
读取文件扩展属性的能力。
.RE

.sp
.ne 2
.mk
.na
\fBwrite_xattr (\fBW\fR)\fR
.ad
.sp .6
.RS 4n
创建扩展属性或向扩展属性目录写入的能力。
.RE

.sp
.ne 2
.mk
.na
\fBexecute (\fBx\fR)\fR
.ad
.sp .6
.RS 4n
执行文件的权限。
.RE

.sp
.ne 2
.mk
.na
\fBread_attributes (\fBa\fR)\fR
.ad
.sp .6
.RS 4n
读取文件的基本属性（非 ACL）的能力。
.RE

.sp
.ne 2
.mk
.na
\fBwrite_attributes (\fBA\fR)\fR
.ad
.sp .6
.RS 4n
将与文件或目录关联的时间更改为任意值的权限。
.RE

.sp
.ne 2
.mk
.na
\fBdelete (\fBd\fR)\fR
.ad
.sp .6
.RS 4n
删除文件的权限。
.sp
有关删除权限行为的更多信息，请参见\fI《Managing ZFS File Systems in Oracle Solaris 11.3》\fR。
.RE

.sp
.ne 2
.mk
.na
\fBdelete_child (\fBD\fR)\fR
.ad
.sp .6
.RS 4n
删除目录中的文件的权限。
.sp
有关删除权限行为的更多信息，请参见\fI《Managing ZFS File Systems in Oracle Solaris 11.3》\fR。
.RE

.sp
.ne 2
.mk
.na
\fBread_acl (\fBc\fR)\fR
.ad
.sp .6
.RS 4n
读取文件 ACL 的权限。
.RE

.sp
.ne 2
.mk
.na
\fBwrite_acl (\fBC\fR)\fR
.ad
.sp .6
.RS 4n
写入文件 ACL 的权限。
.RE

.sp
.ne 2
.mk
.na
\fBwrite_owner (\fBo\fR)\fR
.ad
.sp .6
.RS 4n
更改文件所有者的权限。
.RE

.sp
.ne 2
.mk
.na
\fBsynchronize (\fBs\fR)\fR
.ad
.sp .6
.RS 4n
在支持同步读写的服务器上本地访问文件的权限。
.sp
当前不支持此权限。
.RE

.sp
.LP
使用紧凑 ACL 格式时，将通过使用指示权限的 14 个唯一字母来指定权限。
.sp
.LP
使用位置 ACL 格式时，将权限指定为类似于 \fBls\fR \fB-V\fR 格式的位置参数。连字符 (\fB-\fR) 指示在该位置未授予任何权限，可以忽略它，只需指定必需的字母。
.sp
.LP
将按照位置表示法中指定的顺序列出上面的字母。 
.sp
.LP
使用这些字母指定权限的方式如下：
.sp
.in +2
.nf
rwx--D--------
.fi
.in -2
.sp

.sp
.LP
可以删除连字符，按如下方式压缩字符串：
.sp
.in +2
.nf
rwxD
.fi
.in -2
.sp

.sp
.LP
还支持多个特殊权限集或别名。以下权限集的使用方式与指定详细权限的方式相同。 
.sp
.ne 2
.mk
.na
\fB\fBfull_set\fR\fR
.ad
.sp .6
.RS 4n
所有权限。
.RE

.sp
.ne 2
.mk
.na
\fB\fBmodify_set\fR\fR
.ad
.sp .6
.RS 4n
除 \fBwrite_acl\fR 和 \fBwrite_owner\fR 以外的所有权限。
.RE

.sp
.ne 2
.mk
.na
\fB\fBread_set\fR\fR
.ad
.sp .6
.RS 4n
\fBread_data、read_acl、read_attributes\fR 和 \fBread_xattr\fR。
.RE

.sp
.ne 2
.mk
.na
\fB\fBwrite_set\fR\fR
.ad
.sp .6
.RS 4n
\fBwrite_data、append_data、write_attributes\fR 和 \fBwrite_xattr\fR
.RE

.sp
.LP
可以采用三种格式指定可选继承标志。第一种格式使用字词指明各种继承标志，以正斜杠 (\fB/\fR) 字符分隔不同的标志。
.sp
.ne 2
.mk
.na
\fBfile_inherit (\fBf\fR)\fR
.ad
.sp .6
.RS 4n
继承到所有新创建的文件。
.RE

.sp
.ne 2
.mk
.na
\fBdir_inherit (\fBd\fR)\fR
.ad
.sp .6
.RS 4n
继承到所有新创建的目录。
.RE

.sp
.ne 2
.mk
.na
\fBinherit_only (\fBi\fR)\fR
.ad
.sp .6
.RS 4n
如果放置到某个目录上，不应用于该目录，仅继承到新创建的文件和目录。该标志要求还要指定 \fBfile_inherit\fR 和/或 \fBdir_inherit\fR。
.RE

.sp
.ne 2
.mk
.na
\fBno_propagate (\fBn\fR)\fR
.ad
.sp .6
.RS 4n
表示 ACL 条目应该继承到目录中的对象，但是向下一个级别后继承应该停止。该标志要求还要指定 \fBfile_inherit\fR 和/或 \fBdir_inherit\fR。
.RE

.sp
.LP
列出的继承标志也可以采用紧凑格式指定，或指定为类似于 \fBls\fR \fB-V\fR 格式的位置参数。连字符表示该位置的继承标志未以 ACL 位置格式指定。
.sp
.LP
使用这些字母，可以按以下任意等效方式指定继承标志。
.sp
.in +2
.nf
file_inherit/dir_inherit/no_propagate
.fi
.in -2
.sp

.sp
.in +2
.nf
fd-n--
.fi
.in -2
.sp

.sp
.in +2
.nf
fdn
.fi
.in -2
.sp

.sp
.LP
使用这种继承模型时，可以指定 ACL 条目，例如：
.sp
.in +2
.nf
user:tom:read_data/write_data/read_attributes:file_inherit:allow
user:fred:read_data:file_inherit/dir_inherit:deny
user:bob:read_data:allow
.fi
.in -2
.sp

.SS "属性运算"
.sp
.LP
属性运算命令行格式如下：
.sp
.in +2
.nf
chmod [\fIoptions\fR] \fIattribute_specification_list\fR \fIfile\fR ...
.fi
.in -2
.sp

.sp
.LP
其中 \fIattribute_specification_list\fR 是指字符 \fBS\fR 后跟一个或多个 \fIattribute_specifications\fR 的逗号分隔列表。每个 \fIattribute_specification\fR 格式如下：
.sp
.in +2
.nf
[\fIoperator\fR]\fIattribute_specifier\fR
.fi
.in -2
.sp

.sp
.LP
\fIoperator\fR 为以下运算符之一：
.sp
.ne 2
.mk
.na
\fB\fB+\fR\fR
.ad
.sp .6
.RS 4n
将关联 \fIattribute_specifier\fR 指定的每个属性调整为与 \fIattribute_specifier\fR 指定的值匹配。
.RE

.sp
.ne 2
.mk
.na
\fB\fB-\fR\fR
.ad
.sp .6
.RS 4n
将关联 \fIattribute_specifier\fR 指定的每个属性调整为与 \fIattribute_specifier\fR 指定的值的逆向值匹配。
.RE

.sp
.ne 2
.mk
.na
\fB\fB=\fR\fR
.ad
.sp .6
.RS 4n
将关联 \fIattribute_specifier\fR 指定的每个属性调整为与 \fIattribute_specifier\fR 指定的值匹配。将清除与当前文件关联且并非由 \fIattribute_specifier\fR 指定的任何布尔读写扩展系统属性。
.RE

.sp
.LP
如果未在 \fIattribute_specification\fR 中指定 \fIoperator\fR，则 \fBchmod\fR 的行为方式如同指定了 \fB+\fR 一样。
.sp
.LP
\fIattribute_specifier\fR 采用以下几种格式之一：
.sp
.ne 2
.mk
.na
\fB\fBa\fR\fR
.ad
.sp .6
.RS 4n
设置与当前文件关联的所有布尔读写扩展系统属性。
.RE

.sp
.ne 2
.mk
.na
\fB\fBc[\fIcompact_attribute_list\fR]\fR\fR
.ad
.br
.na
\fB\fBc'{'\fIcompact_attribute_list\fR'}'\fR\fR
.ad
.sp .6
.RS 4n
设置由 \fIcompact_attribute_list\fR 标识的每个布尔读写扩展系统属性。
.RE

.sp
.ne 2
.mk
.na
\fB\fBv[\fIverbose_attribute_setting\fR]\fR\fR
.ad
.br
.na
\fB\fBv['{'\fIverbose_attribute_setting_list\fR'}']\fR\fR
.ad
.sp .6
.RS 4n
设置由 \fIverbose_attribute_setting\fR 标识的每个布尔读写扩展系统属性。
.RE

.sp
.LP
\fIcompact_attribute_list\fR 是本节后面\fB属性名称和缩写字符\fR列表中的零个或多个相邻属性缩写字符的列表。\fIcompact_attribute_list\fR 中可以包含任意数量的连字符 (\fB-\fR)。系统将忽略这些连字符。
.sp
.LP
\fIverbose_attribute_setting\fR 是本节后面\fB属性名称和缩写字符\fR列表中的属性名称，也可以选择紧接其前面添加 \fBno\fR。如果属性名称未与 \fBno\fR 一起使用，将设置属性；否则将清除属性。
.sp
.LP
\fIverbose_attribute_setting_list\fR 是零个或多个逗号分隔 \fIverbose_attribute_setting\fR。
.sp
.LP
将累积为一个文件指定的多项运算，将其全部设置为一个文件操作数的一项属性设置运算。如果某个属性在 \fIattribute_specification_list\fR 中指定了多次，将应用最后一次指定的运算。 
.sp
.LP
以下是\fB属性名称和缩写字符\fR列表：
.sp
.ne 2
.mk
.na
\fB\fB属性名称\fR\fR
.ad
.sp .6
.RS 4n
\fB缩写字符\fR
.RE

.sp
.ne 2
.mk
.na
\fB\fBhidden\fR\fR
.ad
.sp .6
.RS 4n
\fBH\fR
.RE

.sp
.ne 2
.mk
.na
\fB\fBsparse\fR\fR
.ad
.sp .6
.RS 4n
\fBs\fR
.RE

.sp
.ne 2
.mk
.na
\fB\fBsystem\fR\fR
.ad
.sp .6
.RS 4n
\fBS\fR
.RE

.sp
.ne 2
.mk
.na
\fB\fBreadonly\fR\fR
.ad
.sp .6
.RS 4n
\fBR\fR
.RE

.sp
.ne 2
.mk
.na
\fB\fBarchive\fR\fR
.ad
.sp .6
.RS 4n
\fBA\fR
.RE

.sp
.ne 2
.mk
.na
\fB\fBnounlink\fR\fR
.ad
.sp .6
.RS 4n
\fBu\fR
.RE

.sp
.ne 2
.mk
.na
\fB\fBimmutable\fR\fR
.ad
.sp .6
.RS 4n
\fBi\fR
.RE

.sp
.ne 2
.mk
.na
\fB\fBappendonly\fR\fR
.ad
.sp .6
.RS 4n
\fBa\fR
.RE

.sp
.ne 2
.mk
.na
\fB\fBnodump\fR\fR
.ad
.sp .6
.RS 4n
\fBd\fR
.RE

.sp
.ne 2
.mk
.na
\fB\fBav_quarantined\fR\fR
.ad
.sp .6
.RS 4n
\fBq\fR
.RE

.sp
.ne 2
.mk
.na
\fB\fBav_modified\fR\fR
.ad
.sp .6
.RS 4n
\fBm\fR
.RE

.sp
.ne 2
.mk
.na
\fBsensitive\fR
.ad
.sp .6
.RS 4n
\fBT\fR
.RE

.SH 选项
.sp
.LP
支持以下选项：
.sp
.ne 2
.mk
.na
\fB\fB-f\fR\fR
.ad
.sp .6
.RS 4n
强制。如果无法更改文件模式，\fBchmod\fR 不会报告错误。
.RE

.sp
.ne 2
.mk
.na
\fB\fB-R\fR\fR
.ad
.sp .6
.RS 4n
向下递归目录参数，在此过程中设置每个文件的模式。如果遇到符号链接，将更改目标文件的模式，但是不执行递归。
.RE

.sp
.ne 2
.mk
.na
\fB\fB-@\fR \fInamed_attribute\fR\fR
.ad
.sp .6
.RS 4n
对每个文件操作数的指定扩展属性文件而非文件操作数本身执行属性运算。如果提供了多项 \fB-@\fR 运算，属性规范模式将应用于每个指定的属性文件。
.sp
\fB*\fR 的指定属性会将含义转至 \fBchmod\fR，该命令将认为表示与文件操作数关联的所有扩展属性文件。这不适用于特殊文件 \fB\&.\fR 和 \fB\&..\fR。 
.sp
\fB\&..\fR 的指定属性会将特殊含义转至 \fBchmod\fR，该命令将认为表示文件操作数本身。这样，调用一次 \fBchmod\fR 即可将属性规范模式应用于文件操作数的指定属性文件和文件操作数本身。
.RE

.SH 操作数
.sp
.LP
支持下列操作数：
.sp
.ne 2
.mk
.na
\fB\fIabsolute-mode\fR\fR
.ad
.br
.na
\fB\fIsymbolic-mode-list\fR\fR
.ad
.sp .6
.RS 4n
表示将对 \fIfile\fR 操作数之一指定的每个文件的文件模式位做出的更改。有关更多信息，请参见本手册页\fB\fR“说明”部分中的\fB\fR“绝对模式”和\fB\fR“符号模式”。
.RE

.sp
.ne 2
.mk
.na
\fB\fIacl_operation\fR\fR
.ad
.sp .6
.RS 4n
表示要对文件 ACL 执行的修改。有关更多信息，请参见\fB\fR“说明”部分中的\fB\fR“ACL 运算”。
.sp
\fIacl_operation\fR 采用以下几种格式之一：
.sp
.in +2
.nf
\fBA[\fR\fInumber\fR\fB] -\fR
\fBA-\fR\fIacl_specification\fR
\fBA[\fR\fIindex\fR\fB]{+|=}\fR\fBacl_specification\fR 
.fi
.in -2
.sp

.RE

.sp
.ne 2
.mk
.na
\fB\fIattribute_specification_list\fR\fR
.ad
.sp .6
.RS 4n
表示要对文件属性执行的修改。有关更多信息，请参见本手册页\fB\fR“说明”部分中的“属性运算”。 
.RE

.sp
.ne 2
.mk
.na
\fB\fIfile\fR\fR
.ad
.sp .6
.RS 4n
要修改其文件模式位的文件的路径名。
.RE

.SH 用法
.sp
.LP
有关 \fBchmod\fR 遇到大于或等于 2 GB（2^31 字节）文件时行为的说明，请参见 \fBlargefile\fR(5)。
.SH 示例
.LP
\fB示例 1 \fR拒绝\fB执行\fR权限
.sp
.LP
以下示例将拒绝所有人的执行权限： 

.sp
.in +2
.nf
% chmod a-x \fIfile\fR
.fi
.in -2
.sp

.LP
\fB示例 2 \fR允许\fB只读\fR权限
.sp
.LP
以下示例将允许所有人的只读权限： 

.sp
.in +2
.nf
% chmod 444 \fIfile\fR
.fi
.in -2
.sp

.LP
\fB示例 3 \fR使文件\fB可读\fR\fB可写\fR
.sp
.LP
以下示例将使文件可由组和其他用户读写：

.sp
.in +2
.nf
% chmod go+rw \fIfile\fR
% chmod 066 \fIfile\fR 
.fi
.in -2
.sp

.LP
\fB示例 4 \fR锁定文件拒绝访问
.sp
.LP
以下示例将锁定文件拒绝访问：

.sp
.in +2
.nf
$ chmod +l \fIfile\fR
.fi
.in -2
.sp

.LP
\fB示例 5 \fR授予对文件的\fB读取\fR、\fB写入\fR、\fB执行\fR和\fB设置组 ID\fR 权限
.sp
.LP
以下示例将授予所有人对文件的读取、写入和执行权限并启用设置组 ID：

.sp
.in +2
.nf
$ chmod a=rwx,g+s \fIfile\fR
$ chmod 2777 \fIfile\fR
.fi
.in -2
.sp

.LP
\fB示例 6 \fR在 ZFS 文件中附加新 ACL 条目
.sp
.LP
以下示例将在 ZFS 文件中附加新 ACL 条目：

.sp
.LP
首先，显示当前 ACL：

.sp
.in +2
.nf
$ ls -v file.3
-rw-r--r--   1 marks    staff          0 Oct  9 15:49 file.3
      0:owner@:execute:deny
      1:owner@:read_data/write_data/append_data/write_xattr/
         write_attributes/write_acl/write_owner:allow
      2:group@:write_data/append_data/execute:deny
      3:group@:read_data:allow
      4:everyone@:write_data/append_data/write_xattr/execute/
        write_attributes/write_acl/write_owner:deny
      5:everyone@:read_data/read_xattr/read_attributes/read_acl/
         synchronize:allow
.fi
.in -2
.sp

.sp
.LP
执行以下命令：

.sp
.in +2
.nf
$ chmod A+user:lp:read_data:deny file.3
.fi
.in -2
.sp

.sp
.LP
显示新 ACL：

.sp
.in +2
.nf
$ ls -v file.3
-rw-r--r--+  1 marks    staff          0 Oct  9 15:49 file.3
      0:user:lp:read_data:deny
      1:owner@:execute:deny
      2:owner@:read_data/write_data/append_data/write_xattr/
          write_attributes/write_acl/write_owner:allow
      3:group@:write_data/append_data/execute:deny
      4:group@:read_data:allow
      5:everyone@:write_data/append_data/write_xattr/execute/
          write_attributes/write_acl/write_owner:deny
      6:everyone@:read_data/read_xattr/read_attributes/read_acl/
          synchronize:allow
.fi
.in -2
.sp

.LP
\fB示例 7 \fR在 UFS 文件中附加 POSIX 样式的新 ACL 条目
.sp
.LP
以下示例将在 UFS 文件中附加 POSIX 样式的新 ACL 条目：

.sp
.LP
首先，显示当前 ACL：

.sp
.in +2
.nf
$ ls -v file.2
-rw-r--r--   1 marks    staff          0 Oct  9 15:52 file.2
      0:user::rw-
      1:group::r--           #effective:r--
      2:mask:r--
      3:other:r--
.fi
.in -2
.sp

.sp
.LP
执行以下命令： 

.sp
.in +2
.nf
$ chmod A+user:lp:-wx file.2
.fi
.in -2
.sp

.sp
.LP
显示新 ACL： 

.sp
.in +2
.nf
$ ls -v file.2
-rw-r--r--+  1 marks    staff          0 Oct  9 15:52 file.2
      0:user::rw-
      1:user:lp:-wx          #effective:---
      2:group::r--           #effective:r--
      3:mask:r--
      4:other:r--
.fi
.in -2
.sp

.LP
\fB示例 8 \fR在 ZFS 文件中的特定位置插入 ACL 条目
.sp
.LP
以下示例将在 ZFS 文件系统中的特定位置插入 ACL 条目：本例还说明了紧凑 ACL 格式的使用方法。

.sp
.LP
首先，显示 ACL 从中选择要插入新 ACE 的位置。

.sp
.in +2
.nf
% ls -V file.1
-rw-r--r--+  1 root     root           0 Oct  6 12:16 file.1
     user:lp:rw------------:------:allow
      owner@:--x-----------:------:deny
      owner@:rw-p---A-W-Co-:------:allow
      group@:-wxp----------:------:deny
      group@:r-------------:------:allow
   everyone@:-wxp---A-W-Co-:------:deny
   everyone@:r-----a-R-c--s:------:allow
.fi
.in -2
.sp

.sp
.LP
接下来，在位置 3 插入一个新条目。这样会下推当前在位置 3 至 6 的条目。

.sp
.LP
执行以下命令：

.sp
.in +2
.nf
$ chmod A3+user:marks:r:deny file.1
.fi
.in -2
.sp

.sp
.LP
显示新 ACL：

.sp
.in +2
.nf
$ ls -V file.1
-rw-r--r--+  1 root     staff          0 Feb  3 14:13 file.1
     user:lp:rw------------:------:allow
      owner@:--x-----------:------:deny
      owner@:rw-p---A-W-Co-:------:allow
  user:marks:r-------------:------:deny
      group@:-wxp----------:------:deny
      group@:r-------------:------:allow
   everyone@:-wxp---A-W-Co-:------:deny
   everyone@:r-----a-R-c--s:------:allow
.fi
.in -2
.sp

.LP
\fB示例 9 \fR在 UFS 文件中的特定位置插入 POSIX 样式的 ACL
.sp
.LP
将 ACL 存储到文件系统中时，文件系统将对其进行重新排序。以下示例说明了这种行为。

.sp
.in +2
.nf
$ ls -v file.1
-rw-r--r--+  1 root     root           0 Sep 29 16:10 file.1
      0:user::rw-
      1:user:lp:rw-          #effective:r--
      2:group::r--           #effective:r--
      3:mask:r--
      4:other:r--
.fi
.in -2
.sp

.sp
.LP
现在，在索引位置 3 插入一个条目。命令正常执行，但是文件系统会对 ACL 进行重新排序。

.sp
.in +2
.nf
$ chmod A3+user:marks:rw- file.1
$ ls -v file.1
-rw-r--r--+  1 root     root           0 Sep 29 16:10 file.1
      0:user::rw-
      1:user:lp:rw-           #effective:r--
      2:user:marks:rw-        #effective:r--
      3:group::r--            #effective:r--
      4:mask:r--
      5:other:r--
.fi
.in -2
.sp

.sp
.LP
实际上最终是在位置 2 插入了 ACL 条目，而不是按要求在位置 3 插入。

.LP
\fB示例 10 \fR从 ZFS 文件中删除 ACL 条目
.sp
.LP
以下示例将从 ACL 中删除 \fBlp\fR 条目： 

.sp
.in +2
.nf
$ ls -v file.3
-rw-r--r--+  1 marks    staff          0 Oct  9 15:49 file.3
      0:user:lp:read_data:deny
      1:owner@:execute:deny
      2:owner@:read_data/write_data/append_data/write_xattr/
         write_attributes/write_acl/write_owner:allow
      3:group@:write_data/append_data/execute:deny
      4:group@:read_data:allow
      5:everyone@:write_data/append_data/write_xattr/execute/
         write_attributes/write_acl/write_owner:deny
      6:everyone@:read_data/read_xattr/read_attributes/read_acl/
         synchronize:allow
.fi
.in -2
.sp

.sp
.in +2
.nf
$ chmod A-user:lp:read_data:deny file.3
$ ls -v file.3
-rw-r--r--   1 marks    staff          0 Oct  9 15:49 file.3
      0:owner@:execute:deny
      1:owner@:read_data/write_data/append_data/write_xattr/
         write_attributes/write_acl/write_owner:allow
      2:group@:write_data/append_data/execute:deny
      3:group@:read_data:allow
      4:everyone@:write_data/append_data/write_xattr/execute/
         write_attributes/write_acl/write_owner:deny
      5:everyone@:read_data/read_xattr/read_attributes/read_acl/
         synchronize:allow
.fi
.in -2
.sp

.LP
\fB示例 11 \fR从 UFS 文件中删除 POSIX 样式的 ACL
.sp
.LP
以下示例将从 ACL 中删除 \fBlp\fR 条目： 

.sp
.in +2
.nf
$ ls -v file.2
-rw-r--r--+  1 marks    staff          0 Oct  9 15:52 file.2
      0:user::rw-
      1:user:lp:-wx           #effective:---
      2:group::r--            #effective:r--
      3:mask:r--
      4:other:r--
.fi
.in -2
.sp

.sp
.in +2
.nf
$ chmod A-user:lp:-wx file.2
$ ls -v file.2
-rw-r--r--   1 marks    staff          0 Oct  9 15:52 file.2
      0:user::rw-
      1:group::r--            #effective:r--
      2:mask:r--
      3:other:r--
.fi
.in -2
.sp

.LP
\fB示例 12 \fR按索引编号从 ZFS 文件中删除特定 ACL 条目
.sp
.LP
请考虑以下 ACL：

.sp
.in +2
.nf
$ ls -v file
    0:group:staff:read_data/write_data/execute/read_acl:allow
    1:user:bin:read_data:deny
    2:user:bin:read_data:allow
    3:owner@:write_data/append_data:deny
    4:owner@:read_data/write_xattr/execute/write_attributes/write_acl
        /write_owner:allow
    5:group@:write_data/append_data:deny
    6:group@:read_data/execute:allow
    7:everyone@:write_data/append_data/write_xattr/write_attributes
        /write_acl/write_owner:deny
    8:everyone@:read_data/read_xattr/execute/read_attributes/read_acl
        /synchronize:allow
.fi
.in -2
.sp

.sp
.LP
删除 bin 的第二个用户条目。

.sp
.in +2
.nf
$ chmod A2- file
$ ls -v file
    0:group:staff:read_data/write_data/execute/read_acl:allow
    1:user:bin:read_data:deny
    2:owner@:write_data/append_data:deny
    3:owner@:read_data/write_xattr/execute/write_attributes/write_acl
       /write_owner:allow
    4:group@:write_data/append_data:deny
    5:group@:read_data/execute:allow
    6:everyone@:write_data/append_data/write_xattr/write_attributes
       /write_acl/write_owner:deny
    7:everyone@:read_data/read_xattr/execute/read_attributes/read_acl
       /synchronize:allow
.fi
.in -2
.sp

.LP
\fB示例 13 \fR从 UFS 文件中删除 POSIX 样式的特定 ACL 条目
.sp
.LP
下面的示例将按索引编号从以下 ACL 中删除 lp 条目：

.sp
.in +2
.nf
$ ls -v file.1
-rw-r--r--+  1 root     root           0 Sep 29 16:10 file.1
      0:user::rw-
      1:user:lp:rw-              #effective:r--
      2:group::r--               #effective:r--
      3:mask:r--
      4:other:r--

      $ chmod A1- file.1
      $ ls -v
-rw-r--r--+  1 root     root           0 Sep 29 16:10 file.1
      0:user::rw-
      1:group::r--               #effective:r--
      2:mask:r--
      3:other:r--
.fi
.in -2
.sp

.LP
\fB示例 14 \fR从文件中删除所有 ACL
.sp
.LP
以下命令可用于 NFSv4/ZFS 或 POSIX 样式的 ACL。

.sp
.LP
请考虑以下 ACL：

.sp
.in +2
.nf
$ ls -v file.3
-rw-r--r--+  1 marks    staff          0 Oct  9 15:49 file.3
      0:user:lp:read_data/write_data:allow
      1:user:marks:read_acl:allow
      2:owner@:execute:deny
      3:owner@:read_data/write_data/append_data/write_xattr/
         write_attributes/write_acl/write_owner:allow
      4:group@:write_data/append_data/execute:deny
      5:group@:read_data:allow
      6:everyone@:write_data/append_data/write_xattr/execute/
         write_attributes/write_acl/write_owner:deny
      7:everyone@:read_data/read_xattr/read_attributes/read_acl/
         synchronize:allow
.fi
.in -2
.sp

.sp
.LP
有效地删除现有 ACL 并替换为表示文件权限位的 ACL。

.sp
.in +2
.nf
$ chmod A- file.3
$ ls -v file.3
-rw-r--r--  1 marks    staff          0 Oct  9 15:49 file.3
     0:owner@:execute:deny
     1:owner@:read_data/write_data/append_data/write_xattr/
        write_attributes/write_acl/write_owner:allow
     2:group@:write_data/append_data/execute:deny
     3:group@:read_data:allow
     4:everyone@:write_data/append_data/write_xattr/execute/
        write_attributes/write_acl/write_owner:deny
     5:everyone@:read_data/read_xattr/read_attributes/read_acl/
       synchronize:allow
.fi
.in -2
.sp

.LP
\fB示例 15 \fR替换 ZFS 文件中的全部 ACL 条目
.sp
.LP
如果要完全替换 ACL，请使用以下 \fBchmod\fR 语法：

.sp
.in +2
.nf
$ chmod A=owner@:read_data/write_data:allow,group@:read_data/
               write_data:allow,user:lp:read_data:allow file.4
$ ls -v file.4
-rw-rw----+  1 marks    staff          0 Oct  9 16:12 file.4
       0:owner@:read_data/write_data:allow
       1:group@:read_data/write_data:allow
       2:user:lp:read_data:allow
.fi
.in -2
.sp

.LP
\fB示例 16 \fR替换 UFS 文件中 POSIX 样式的整个 ACL
.sp
.LP
该操作稍微有些复杂。替换的 ACL 需要用于表示文件所有者、文件组所有者、其他用户和掩码的一些必要条目以及要设置的其他任何条目。

.sp
.in +2
.nf
$ chmod A=user::rw-,group::rw-,other::---,mask:r--,
              user:lp:r-- file.3
$ ls -v file.3
-rw-r-----+  1 root     root           0 Oct  9 16:14 file.3
        0:user::rw-
        1:user:lp:r--        #effective:r--
        2:group::rw-         #effective:r--
        3:mask:r--
        4:other:---
.fi
.in -2
.sp

.LP
\fB示例 17 \fR替换 ZFS 文件中的特定条目
.sp
.LP
请考虑以下 ACL：

.sp
.in +2
.nf
$ ls -v file.5
-rw-r--r--+  1 marks    staff          0 Oct  9 16:18 file.5
     0:user:marks:read_data:allow
     1:owner@:execute:deny
     2:owner@:read_data/write_data/append_data/write_xattr/
        write_attributes/write_acl/write_owner:allow
     3:group@:write_data/append_data/execute:deny
     4:group@:read_data:allow
     5:everyone@:write_data/append_data/write_xattr/execute/
        write_attributes/write_acl/write_owner:deny
     6:everyone@:read_data/read_xattr/read_attributes/read_acl/
        synchronize:allow
.fi
.in -2
.sp

.sp
.LP
现在，将用户 marks 的访问权限从允许更改为拒绝：

.sp
.in +2
.nf
$ chmod A0=user:marks:read_data:deny file.5
$ ls -v file.5
-rw-r--r--+  1 marks   staff          0 Aug 23 09:11 file.5
0:user:marks:read_data:deny 
1:owner@:read_data/write_data/append_data/write_xattr/write_attributes
     /write_acl/write_owner:allow
2:group@:write_data/append_data/execute:deny
3:group@:read_data:allow
4:everyone@:write_data/append_data/write_xattr/execute/write_attributes
     /write_acl/write_owner:deny
5:everyone@:read_data/read_xattr/read_attributes/read_acl/synchronize
     :allow
.fi
.in -2
.sp

.LP
\fB示例 18 \fR替换 UFS 文件中 POSIX 样式的特定 ACL
.sp
.LP
请考虑以下 ACL：

.sp
.in +2
.nf
$ ls -v file.4
-rw-r--r--+  1 marks    staff          0 Oct  9 16:21 file.4
        0:user::rw-
        1:user:lp:rwx         #effective:r--
        2:group::r--          #effective:r--
        3:mask:r--
        4:other:r--
.fi
.in -2
.sp

.sp
.LP
现在，将 \fBlp\fR 的权限从 \fBrwx\fR 更改为 \fBr--\fR：

.sp
.in +2
.nf
$ chmod A1=user:lp:r-- file.4

$ ls -v file
-rw-r--r--+  1 marks    staff          0 Oct  9 16:21 file.4
        0:user::rw-
        1:user:lp:r--         #effective:r--
        2:group::r--          #effective:r--
        3:mask:r--
        4:other:r--
.fi
.in -2
.sp

.LP
\fB示例 19 \fR在 ZFS 文件上设置 ACL 继承标志
.sp
.LP
只能在 ZFS 文件上设置继承标志。在目录上设置 ACL 时，可选择设置多个继承标志。 

.sp
.LP
假设有一个用户 \fBlp\fR 对应的 ACL 条目，您希望其继承到某个目录中新创建的文件。首先，需要在该目录上创建一个可继承的 ACL 条目：

.sp
.in +2
.nf
$ chmod A+user:lp:read_data:file_inherit:allow test.dir
$ ls -dv test.dir
drwxr-xr-x+  2 marks   staff          2 Aug 23 09:08 test.dir/
0:user:lp:read_data:file_inherit:allow
1:owner@::deny 
2:owner@:list_directory/read_data/add_file/write_data/add_subdirectory
     /append_data/write_xattr/execute/write_attributes/write_acl
     /write_owner:allow
3:group@:add_file/write_data/add_subdirectory/append_data:deny
4:group@:list_directory/read_data/execute:allow 
5:everyone@:add_file/write_data/add_subdirectory/append_data/write_xattr
     /write_attributes/write_acl/write_owner:deny
6:everyone@:list_directory/read_data/read_xattr/execute/read_attributes
     /read_acl/synchronize:allow
.fi
.in -2
.sp

.sp
.LP
\fBlp\fR 条目即会继承到目录 \fBtest.dir\fR 中新创建的文件。

.sp
.in +2
.nf
$ touch test.dir/file.test
$ ls -v test.dir/file.test
-rw-r--r--+  1 marks    staff          0 Oct  9 16:29 test.dir/file.test
     0:user:lp::deny
     1:user:lp:read_data:allow
     2:owner@:execute:deny
     3:owner@:read_data/write_data/append_data/write_xattr/
         write_attributes/write_acl/write_owner:allow
     4:group@:write_data/append_data/execute:deny
     5:group@:read_data:allow
     6:everyone@:write_data/append_data/write_xattr/execute/
         write_attributes/write_acl/write_owner:deny
     7:everyone@:read_data/read_xattr/read_attributes/read_acl/
 synchronize:allow
.fi
.in -2
.sp

.sp
.LP
用户 \fBlp\fR 条目即会继承到新创建的文件。可以指定继承标志的多个组合。例如，如果希望 \fBlp\fR 条目也继承到多个目录，则可以使用以下命令：

.sp
.in +2
.nf
$ chmod A+user:lp:read_data:file_inherit/\e
      dir_inherit:allow test.dir
.fi
.in -2
.sp

.LP
\fB示例 20 \fR替换 ZFS 文件的系统属性
.sp
.LP
以下示例将替换 ZFS 文件的系统属性：

.sp
.in +2
.nf
$ chmod S=v{archive,hidden,readonly,system,appendonly,\e
     nonodump,immutable,noav_modified,noav_quarantined,\e
     nounlink,nosensitive} file1
.fi
.in -2
.sp

.sp
.LP
或

.sp
.in +2
.nf
$ chmod S=c{AHRSaiu} file1
.fi
.in -2
.sp

.sp
.LP
或

.sp
.in +2
.nf
$ chmod S=c{AHRSa-i--u-} file1
.fi
.in -2
.sp

.sp
.LP
或

.sp
.in +2
.nf
$ chmod S=cAHRSaiu file1
.fi
.in -2
.sp

.sp
.LP
或

.sp
.in +2
.nf
$ chmod -@ '..' S=cAHRSaiu file1
.fi
.in -2
.sp

.sp
.LP
假设具有相应的特权，则将设置 \fBfile1\fR 的以下系统属性：\fBarchive\fR、\fBhidden\fR、\fBreadonly\fR、\fBsystem\fR、\fBappendonly\fR、\fBimmutable\fR 和 \fBnounlink\fR。假设具有相应的特权，则将清除 \fBfile1\fR 的以下系统属性：\fBnodump\fR、\fBav_modified\fR 和 \fBav_quarantined\fR 和 \fBsensitive\fR。

.LP
\fB示例 21 \fR清除 ZFS 文件的所有系统属性
.sp
.LP
以下示例将清除 ZFS 文件的所有系统属性：

.sp
.in +2
.nf
$ chmod S-a file1
.fi
.in -2
.sp

.sp
.LP
或

.sp
.in +2
.nf
$ chmod -@ '..' S-a file1
.fi
.in -2
.sp

.sp
.LP
假设具有相应的特权，则将清除 \fBfile1\fR 的所有布尔读写系统属性。

.LP
\fB示例 22 \fR设置 ZFS 文件的指定属性文件的系统属性
.sp
.LP
以下示例将设置 ZFS 文件的指定属性文件的系统属性，而非该文件本身的系统属性：

.sp
.in +2
.nf
$ chmod -@ myattr S+vhidden file1
.fi
.in -2
.sp

.sp
.LP
这样将设置 \fBfile1\fR 的指定属性文件 \fBmyattr\fR 的隐藏系统属性，而非该文件本身的隐藏系统属性。 

.LP
\fB示例 23 \fR设置 ZFS 文件的所有指定属性文件的系统属性
.sp
.LP
以下示例将设置 ZFS 文件的所有指定属性文件的系统属性，而非该文件本身的系统属性：

.sp
.in +2
.nf
$ chmod -@ '*' S+a file1
.fi
.in -2
.sp

.LP
\fB示例 24 \fR设置 ZFS 文件的所有指定属性文件的系统属性
.sp
.LP
以下示例将设置 ZFS 文件的所有指定属性文件的系统属性，以及该文件本身的系统属性：

.sp
.in +2
.nf
$ chmod -@ '..' -@ '*' S+vhidden file1
.fi
.in -2
.sp

.sp
.LP
这样将设置 \fBfile1\fR 的所有指定属性文件的隐藏系统属性，以及该文件本身的隐藏系统属性。

.LP
\fB示例 25 \fR在目录分层结构中向下递归
.sp
.LP
以下示例将在目录分层结构中向下递归，并设置所有指定属性文件、ZFS 文件操作数以及目录本身的所有系统属性：

.sp
.in +2
.nf
$ chmod -R -@ '..' -@ '*' S+a directory1
.fi
.in -2
.sp

.sp
.LP
这样将设置所有正规文件的所有指定属性文件和 \fBdirectory1\fR 目录分层结构中目录的隐藏系统属性，以及 \fBdirectory1\fR 本身的隐藏系统属性。

.LP
\fB示例 26 \fR设置 ZFS 文件的 \fBhidden\fR 和 \fBsystem\fR 系统属性
.sp
.LP
以下示例将设置 ZFS 文件的 \fBhidden\fR 和 \fBsystem\fR 系统属性：

.sp
.in +2
.nf
$ chmod S+cHS file1
.fi
.in -2
.sp

.sp
.LP
或

.sp
.in +2
.nf
$ chmod S+vhidden,+vsystem file1
.fi
.in -2
.sp

.sp
.LP
或

.sp
.in +2
.nf
$ chmod S+v{hidden,system} file1
.fi
.in -2
.sp

.sp
.LP
或

.sp
.in +2
.nf
$ chmod S+c{-HS--------} file1
.fi
.in -2
.sp

.sp
.LP
或

.sp
.in +2
.nf
$ chmod S-v{nohidden,nosystem} file1
.fi
.in -2
.sp

.sp
.LP
或

.sp
.in +2
.nf
$ chmod S-v{hidden,system},+v{hidden,system} file1
.fi
.in -2
.sp

.LP
\fB示例 27 \fR清除 ZFS 文件的所有系统属性
.sp
.LP
以下示例将清除 ZFS 文件的所有系统属性：

.sp
.in +2
.nf
$ chmod S-a file1
.fi
.in -2
.sp

.sp
.LP
或

.sp
.in +2
.nf
$ chmod S=v{} file1
.fi
.in -2
.sp

.sp
.LP
在下面的两个示例中，最后指定的属性运算优先执行。

.sp
.LP
在本例中，替换属性名称列表 (\fB{}\fR) 将清除 \fBfile1\fR 的所有系统属性：

.sp
.in +2
.nf
$ chmod S+cHS,=v{} file1
.fi
.in -2
.sp

.sp
.LP
在本例中，清除属性运算 (\fB-a\fR) 将清除 \fBfile1\fR 的所有系统属性：

.sp
.in +2
.nf
$ chmod S+vhidden,+vsystem,-a file1
.fi
.in -2
.sp

.LP
\fB示例 28 \fR设置文件的所有布尔读写系统属性的值
.sp
.LP
以下示例会将某个文件的所有布尔读写系统属性的值设置为与另一个文件的布尔读写系统属性的值相同：

.sp
.in +2
.nf
$ chmod S=v`ls -/v file1|sed -n '2s/.*{/{/p'` file2
.fi
.in -2
.sp

.sp
.LP
假设具有相应的特权，并且 \fBfile1\fR 和 \fBfile2\fR 支持的系统属性相同，则为 \fBfile1\fR 设置的所有系统属性也会为 \fBfile2\fR 设置。为 \fBfile1\fR 清除的所有系统属性也会为 \fBfile2\fR 清除。

.SH 环境变量
.sp
.LP
有关影响 \fBchmod\fR 执行的以下环境变量的说明，请参见 \fBenviron\fR(5)：\fBLANG\fR、\fBLC_ALL\fR、\fBLC_CTYPE\fR、\fBLC_MESSAGES\fR 和 \fBNLSPATH\fR。
.SH 退出状态
.sp
.LP
将返回以下退出值：
.sp
.ne 2
.mk
.na
\fB\fB0\fR\fR
.ad
.sp .6
.RS 4n
成功完成。
.RE

.sp
.ne 2
.mk
.na
\fB\fB>0\fR\fR
.ad
.sp .6
.RS 4n
出现错误。
.RE

.SH 属性
.sp
.LP
有关下列属性的说明，请参见 \fBattributes\fR(5)：
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i) 
lw(2.75i) |lw(2.75i) 
.
属性类型属性值
_
可用性system/core-os
_
CSIEnabled（已启用）
_
接口稳定性Committed（已确定）
.TE

.SH 另请参见
.sp
.LP
\fBgetfacl\fR(1)、\fBls\fR(1)、\fBsetfacl\fR(1)、\fBchmod\fR(2)、\fBfgetattr\fR(3C)、\fBacl\fR(5)、\fBattributes\fR(5)、\fBenviron\fR(5)、\fBfsattr\fR(5)、\fBlargefile\fR(5)、\fBstandards\fR(5)
.sp
.LP
\fI《Managing ZFS File Systems in Oracle Solaris 11.3》\fR
.SH 附注
.sp
.LP
绝对更改对目录的 set-group-\fBID\fR 位不起作用。必须使用 \fBg+s\fR 或 \fBg-s\fR。
.sp
.LP
\fBchmod\fR 允许生成无用的模式，前提是这些模式不违法（例如，使文本文件成为可执行文件）。\fBchmod\fR 不会检查文件类型来查看强制性锁定是否有意义。
.sp
.LP
如果是使用 \fInosuid\fR 选项挂载的文件系统，则不允许 \fIsetuid\fR 执行。
.sp
.LP
如果使用 \fBchmod\fR 更改包含 \fBACL\fR 条目的文件的文件组所有者权限，则会同时将文件组所有者权限和 \fBACL\fR 掩码更改为新的权限。请注意，对于文件中有其 \fBACL\fR 条目的附加用户和组，新的 \fBACL\fR 掩码权限可能会更改其有效权限。使用 \fBgetfacl\fR(1) 或 \fBls\fR(1) 命令可确保为所有 \fBACL\fR 条目设置相应的权限。
