'\" te
.\" Copyright (c) 2005, 2012, Oracle and/or its affiliates.All rights reserved.
.TH cpustat 1M "2012 年 2 月 27 日" "SunOS 5.11" "系统管理命令"
.SH 名称
cpustat \- 使用 CPU 性能计数器监视系统行为
.SH 用法概要
.LP
.nf
\fBcpustat\fR \fB-c\fR \fIeventspec\fR [\fB-c\fR \fIeventspec\fR]... [\fB-p\fR \fIperiod\fR] [\fB-T\fR u | d ]
     [\fB-Dmnst\fR] [\fB-A\fR cor|soc|bins] [\fB-k\fR \fIkeys\fR] [\fB-o\fR \fIlimit\fR]
     [\fB-I\fR \fIstatfile\fR] [\fB-O\fR \fIstatfile\fR] [\fIinterval\fR [\fIcount\fR]]
.fi

.LP
.nf
\fBcpustat\fR \fB-h\fR
.fi

.SH 描述
.sp
.LP
通过 \fBcpustat\fR 实用程序，可使用 \fBCPU\fR 性能计数器监视系统中 \fBCPU\fR 的整体行为。
.sp
.LP
如果指定了 \fIinterval\fR，\fBcpustat\fR 会每 \fIinterval\fR 秒对活动进行一次抽样，并一直重复。如果指定了 \fIcount\fR，统计信息将重复 \fIcount\fR 次。如果这两项均未指定，将使用五秒间隔，且对进行的抽样次数没有限制。
.SH 选项
.sp
.LP
支持以下选项：
.sp
.ne 2
.mk
.na
\fB\fB-A\fR \fBcor\fR\fR
.ad
.sp .6
.RS 4n
按核心 ID 聚合输出。具有相同核心 ID 的数据行将聚合到一个行中。缺省情况下，列将替换为小计。而 \fB-m\fR 选项将输出列平均值。
.RE

.sp
.ne 2
.mk
.na
\fB\fB-A\fR \fBsoc\fR\fR
.ad
.sp .6
.RS 4n
按套接字 ID 聚合输出。具有相同套接字 ID 的数据行聚合为一行。缺省情况下，列将替换为小计。而 \fB-m\fR 选项将输出列平均值。
.RE

.sp
.ne 2
.mk
.na
\fB\fB-A\fR \fBbins\fR\fR
.ad
.sp .6
.RS 4n
将每个抽样期间内的行聚合到数量较少的容器 (bin) 中，按其出现顺序对其分组，并针对每个 bin 中的行输出柱形小计。要计算算术平均值而不是小计，可以使用 \fB-m\fR 选项。在执行 bin 聚合步骤之前，可以使用 \fB-k\fR 排序选项来更改行顺序。\fBsze\fR 列会输出每个 bin 中的 CPU 数。\fBBIN\fR 列将替换 \fBCPU\fR 列并输出每个 \fBbin\fR 的序号。
.RE

.sp
.ne 2
.mk
.na
\fB\fB-c\fR \fIeventspec\fR\fR
.ad
.sp .6
.RS 4n
指定一组 \fBCPU\fR 性能计数器要监视的事件。这些事件规范的语法为：
.sp
.in +2
.nf
[picn=]\fIeventn\fR[,attr[\fIn\fR][=\fIval\fR]][,[picn=]\fIeventn\fR
     [,attr[n][=\fIval\fR]],...,]
.fi
.in -2
.sp

您可以使用 \fB-h\fR 选项获取可用事件和属性的列表。这会导致生成用法消息。可以不必显式分配计数器，这时 \fBcpustat\fR 会自动尝试选择适用的计数器。 
.sp
可以按适合 \fBstrtoll\fR(3C) 的格式以十六进制、八进制或十进制表示法表示属性值。事件规范中存在的没有显式值的属性会收到缺省值 \fB1\fR。没有相应计数器编号的属性将应用到规范中的所有计数器。
.sp
可通过阅读 \fBCPU\fR 制造商的事件文档来确定这些事件规范的语义。
.sp
可以指定多个 \fB-c\fR 选项，在这种情况下，该命令会在每个样例上的不同事件设置之间循环。
.RE

.sp
.ne 2
.mk
.na
\fB\fB-D\fR\fR
.ad
.sp .6
.RS 4n
启用调试模式。
.RE

.sp
.ne 2
.mk
.na
\fB\fB-h\fR\fR
.ad
.sp .6
.RS 4n
列显一条详细帮助消息，说明如何使用实用程序以及如何对依赖于处理器的计数器进行编程。
.RE

.sp
.ne 2
.mk
.na
\fB\fB-I\fR \fIstatfile\fR\fR
.ad
.sp .6
.RS 4n
重放之前保存在 \fIstatfile\fR 中的数据。通过指定 \fB-O\fR 来创建用于重放的数据文件。该选项尤其适用于分析具有大量 CPU 的计算机的统计信息。可以使用不同的排序和聚合选项对文件进行多次重新处理。
.sp
\fB-I\fR 选项不能与 interval 和 count 一起指定。
.sp
如果文件名称为 \fB—\fR（连字符），则将从标准输入进行读取。
.RE

.sp
.ne 2
.mk
.na
\fB\fB-k\fR \fIkey1\fR,...\fR
.ad
.sp .6
.RS 4n
每个抽样期间内的行依次按照 \fIkey1\fR、\fIkey2\fR 等从高到低排序。每个 key 都是事件的逗号分隔列表。可以指定多个 \fB-k\fR 选项。
.sp
当使用多个 \fB-c\fR \fIevent-spec\fR 选项运行 \fBcpustat\fR 时，会生成交替显示各个 \fIevent-spec\fR 的报告。指定多个 \fB-k\fR 选项可以按不同的方式对每个 \fIevent-spec\fR 进行排序。对于每个 \fIevent-spec\fR，将使用其键包含 \fIevent-spec\fR 中事件的正确子集的第一个 \fB-k\fR 选项。
.RE

.sp
.ne 2
.mk
.na
\fB\fB-m\fR\fR
.ad
.sp .6
.RS 4n
当使用 \fB-b\fR 或 \fB-i\fR 来聚合多个 CPU 的数据时，将列显算术平均值而不是总和。
.RE

.sp
.ne 2
.mk
.na
\fB\fB-n\fR\fR
.ad
.sp .6
.RS 4n
省略所有文件头输出（在 \fBcpustat\fR 位于流水线的开头时很有用）。
.RE

.sp
.ne 2
.mk
.na
\fB\fB-o\fR \fInum\fR\fR
.ad
.sp .6
.RS 4n
在应用排序和聚合选项后，仅列显每个抽样期间内的前 \fInum\fR 行。
.RE

.sp
.ne 2
.mk
.na
\fB\fB-O\fR \fIstatfile\fR\fR
.ad
.sp .6
.RS 4n
将所有数据保存到 \fIstatfile\fR 中。以后可以使用 \fB-I\fR 重放该数据。
.sp
如果文件名为 \fB—\fR（连字符），则将写入到标准输出。
.sp
\fB-O\fR 的用途是捕获所有的可用数据。它与以下数据缩减选项不兼容：\fB-A\fR、\fB-k\fR、\fB-m\fR 和 \fB-o\fR。
.RE

.sp
.ne 2
.mk
.na
\fB\fB-p\fR \fIperiod\fR\fR
.ad
.sp .6
.RS 4n
使 \fBcpustat\fR 每 \fIperiod\fR 秒循环整个 \fIeventspec\fR 列表。该工具在每个循环后将进入休眠状态，直至自第一次测量 \fIeventspec\fR 后已过去 \fIperiod\fR 秒。 
.sp
如果提供了此选项，则可选的 \fIcount\fR 参数指定要进行的总循环数（而不是要进行的总抽样数）。如果 \fIperiod\fR 小于 \fIeventspec\fR 数目乘以 \fIinterval\fR，则该工具假定期间为 \fB0\fR。 
.RE

.sp
.ne 2
.mk
.na
\fB\fB-s\fR\fR
.ad
.sp .6
.RS 4n
在绑定仅系统 \fIeventspec\fR 时，创建一个空闲的 soaker 线程以进行自旋。当前处理器集中的每个 CPU 绑定一个空闲 soaker 线程。仅系统 \fIeventspec\fR 同时包含 \fBnouser\fR 和 \fBsys\fR 标记，并测量 CPU 在特权模式下运行时发生的事件。此选项可防止内核的空闲循环运行和触发系统模式事件。 
.RE

.sp
.ne 2
.mk
.na
\fB\fB-T\fR \fBu\fR | \fBd\fR\fR
.ad
.sp .6
.RS 4n
显示时间戳。
.sp
指定 \fBu\fR 表示时间的内部表示形式的印刷表示形式。请参见 \fBtime\fR(2)。指定 \fBd\fR 表示标准日期格式。请参见\fBdate\fR(1)。
.RE

.sp
.ne 2
.mk
.na
\fB\fB-t\fR\fR
.ad
.sp .6
.RS 4n
列显处理器周期计数的附加列（如果在当前体系结构中可用）。
.RE

.SH 用法
.sp
.LP
可以使用一个密切相关的实用程序 \fBcputrack\fR(1) 来监视个体应用程序的行为，此监视受系统中其他活动的干扰很少，或不受干扰。
.sp
.LP
\fBcpustat\fR 实用程序必须由超级用户运行，因为 \fBcpustat\fR 在系统范围内使用 \fBCPU\fR 性能计数器和使用 \fBCPU\fR 性能计数器来监视个体进程（例如，由 \fBcputrack\fR 使用）存在内在冲突。
.sp
.LP
在启动此实用程序的任何实例后和该实用程序的最后一个实例终止前，不允许每一进程或每一 \fBLWP\fR 再使用计数器。
.sp
.LP
命令输出的时间对应于实际对硬件计数器进行抽样时的挂钟时间，而不是程序告知内核进行抽样的时间。从与 \fBgethrtime\fR(3C) 相同的时基派生时间。 
.sp
.LP
通过 \fB-t\fR 选项启用的处理器周期计数始终适用于用户模式和系统模式，无论应用于性能计数器寄存器的设置为何。
.sp
.LP
在一些使用 "sys" 标记以系统模式运行的硬件平台上，计数器是使用 32 位寄存器实现的。内核会尝试捕获所有溢出以合成 64 位计数器，但由于硬件实现的限制，除非保持足够短的抽样间隔，否则溢出可能会丢失。对处理器时钟周期进行计数的事件最容易发生此情况。如果需要关注此类事件，应频繁抽样，以便两次抽样间隔不超过 4 亿个时钟周期。
.sp
.LP
根据设计，通过 \fBnawk\fR(1) 和 \fBperl\fR(1) 可以很容易地解析 cpustat 的输出，从而允许通过在脚本中嵌入 \fBcpustat\fR 来构建性能工具。此外，也可以使用 \fBlibcpc\fR(3LIB) 的功能，通过构建 \fBcpustat\fR 所依据的相同 \fBAPI\fR 直接构造这些工具。请参见 \fBcpc\fR(3CPC)。 
.sp
.LP
\fBcpustat\fR 实用程序仅监视当前处理器集中它可以访问的 \fBCPU\fR。因此，可在不同处理器集中的 \fBCPU\fR 上运行该实用程序的多个实例。有关处理器集的更多信息，请参见 \fBpsrset\fR(1M)。
.sp
.LP
由于 \fBcpustat\fR 使用绑定到 \fBCPU\fR 的 \fBLWP\fR，因此，可能必须先终止该实用程序，然后才能更改相关处理器的配置。
.SH 示例
.SS "SPARC"
.LP
\fB示例 1 \fR对外部高速缓存引用和未命中进行测量
.sp
.LP
以下示例测量外部高速缓存中的未命中和引用。在 UltraSPARC 计算机上以用户模式运行处理器时会发生这些情况。

.sp
.in +2
.nf
example% cpustat -c EC_ref,EC_misses 1 3

    time cpu event      pic0      pic1
   1.008   0  tick     69284      1647
   1.008   1  tick     43284      1175
   2.008   0  tick    179576      1834
   2.008   1  tick    202022     12046
   3.008   0  tick     93262       384
   3.008   1  tick     63649      1118
   3.008   2 total    651077     18204
.fi
.in -2
.sp

.SS "x86"
.LP
\fB示例 2 \fR测量 Pentium 4 上的分支预测成功
.sp
.LP
以下示例测量在 Pentium 4 计算机上在用户和系统模式下的分支预测失误和总分支指令数。

.sp
.in +2
.nf
 example% cpustat -c \e
    pic12=branch_retired,emask12=0x4,pic14=branch_retired,\e
    emask14=0xf,sys 1 3
  
    time cpu event      pic12     pic14
   1.010   1  tick       458       684 
   1.010   0  tick       305       511 
   2.010   0  tick       181       269 
   2.010   1  tick       469       684 
   3.010   0  tick       182       269 
   3.010   1  tick       468       684 
   3.010   2 total      2063      3101 
.fi
.in -2
.sp

.LP
\fB示例 3 \fR在 Opteron 上对内存访问进行计数
.sp
.LP
以下示例确定 Opteron 上的每个内存控制器进行的内存访问数，并按内部内存延迟进行了细分：

.sp
.in +2
.nf
cpustat -c \e
   pic0=NB_mem_ctrlr_page_access,umask0=0x01, \e
   pic1=NB_mem_ctrlr_page_access,umask1=0x02, \e
   pic2=NB_mem_ctrlr_page_access,umask2=0x04,sys \e
   1

    time cpu event      pic0      pic1      pic2
   1.003   0  tick     41976     53519      7720
   1.003   1  tick      5589     19402       731
   2.003   1  tick      6011     17005       658
   2.003   0  tick     43944     45473      7338
   3.003   1  tick      7105     20177       762
   3.003   0  tick     47045     48025      7119
   4.003   0  tick     43224     46296      6694
   4.003   1  tick      5366     19114       652
.fi
.in -2
.sp

.LP
\fB示例 4 \fR使用过滤器显示多个 CPU
.sp
.LP
以下命令显示 \fBDTLB_miss\fR 比率最高的三个 CPU。

.sp
.in +2
.nf
example% \fBcpustat -c DTLB_miss -k DTLB_miss -n 3 1 1\fR

 time cpu event DTLB_miss
1.040 115  tick       107
1.006  18  tick        98
1.045 126  tick        31
1.046  96 total       236

event DTLB_miss
total       236
.fi
.in -2
.sp

.LP
\fB示例 5 \fR使用过滤器将多个 CPU 聚合为四组（按四分位数分组）
.sp
.LP
以下命令按照 DTLB 未命中比率将 256 个 CPU 聚合为四组（按四分位数分组）。

.sp
.in +2
.nf
example% \fBcpustat -c DTLB_miss -b 4 -k DTLB_miss -m 1 1\fR

 time bin event DTLB_miss sze
1.032   0  tick        46  24
1.021   1  tick         3  24
1.007   2  tick         2  24
1.022   3  tick         0  24
1.045   4 total        51  24

event DTLB_miss
total        51
.fi
.in -2
.sp

.LP
\fB示例 6 \fR对多个事件进行排序
.sp
.LP
以下命令序列对多个事件进行排序。

.sp
.in +2
.nf
example% \fBcpustat -O /tmp/OUT -c ITLB_miss,DTLB_miss -c PAPI_tot_ins 1 2\fR
example% \fBcpustat  -I /tmp/OUT -b 4 -k ITLB_miss -k PAPI_tot_ins\fR

 time bin event ITLB_miss DTLB_miss sze
1.020   0  tick       129       673  24
1.009   1  tick         0        61  24
1.005   2  tick         0        79  24
1.039   3  tick         0        64  24
1.082   4 total       129       877  24

 time bin event PAPI_tot_ins sze
2.073   0  tick        51947  24
2.020   1  tick        14976  24
2.076   2  tick        14976  24
2.004   3  tick        14976  24
2.082   4 total        96875  24

event ITLB_miss DTLB_miss PAPI_tot_ins
total       129       877        96875
.fi
.in -2
.sp

.SH 警告
.sp
.LP
通过运行 \fBcpustat\fR 命令，超级用户强行使所有现有性能计数器上下文失效。然后，这可能会导致 \fBcputrack\fR 命令的所有调用以及性能计数器上下文的其他用户因未知错误而过早退出。
.sp
.LP
如果在其 \fBCPU\fR 性能计数器不受 Solaris 支持的系统上调用 \fBcpustat\fR，将显示以下消息：
.sp
.in +2
.nf
cpustat: cannot access performance counters - Operation not applicable
.fi
.in -2
.sp

.sp
.LP
此错误消息表明 \fBcpc_open()\fR 已失败且已记录在 \fBcpc_open\fR(3CPC) 中。查看此文档以获取有关该问题及其可能的解决方案的更多信息。
.sp
.LP
如果请求的时间间隔较短，\fBcpustat\fR 可能无法达到所需的抽样率。在这种情况下，可能会丢弃某些样例。
.SH 属性
.sp
.LP
有关下列属性的说明，请参见 \fBattributes\fR(5)：
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i) 
lw(2.75i) |lw(2.75i) 
.
属性类型属性值
_
可用性diagnostic/cpu-counters
_
接口稳定性Committed（已确定）
.TE

.SH 另请参见
.sp
.LP
\fBcputrack\fR(1)、\fBnawk\fR(1)、\fBperl\fR(1)、\fBiostat\fR(1M)、\fBprstat\fR(1M)、\fBpsrset\fR(1M)、\fBvmstat\fR(1M)、\fBcpc\fR(3CPC)、\fBcpc_open\fR(3CPC)、\fBcpc_bind_cpu\fR(3CPC)、\fBgethrtime\fR(3C)、\fBstrtoll\fR(3C)、\fBlibcpc\fR(3LIB)、\fBattributes\fR(5)
.SH 附注
.sp
.LP
当 \fBcpustat\fR 在 Pentium 4 上运行且启用了超线程时，一个 CPC 集仅绑定到每个物理 CPU 的一个逻辑 CPU。请参见 \fBcpc_bind_cpu\fR(3CPC)。
